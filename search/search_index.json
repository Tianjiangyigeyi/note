{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"<ul> <li>\u8be5\u4ed3\u5e93\u7528\u6765\u5b58\u653e\u672c\u4eba\u5927\u4e8c\u4ee5\u6765\u6240\u6709\u7684\u7b14\u8bb0</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/","title":"1. \u4e24\u6570\u4e4b\u548c(easy)","text":"<p>2023/1/8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c <code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c <code>target</code> \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,7,11,15], target = 9\n\u8f93\u51fa\uff1a[0,1]\n\u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,2,4], target = 6\n\u8f93\u51fa\uff1a[1,2]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,3], target = 6\n\u8f93\u51fa\uff1a[0,1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>2 &lt;= nums.length &lt;= 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> <li><code>-109 &lt;= target &lt;= 109</code></li> <li>\u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7b54\u6848</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u60f3\u51fa\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e <code>O(n2)</code> \u7684\u7b97\u6cd5\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_2","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    int a, b;\n    int* res;\n    int i, j;\n    for( i = 0; i &lt; numsSize - 1; i++ ){\n        for( j = i + 1; j &lt; numsSize; j++ ){\n            if( nums[i] + nums[j] == target ){\n                *returnSize = 2;\n                res = (int*)malloc(sizeof(int) * 2);\n                res[0] = i;\n                res[1] = j;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}\n</code></pre> <ul> <li>\u57fa\u672c\u662f\u66b4\u529b\u679a\u4e3e,\u66f4\u597d\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6,\u4f46\u76f8\u5e94\u5730\u4f1a\u589e\u52a0\u7a7a\u95f4\u590d\u6742\u5ea6.</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_3","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; hashtable;\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            auto it = hashtable.find(target - nums[i]);\n            if (it != hashtable.end()) {\n                return {it-&gt;second, i};\n            }\n            hashtable[nums[i]] = i;\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_4","title":"\u611f\u60f3","text":"<p>\u7b2c\u4e00\u6b21\u63a5\u89e6C++\u91cc\u7684unordered_map,\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u4f7f\u7528\u54c8\u5e0c\u8868.</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#2-medium","title":"2. \u4e24\u6570\u76f8\u52a0(medium)","text":"<p>2023/3/5</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_5","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002</p> <p>\u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4]\n\u8f93\u51fa\uff1a[7,0,8]\n\u89e3\u91ca\uff1a342 + 465 = 807.\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1al1 = [0], l2 = [0]\n\u8f93\u51fa\uff1a[0]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1al1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n\u8f93\u51fa\uff1a[8,9,9,9,0,0,0,1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u5728\u8303\u56f4 <code>[1, 100]</code> \u5185</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u5217\u8868\u8868\u793a\u7684\u6570\u5b57\u4e0d\u542b\u524d\u5bfc\u96f6</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_6","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n#include &lt;stdlib.h&gt;\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n    struct ListNode* head, *tail, * temp;\n    int carry = 0, res = 0, val1, val2;\n    head = NULL;\n    tail = NULL;\n    while(l1 != NULL || l2 != NULL || carry ){\n        temp = (struct ListNode*)malloc(sizeof(struct ListNode));\n        temp-&gt;val = 0;\n        temp-&gt;next = NULL;\n        if(l1 == NULL){\n            val1 = 0;\n        }else{\n            val1 = l1-&gt;val;\n            l1 = l1-&gt;next;\n        }\n        if(l2 == NULL){\n            val2 = 0;\n        }else{\n            val2 = l2-&gt;val;\n            l2 = l2-&gt;next;\n        }\n\n        res = val1 + val2;\n        if(res + carry &gt; 9){\n            res = res - 10 + carry;\n            carry = 0;\n            temp-&gt;val = res;\n            carry = 1;\n        }else{\n            res = res + carry;\n            carry = 0;\n            temp-&gt;val = res;\n        }\n        if(head == NULL){\n            head = temp;\n            tail = head;\n\n        }else{\n            tail-&gt;next = temp;\n            tail = tail-&gt;next;\n        }\n    }\n    return head;\n}\n</code></pre> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *head = nullptr, *tail = nullptr;\n        int carry = 0;\n        while(l1 || l2 || carry){\n            int n1 = l1 ? l1-&gt;val : 0;\n            int n2 = l2 ? l2-&gt;val : 0;\n            int sum = n1 + n2 + carry;\n            if(!head){\n                head = tail = new ListNode(sum % 10);\n            }else{\n                tail-&gt;next = new ListNode(sum % 10);\n                tail = tail-&gt;next;\n            }\n            carry = sum / 10;\n            if(l1){\n                l1 = l1-&gt;next;\n            }\n            if(l2){\n                l2 = l2-&gt;next;\n            }\n        }\n        return head;\n    }\n};\n</code></pre> <ul> <li>\u5148\u7528C\u5199\u7684,AC\u4e86\u4e4b\u540e\u770b\u4e86\u9898\u89e3,\u601d\u8def\u57fa\u672c\u662f\u4e00\u6837\u7684,\u7ec6\u8282\u6709\u6240\u51fa\u5165,\u8ddf\u7740\u9898\u89e3\u5199\u4e86\u4e00\u904dC++\u7684\u7248\u672c,\u601d\u8def\u5f88\u7b80\u5355,\u5c31\u662f\u501f\u9274\u52a0\u6cd5\u7684\u539f\u7406,\u53ea\u4e0d\u8fc7\u8981\u7528\u94fe\u8868\u5b9e\u73b0.</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_7","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *head = nullptr, *tail = nullptr;\n        int carry = 0;\n        while (l1 || l2) {\n            int n1 = l1 ? l1-&gt;val: 0;\n            int n2 = l2 ? l2-&gt;val: 0;\n            int sum = n1 + n2 + carry;\n            if (!head) {\n                head = tail = new ListNode(sum % 10);\n            } else {\n                tail-&gt;next = new ListNode(sum % 10);\n                tail = tail-&gt;next;\n            }\n            carry = sum / 10;\n            if (l1) {\n                l1 = l1-&gt;next;\n            }\n            if (l2) {\n                l2 = l2-&gt;next;\n            }\n        }\n        if (carry &gt; 0) {\n            tail-&gt;next = new ListNode(carry);\n        }\n        return head;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_8","title":"\u611f\u60f3","text":"<p>\u6700\u8fd1\u8fd9\u6bb5\u65f6\u95f4\u4e00\u76f4\u5728\u5b66C++\u7684\u8bed\u6cd5,\u540e\u9762\u7684\u9898\u90fd\u6253\u7b97\u7528C++\u6765\u5199\u4e86,\u8fb9\u5199\u8fb9\u5b66</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#3-medium","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32(medium)","text":"<p>2023/3/6</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_9","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: s = \"abcabcbb\"\n\u8f93\u51fa: 3 \n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: s = \"bbbbb\"\n\u8f93\u51fa: 1\n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: s = \"pwwkew\"\n\u8f93\u51fa: 3\n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n     \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= s.length &lt;= 5 * 104</code></li> <li><code>s</code> \u7531\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u548c\u7a7a\u683c\u7ec4\u6210</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_10","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        string sub;\n        int len = 0, max = 0;\n        for(int i = 0; i &lt; s.length(); i++){\n            int pos = sub.find(s[i]);\n            sub += s[i];\n            if(pos != string::npos){\n                len = sub.length()-1;\n                max = (len &gt; max) ? len : max;\n                sub.erase(0,pos+1);\n            }\n        }\n        len = sub.length();\n        return (len &gt; max) ? len : max;\n    }\n};\n</code></pre> <ul> <li>\u8fd8\u6709\u53ef\u4ee5\u4f18\u5316\u7684\u7a7a\u95f4,\u5f53max\u5df2\u7ecf\u5927\u4e8e\u5269\u4f59\u5b50\u4e32\u7684\u957f\u5ea6\u65f6,\u53ef\u4ee5\u76f4\u63a5return</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_11","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        // \u54c8\u5e0c\u96c6\u5408\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u662f\u5426\u51fa\u73b0\u8fc7\n        unordered_set&lt;char&gt; occ;\n        int n = s.size();\n        // \u53f3\u6307\u9488\uff0c\u521d\u59cb\u503c\u4e3a -1\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u5b57\u7b26\u4e32\u7684\u5de6\u8fb9\u754c\u7684\u5de6\u4fa7\uff0c\u8fd8\u6ca1\u6709\u5f00\u59cb\u79fb\u52a8\n        int rk = -1, ans = 0;\n        // \u679a\u4e3e\u5de6\u6307\u9488\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u503c\u9690\u6027\u5730\u8868\u793a\u4e3a -1\n        for (int i = 0; i &lt; n; ++i) {\n            if (i != 0) {\n                // \u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u79fb\u9664\u4e00\u4e2a\u5b57\u7b26\n                occ.erase(s[i - 1]);\n            }\n            while (rk + 1 &lt; n &amp;&amp; !occ.count(s[rk + 1])) {\n                // \u4e0d\u65ad\u5730\u79fb\u52a8\u53f3\u6307\u9488\n                occ.insert(s[rk + 1]);\n                ++rk;\n            }\n            // \u7b2c i \u5230 rk \u4e2a\u5b57\u7b26\u662f\u4e00\u4e2a\u6781\u957f\u7684\u65e0\u91cd\u590d\u5b57\u7b26\u5b50\u4e32\n            ans = max(ans, rk - i + 1);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_12","title":"\u611f\u60f3","text":"<p>\u7b2c\u4e00\u6b21\u63a5\u89e6\u6ed1\u52a8\u7a97\u53e3,\u8fb9\u5199\u8fb9\u4f18\u5316,\u81ea\u5df1\u6478\u722c\u6eda\u6253\u5199\u51fa\u4e86\u8fd9\u4e2a\u4ee3\u7801,\u503c\u5f97\u9f13\u52b1\u7684\u662f\u81ea\u5df1\u60f3\u51fa\u6765\u7684\u6ed1\u52a8\u7a97\u53e3,\u5e76\u4e14\u65f6\u95f4\u548c\u5185\u5b58\u90fd\u6bd4\u5b98\u65b9\u9898\u89e3\u7ed9\u7684\u4ee3\u7801\u4f4e!</p> <p>\u540c\u65f6\u4e5f\u662f\u7b2c\u4e00\u6b21\u72ec\u7acb\u4f7f\u7528C++\u5199\u51fa\u6765\u7684\u7a0b\u5e8f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#4-hard","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570(hard)","text":"<p>2023/3/8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_13","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a <code>m</code> \u548c <code>n</code> \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 <code>nums1</code> \u548c <code>nums2</code>\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570 \u3002</p> <p>\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a <code>O(log (m+n))</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums1 = [1,3], nums2 = [2]\n\u8f93\u51fa\uff1a2.00000\n\u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums1 = [1,2], nums2 = [3,4]\n\u8f93\u51fa\uff1a2.50000\n\u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3,4] \uff0c\u4e2d\u4f4d\u6570 (2 + 3) / 2 = 2.5\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>nums1.length == m</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m &lt;= 1000</code></li> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= m + n &lt;= 2000</code></li> <li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_14","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int len = nums1.size() + nums2.size();\n        int pos1 = 0, pos2 = 0;\n        double res = 0;\n        if(len%2){\n            for(int i = 0; i &lt;= len/2; i++){\n                if(pos1 &gt;= nums1.size()){\n                    res = nums2[pos2++];\n                    continue;\n                }else if(pos2 &gt;= nums2.size()){\n                    res = nums1[pos1++];\n                    continue;\n                }\n                if(nums1[pos1] &gt;= nums2[pos2]){\n                    res = nums2[pos2++];\n                }else{\n                    res = nums1[pos1++];\n                }\n            }\n            return res;\n        }else{\n            for(int i = 0; i &lt; len/2; i++){\n                if(pos1 &gt;= nums1.size()){\n                    res = nums2[pos2++];\n                    continue;\n                }else if(pos2 &gt;= nums2.size()){\n                    res = nums1[pos1++];\n                    continue;\n                }\n                if(nums1[pos1] &gt;= nums2[pos2]){\n                    res = nums2[pos2++];\n                }else{\n                    res = nums1[pos1++];\n                }\n            }\n            double res2;\n            if(pos1 &gt;= nums1.size()){\n                res2 = nums2[pos2++];\n                return (res + res2)/2.0;\n            }else if(pos2 &gt;= nums2.size()){\n                res2 = nums1[pos1++];\n                return (res + res2)/2.0;\n            }\n            if(nums1[pos1] &gt;= nums2[pos2]){\n                res2 = nums2[pos2++];\n            }else{\n                res2 = nums1[pos1++];\n            }\n            return (res + res2)/2.0;\n        }\n    }\n};\n</code></pre> <ul> <li>\u662f\u4e00\u79cd\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5,\u53cc\u6307\u9488,\u5177\u4f53\u7ec6\u8282\u8fd8\u6709\u4f18\u5316\u7a7a\u95f4,\u4f46\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(m+n),\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(1)</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_15","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int getKthElement(const vector&lt;int&gt;&amp; nums1, const vector&lt;int&gt;&amp; nums2, int k) {\n        /* \u4e3b\u8981\u601d\u8def\uff1a\u8981\u627e\u5230\u7b2c k (k&gt;1) \u5c0f\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u53d6 pivot1 = nums1[k/2-1] \u548c pivot2 = nums2[k/2-1] \u8fdb\u884c\u6bd4\u8f83\n         * \u8fd9\u91cc\u7684 \"/\" \u8868\u793a\u6574\u9664\n         * nums1 \u4e2d\u5c0f\u4e8e\u7b49\u4e8e pivot1 \u7684\u5143\u7d20\u6709 nums1[0 .. k/2-2] \u5171\u8ba1 k/2-1 \u4e2a\n         * nums2 \u4e2d\u5c0f\u4e8e\u7b49\u4e8e pivot2 \u7684\u5143\u7d20\u6709 nums2[0 .. k/2-2] \u5171\u8ba1 k/2-1 \u4e2a\n         * \u53d6 pivot = min(pivot1, pivot2)\uff0c\u4e24\u4e2a\u6570\u7ec4\u4e2d\u5c0f\u4e8e\u7b49\u4e8e pivot \u7684\u5143\u7d20\u5171\u8ba1\u4e0d\u4f1a\u8d85\u8fc7 (k/2-1) + (k/2-1) &lt;= k-2 \u4e2a\n         * \u8fd9\u6837 pivot \u672c\u8eab\u6700\u5927\u4e5f\u53ea\u80fd\u662f\u7b2c k-1 \u5c0f\u7684\u5143\u7d20\n         * \u5982\u679c pivot = pivot1\uff0c\u90a3\u4e48 nums1[0 .. k/2-1] \u90fd\u4e0d\u53ef\u80fd\u662f\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002\u628a\u8fd9\u4e9b\u5143\u7d20\u5168\u90e8 \"\u5220\u9664\"\uff0c\u5269\u4e0b\u7684\u4f5c\u4e3a\u65b0\u7684 nums1 \u6570\u7ec4\n         * \u5982\u679c pivot = pivot2\uff0c\u90a3\u4e48 nums2[0 .. k/2-1] \u90fd\u4e0d\u53ef\u80fd\u662f\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002\u628a\u8fd9\u4e9b\u5143\u7d20\u5168\u90e8 \"\u5220\u9664\"\uff0c\u5269\u4e0b\u7684\u4f5c\u4e3a\u65b0\u7684 nums2 \u6570\u7ec4\n         * \u7531\u4e8e\u6211\u4eec \"\u5220\u9664\" \u4e86\u4e00\u4e9b\u5143\u7d20\uff08\u8fd9\u4e9b\u5143\u7d20\u90fd\u6bd4\u7b2c k \u5c0f\u7684\u5143\u7d20\u8981\u5c0f\uff09\uff0c\u56e0\u6b64\u9700\u8981\u4fee\u6539 k \u7684\u503c\uff0c\u51cf\u53bb\u5220\u9664\u7684\u6570\u7684\u4e2a\u6570\n         */\n\n        int m = nums1.size();\n        int n = nums2.size();\n        int index1 = 0, index2 = 0;\n\n        while (true) {\n            // \u8fb9\u754c\u60c5\u51b5\n            if (index1 == m) {\n                return nums2[index2 + k - 1];\n            }\n            if (index2 == n) {\n                return nums1[index1 + k - 1];\n            }\n            if (k == 1) {\n                return min(nums1[index1], nums2[index2]);\n            }\n\n            // \u6b63\u5e38\u60c5\u51b5\n            int newIndex1 = min(index1 + k / 2 - 1, m - 1);\n            int newIndex2 = min(index2 + k / 2 - 1, n - 1);\n            int pivot1 = nums1[newIndex1];\n            int pivot2 = nums2[newIndex2];\n            if (pivot1 &lt;= pivot2) {\n                k -= newIndex1 - index1 + 1;\n                index1 = newIndex1 + 1;\n            }\n            else {\n                k -= newIndex2 - index2 + 1;\n                index2 = newIndex2 + 1;\n            }\n        }\n    }\n\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int totalLength = nums1.size() + nums2.size();\n        if (totalLength % 2 == 1) {\n            return getKthElement(nums1, nums2, (totalLength + 1) / 2);\n        }\n        else {\n            return (getKthElement(nums1, nums2, totalLength / 2) + getKthElement(nums1, nums2, totalLength / 2 + 1)) / 2.0;\n        }\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        if (nums1.size() &gt; nums2.size()) {\n            return findMedianSortedArrays(nums2, nums1);\n        }\n\n        int m = nums1.size();\n        int n = nums2.size();\n        int left = 0, right = m;\n        // median1\uff1a\u524d\u4e00\u90e8\u5206\u7684\u6700\u5927\u503c\n        // median2\uff1a\u540e\u4e00\u90e8\u5206\u7684\u6700\u5c0f\u503c\n        int median1 = 0, median2 = 0;\n\n        while (left &lt;= right) {\n            // \u524d\u4e00\u90e8\u5206\u5305\u542b nums1[0 .. i-1] \u548c nums2[0 .. j-1]\n            // \u540e\u4e00\u90e8\u5206\u5305\u542b nums1[i .. m-1] \u548c nums2[j .. n-1]\n            int i = (left + right) / 2;\n            int j = (m + n + 1) / 2 - i;\n\n            // nums_im1, nums_i, nums_jm1, nums_j \u5206\u522b\u8868\u793a nums1[i-1], nums1[i], nums2[j-1], nums2[j]\n            int nums_im1 = (i == 0 ? INT_MIN : nums1[i - 1]);\n            int nums_i = (i == m ? INT_MAX : nums1[i]);\n            int nums_jm1 = (j == 0 ? INT_MIN : nums2[j - 1]);\n            int nums_j = (j == n ? INT_MAX : nums2[j]);\n\n            if (nums_im1 &lt;= nums_j) {\n                median1 = max(nums_im1, nums_jm1);\n                median2 = min(nums_i, nums_j);\n                left = i + 1;\n            } else {\n                right = i - 1;\n            }\n        }\n\n        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;\n    }\n};\n</code></pre> <ul> <li>\u7b2c\u4e00\u79cd\u4f18\u5316\u65b9\u5f0f,\u5229\u7528\u4e8c\u5206\u67e5\u627e,\u6bcf\u6b21\u5c06\\(\\frac{k}{2}\\)\u4e4b\u524d\u7684\u90fd\u53ef\u4ee5\u8df3\u8fc7\u904d\u5386,\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3aO(log(m+n))</li> <li>\u65b9\u6cd5\u4e8c\u5212\u5206\u6570\u7ec4,\u6682\u65f6\u8fd8\u6ca1\u6709\u7406\u89e3,\u7b49\u4ee5\u540e\u518d\u770b\u770b</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_16","title":"\u611f\u60f3","text":"<p>\u7b2c\u4e00\u6b21\u5199hard\u96be\u5ea6,\u8fd9\u9053\u9898\u4e0d\u662f\u5f88\u96be,\u6574\u4e2a\u8fc7\u7a0b\u4e0d\u8d85\u8fc7\u534a\u4e2a\u5c0f\u65f6,\u7b97\u6cd5\u6bd4\u8f83\u666e\u901a,\u60f3\u5230\u4e86\u66f4\u597d\u7684\u89e3\u6cd5(answer1),\u7531\u4e8e\u61d2(bushi),\u6ca1\u6709\u4ed8\u51fa\u884c\u52a8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#5-medium","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32(medium)","text":"<p>2023/3/8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_17","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002</p> <p>\u5982\u679c\u5b57\u7b26\u4e32\u7684\u53cd\u5e8f\u4e0e\u539f\u59cb\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u5219\u8be5\u5b57\u7b26\u4e32\u79f0\u4e3a\u56de\u6587\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"babad\"\n\u8f93\u51fa\uff1a\"bab\"\n\u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"cbbd\"\n\u8f93\u51fa\uff1a\"bb\"\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> \u4ec5\u7531\u6570\u5b57\u548c\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_18","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int size = s.size(), pos, max = 0, len = 0;\n        if(size == 0 || size == 1){\n            return s;\n        }\n        for(int i = 0; i &lt; size - max; i++){\n            int j = i;\n            int k = s.find(s[i], j + 1);\n            while(k != string::npos){\n                if(k - i + 1 &lt; max){\n                    j = k;\n                    k = s.find(s[i], j + 1);\n                    continue;\n                }else if(IsPalindrome(s.substr(i, k - i + 1))){\n                    max = k - i + 1;\n                    pos = i;\n                }\n                j = k;\n                k = s.find(s[i], j + 1);\n            }\n        }\n        if(max == 0){\n            return {s[0]};\n        }\n        return s.substr(pos, max);\n    }\n    bool IsPalindrome(string s) {\n        int pl = 0, pr = s.size() - 1;\n        while(pl &lt; pr){\n            if(s[pl++] != s[pr--]){\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int size = s.size();\n        bool **dp = new bool*[size] ();\n        for(int i = 0; i &lt; size; i++){\n            dp[i] = new bool[size] ();\n        }\n        for(int i = 0; i &lt; size; i++){\n            dp[i][i] = true;\n        }\n\n        int maxLen = 1, begin = 0;\n        for(int L = 2; L &lt;= size; L++){\n            for(int i = 0; i &lt; size; i++){\n                int j = i + L - 1;\n                if(j &gt;= size){\n                    break;\n                }\n                if(s[i] != s[j]){\n                    dp[i][j] = false;\n                }else{\n                    if(i == j - 1){\n                        dp[i][j] = true;\n                    }else{\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                    if(dp[i][j] &amp;&amp; L &gt; maxLen){\n                        maxLen = L;\n                        begin = i;\n                    }\n                }\n            }\n        }\n\n        return s.substr(begin, maxLen);\n    }\n};\n</code></pre> <p>2023/3/25\u5237\u591c\u65f6\u8010\u5fc3\u7814\u7a76\u4e86\u52a8\u6001\u89c4\u5212\u7684\u7b97\u6cd5\u9898\uff0c\u672c\u9898\u662f\u7b2c\u4e00\u9053AC\u7684\u52a8\u6001\u89c4\u5212</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_19","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if (n &lt; 2) {\n            return s;\n        }\n\n        int maxLen = 1;\n        int begin = 0;\n        // dp[i][j] \u8868\u793a s[i..j] \u662f\u5426\u662f\u56de\u6587\u4e32\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));\n        // \u521d\u59cb\u5316\uff1a\u6240\u6709\u957f\u5ea6\u4e3a 1 \u7684\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\n        for (int i = 0; i &lt; n; i++) {\n            dp[i][i] = true;\n        }\n        // \u9012\u63a8\u5f00\u59cb\n        // \u5148\u679a\u4e3e\u5b50\u4e32\u957f\u5ea6\n        for (int L = 2; L &lt;= n; L++) {\n            // \u679a\u4e3e\u5de6\u8fb9\u754c\uff0c\u5de6\u8fb9\u754c\u7684\u4e0a\u9650\u8bbe\u7f6e\u53ef\u4ee5\u5bbd\u677e\u4e00\u4e9b\n            for (int i = 0; i &lt; n; i++) {\n                // \u7531 L \u548c i \u53ef\u4ee5\u786e\u5b9a\u53f3\u8fb9\u754c\uff0c\u5373 j - i + 1 = L \u5f97\n                int j = L + i - 1;\n                // \u5982\u679c\u53f3\u8fb9\u754c\u8d8a\u754c\uff0c\u5c31\u53ef\u4ee5\u9000\u51fa\u5f53\u524d\u5faa\u73af\n                if (j &gt;= n) {\n                    break;\n                }\n\n                if (s[i] != s[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i &lt; 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n\n                // \u53ea\u8981 dp[i][L] == true \u6210\u7acb\uff0c\u5c31\u8868\u793a\u5b50\u4e32 s[i..L] \u662f\u56de\u6587\uff0c\u6b64\u65f6\u8bb0\u5f55\u56de\u6587\u957f\u5ea6\u548c\u8d77\u59cb\u4f4d\u7f6e\n                if (dp[i][j] &amp;&amp; j - i + 1 &gt; maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substr(begin, maxLen);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    pair&lt;int, int&gt; expandAroundCenter(const string&amp; s, int left, int right) {\n        while (left &gt;= 0 &amp;&amp; right &lt; s.size() &amp;&amp; s[left] == s[right]) {\n            --left;\n            ++right;\n        }\n        return {left + 1, right - 1};\n    }\n\n    string longestPalindrome(string s) {\n        int start = 0, end = 0;\n        for (int i = 0; i &lt; s.size(); ++i) {\n            auto [left1, right1] = expandAroundCenter(s, i, i);\n            auto [left2, right2] = expandAroundCenter(s, i, i + 1);\n            if (right1 - left1 &gt; end - start) {\n                start = left1;\n                end = right1;\n            }\n            if (right2 - left2 &gt; end - start) {\n                start = left2;\n                end = right2;\n            }\n        }\n        return s.substr(start, end - start + 1);\n    }\n};\n</code></pre> <ul> <li>\u7b2c\u4e00\u4e2a\u53c2\u8003\u7b54\u6848\u662f\u52a8\u6001\u89c4\u5212,\u7b2c\u4e8c\u4e2a\u662f\"\u4e2d\u5fc3\u6269\u5c55\u7b97\u6cd5\"</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_20","title":"\u611f\u60f3","text":"<p>\u5199\u4e86\u4e24\u4e2a\u534a\u5c0f\u65f6\u624dAC,\u5168\u90e8\u5220\u4e86\u91cd\u65b0\u6539\u4e86\u4e24\u904d,\u524d\u4e24\u904d\u90fd\u60f3\u7528\"\u806a\u660e\"\u7684\u529e\u6cd5\u89e3\u51b3,\u5931\u8d25\u540e\u65e0\u5948\u53ea\u80fd\u66b4\u529b\u7834\u89e3,\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n^3)\\),\u592a\u9ad8\u4e86,\u8d85\u51fa\u65f6\u95f4\u9650\u5236,\u901a\u8fc7\u4e00\u4e9b\u5c40\u90e8\u7684\u5c0f\u6539\u53d8\u4f18\u5316\u4e86\u4e00\u70b9,\u786c\u751f\u751f\u5730AC\u4e86,\u4ee3\u7801\u5e76\u4e0d\u7f8e\u89c2.\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u5f88\u9ad8.</p> <p>\u672c\u6765\u60f3\u7740\u628a\u52a8\u6001\u89c4\u5212\u7684\u89e3\u6cd5\u653e\u4e00\u653e\uff0c\u6ca1\u60f3\u5230\u4e0b\u4e00\u9898\uff08\u7b2c10\u9898\uff09\u53c8\u662f\u52a8\u6001\u89c4\u5212\uff0c\u4e8e\u662f\u56de\u6765\u91cd\u65b0\u5199\u4e86\u4e00\u904d\u8fd9\u9053\u9898\uff0c\u4ec5\u752820\u5206\u949fAC</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#10-hard","title":"10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d(hard)","text":"<p>2023/3/26</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_21","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b <code>p</code>\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 <code>'.'</code> \u548c <code>'*'</code> \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002</p> <ul> <li><code>'.'</code> \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26</li> <li><code>'*'</code> \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20</li> </ul> <p>\u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 <code>s</code>\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"aa\", p = \"a\"\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165\uff1as = \"aa\", p = \"a*\"\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u56e0\u4e3a '*' \u4ee3\u8868\u53ef\u4ee5\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20, \u5728\u8fd9\u91cc\u524d\u9762\u7684\u5143\u7d20\u5c31\u662f 'a'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 \"aa\" \u53ef\u88ab\u89c6\u4e3a 'a' \u91cd\u590d\u4e86\u4e00\u6b21\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"ab\", p = \".*\"\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\uff08'*'\uff09\u4efb\u610f\u5b57\u7b26\uff08'.'\uff09\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>1 &lt;= p.length &lt;= 20</code></li> <li><code>s</code> \u53ea\u5305\u542b\u4ece <code>a-z</code> \u7684\u5c0f\u5199\u5b57\u6bcd\u3002</li> <li><code>p</code> \u53ea\u5305\u542b\u4ece <code>a-z</code> \u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26 <code>.</code> \u548c <code>*</code>\u3002</li> <li>\u4fdd\u8bc1\u6bcf\u6b21\u51fa\u73b0\u5b57\u7b26 <code>*</code> \u65f6\uff0c\u524d\u9762\u90fd\u5339\u914d\u5230\u6709\u6548\u7684\u5b57\u7b26</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_22","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int s_size = s.size();\n        int p_size = p.size();\n        bool ** dp = new bool*[s_size + 1]();\n        for(int i = 0; i &lt; s_size + 1; i++){\n            dp[i] = new bool[p_size + 1]();\n        }\n        dp[0][0] = true;\n        for(int j = 2; j &lt; p_size + 1; j++){\n            if(p[j - 1] == '*'){\n                dp[0][j] = dp[0][j - 2];\n            }else{\n                dp[0][j] = false;\n            }\n        }\n\n        //\u904d\u5386\u5f00\u59cb\n        for(int j = 1; j &lt; p_size + 1; j++){\n            for(int i = 1; i &lt; s_size + 1; i++){\n                if(s[i - 1] == p[j - 1] || p[j - 1] == '.'){\n                    dp[i][j] = dp[i - 1][j - 1];\n                    // if(dp[i][j])\n                    //     break; \n                }else if(p[j - 1] != '*'){\n                    dp[i][j] = false;\n                }else if(p[j - 1] == '*'){\n                    if(s[i - 1] == p[j - 2] || p[j - 2] == '.'){\n                        // if(i == 1){\n                        //     dp[i][j] = dp[i][j - 2];\n                        // }\n                        dp[i][j] = dp[i - 1][j] || dp[i][j - 2];\n                    }else{\n                        dp[i][j] = dp[i][j - 2];\n                    }\n                }\n            }\n        }\n        return dp[s_size][p_size];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_23","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int m = s.size();\n        int n = p.size();\n\n        auto matches = [&amp;](int i, int j) {\n            if (i == 0) {\n                return false;\n            }\n            if (p[j - 1] == '.') {\n                return true;\n            }\n            return s[i - 1] == p[j - 1];\n        };\n\n        vector&lt;vector&lt;int&gt;&gt; f(m + 1, vector&lt;int&gt;(n + 1));\n        f[0][0] = true;\n        for (int i = 0; i &lt;= m; ++i) {\n            for (int j = 1; j &lt;= n; ++j) {\n                if (p[j - 1] == '*') {\n                    f[i][j] |= f[i][j - 2];\n                    if (matches(i, j - 1)) {\n                        f[i][j] |= f[i - 1][j];\n                    }\n                }\n                else {\n                    if (matches(i, j)) {\n                        f[i][j] |= f[i - 1][j - 1];\n                    }\n                }\n            }\n        }\n        return f[m][n];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_24","title":"\u611f\u60f3","text":"<ul> <li>\u7b2c\u4e00\u6b21\u5199\u8fd9\u9053\u9898\u662f\u57282023/3/13,\u5f53\u65f6\u8fd8\u4e0d\u4f1a\u52a8\u6001\u89c4\u5212,\u7528\u53cc\u6307\u9488\u5199\u4e86\u5f88\u4e45\u6ca1\u6709\u5199\u51fa\u6765,\u6700\u591a\u53ea\u901a\u8fc7\u4e86\u4e09\u5206\u4e4b\u4e8c\u7684\u6d4b\u8bd5\u70b9,\u65e0\u5948\u653e\u5f03,\u770b\u4e86\u9898\u89e3\u624d\u77e5\u9053\u8fd9\u9898\u6700\u597d\u8981\u4f7f\u7528\u52a8\u6001\u89c4\u5212,\u60f3\u5230\u7b2c5\u9898\u4e5f\u662f\u52a8\u6001\u89c4\u5212\u8fd8\u6401\u7f6e\u5728\u90a3,\u4e8e\u662f\u505c\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u5237\u9898(\u8fd8\u6709\u4e00\u90e8\u5206\u539f\u56e0\u662f\u8fd9\u6bb5\u65f6\u95f4\u5f88\u8ff7\u832b,\u4e0d\u77e5\u9053\u52aa\u529b\u7684\u65b9\u5411...)</li> <li>\u7b2c\u4e8c\u6b21\u5199\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\u5df2\u662f2023/3/26\u51cc\u6668,\u521a\u5199\u5b8c\u7b2c\u4e94\u9898\u6700\u957f\u56de\u6587\u5b50\u4e32,\u8d81\u5bf9\u52a8\u6001\u89c4\u5212\u9898\u578b\u7684\u624b\u611f\u8fd8\u5728,\u8d76\u7d27\u6765\u5199\u8fd9\u9053\u9898,\u987a\u5229\u5730\u5b8c\u6210\u4e86coding...</li> <li>\u7136\u800c,\u5e94\u4e86\u90a3\u53e5\u8001\u8bdd,\u7a0b\u5e8f\u5458\u6709\u767e\u5206\u4e4b\u516b\u5341\u7684\u65f6\u95f4\u90fd\u5728debug,\u5728\u6211\u957f\u8fbe\u4e00\u4e2a\u5c0f\u65f6\u7684debug\u4e4b\u540e,\u7ec8\u4e8e\u53d1\u73b0\u539f\u6765\u95ee\u9898\u51fa\u5728\u9012\u63a8\u516c\u5f0f\u67d0\u4e00\u4e2a\u60c5\u51b5\u7684\u5206\u6790\u4e0d\u591f\u5168\u9762(line 33),\u679c\u7136,\u52a8\u6001\u89c4\u5212\u7684\u96be\u70b9\u5c31\u5728\u9012\u63a8\u516c\u5f0f\u4e0a.</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#11-medium","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668(medium)","text":"<p>2023/4/4</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_25","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6574\u6570\u6570\u7ec4 <code>height</code> \u3002\u6709 <code>n</code> \u6761\u5782\u7ebf\uff0c\u7b2c <code>i</code> \u6761\u7ebf\u7684\u4e24\u4e2a\u7aef\u70b9\u662f <code>(i, 0)</code> \u548c <code>(i, height[i])</code> \u3002</p> <p>\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e <code>x</code> \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002</p> <p>\u8fd4\u56de\u5bb9\u5668\u53ef\u4ee5\u50a8\u5b58\u7684\u6700\u5927\u6c34\u91cf\u3002</p> <p>\u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1a[1,8,6,2,5,4,8,3,7]\n\u8f93\u51fa\uff1a49 \n\u89e3\u91ca\uff1a\u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a 49\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aheight = [1,1]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == height.length</code></li> <li><code>2 &lt;= n &lt;= 105</code></li> <li><code>0 &lt;= height[i] &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_26","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        int n = height.size();\n        int p1 = 0, p2 = n - 1;\n        int max = (n - 1) * ((height[p1] &lt; height[p2]) ? height[p1] : height[p2]);\n        while(p1 &lt; p2){\n            if(height[p1] &gt;= height[p2]){\n                int height_temp = height[p2];\n                while(height_temp &gt;= height[p2] &amp;&amp; p1 &lt; p2){\n                    --p2;\n                }\n            }else{\n                int height_temp = height[p1];\n                while(height_temp &gt;= height[p1] &amp;&amp; p1 &lt; p2){\n                    ++p1;\n                }\n            }\n            int temp = ( (height[p1] &lt; height[p2]) ? height[p1] : height[p2] ) * (p2 - p1);\n            max = (max &gt; temp) ? max : temp;\n        }\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_27","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        int l = 0, r = height.size() - 1;\n        int ans = 0;\n        while (l &lt; r) {\n            int area = min(height[l], height[r]) * (r - l);\n            ans = max(ans, area);\n            if (height[l] &lt;= height[r]) {\n                ++l;\n            }\n            else {\n                --r;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_28","title":"\u611f\u60f3","text":"<ul> <li>\u7ecf\u5178\u7684\u53cc\u6307\u9488,\u66b4\u529b\u6c42\u89e3\u65f6\u95f4\u4f1a\u8d85</li> <li>\u627e\u5230\u79fb\u52a8\u6307\u9488\u7684\u60c5\u51b5\u662f\u53cc\u6307\u9488\u9898\u578b\u6c42\u89e3\u7684\u5173\u952e</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#15-medium","title":"15. \u4e09\u6570\u4e4b\u548c(medium)","text":"<p>2023/4/5</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_29","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e09\u5143\u7ec4 <code>[nums[i], nums[j], nums[k]]</code> \u6ee1\u8db3 <code>i != j</code>\u3001<code>i != k</code> \u4e14 <code>j != k</code> \uff0c\u540c\u65f6\u8fd8\u6ee1\u8db3 <code>nums[i] + nums[j] + nums[k] == 0</code> \u3002\u8bf7</p> <p>\u4f60\u8fd4\u56de\u6240\u6709\u548c\u4e3a <code>0</code> \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p> <p>\u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [-1,0,1,2,-1,-4]\n\u8f93\u51fa\uff1a[[-1,-1,2],[-1,0,1]]\n\u89e3\u91ca\uff1a\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 \u3002\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 \u3002\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 \u3002\n\u4e0d\u540c\u7684\u4e09\u5143\u7ec4\u662f [-1,0,1] \u548c [-1,-1,2] \u3002\n\u6ce8\u610f\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u548c\u4e09\u5143\u7ec4\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [0,1,1]\n\u8f93\u51fa\uff1a[]\n\u89e3\u91ca\uff1a\u552f\u4e00\u53ef\u80fd\u7684\u4e09\u5143\u7ec4\u548c\u4e0d\u4e3a 0 \u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [0,0,0]\n\u8f93\u51fa\uff1a[[0,0,0]]\n\u89e3\u91ca\uff1a\u552f\u4e00\u53ef\u80fd\u7684\u4e09\u5143\u7ec4\u548c\u4e3a 0 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>3 &lt;= nums.length &lt;= 3000</code></li> <li><code>-105 &lt;= nums[i] &lt;= 105</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_30","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nclass Solution {\npublic:\n    bool MyFind(vector&lt;int&gt;&amp; nums, int&amp; temp, int p1, int p2) {\n        if(temp &lt; nums[p1] || temp &gt; nums[p2]){\n            return false;\n        }\n        if(p2 - p1 == 2){\n            if(nums[p1 + 1] == temp){\n                return true;\n            }else{\n                return false;\n            }\n        }else if(p2 - p1 &lt; 2){\n            return false;\n        }\n        int index = (p1 + p2) / 2;\n        if(temp &gt; nums[index]){\n            return MyFind(nums, temp, index, p2);\n        }else if(temp &lt; nums[index]){\n            return MyFind(nums, temp, p1, index);\n        }else{\n            return true;\n        }\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(), nums.end());\n        vector&lt;vector&lt;int&gt;&gt; res;\n        int p1 = 0, size = nums.size();\n        int tmp_p2 = size - 1;\n        while(nums[p1] &lt;= 0){\n            int p2 = tmp_p2;\n            while(nums[p2] &gt; -2 * nums[p1] &amp;&amp; p2 &gt; p1 + 1){\n                --p2;\n            }\n            tmp_p2 = p2;\n            while(nums[p2] &gt;= 0 &amp;&amp; p2 &gt; p1 + 1){\n                int temp = -1 * (nums[p1] + nums[p2]);\n                if(MyFind(nums, temp, p1, p2)){\n                    res.push_back({nums[p1], nums[p2], temp});\n                }\n                while(nums[p2] == nums[--p2] &amp;&amp; p2 &gt; p1);\n            }\n            while(nums[p1] == nums[++p1] &amp;&amp; p1 &lt; size - 2);\n            if(p1 == size - 2)  break;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_31","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        // \u679a\u4e3e a\n        for (int first = 0; first &lt; n; ++first) {\n            // \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n            if (first &gt; 0 &amp;&amp; nums[first] == nums[first - 1]) {\n                continue;\n            }\n            // c \u5bf9\u5e94\u7684\u6307\u9488\u521d\u59cb\u6307\u5411\u6570\u7ec4\u7684\u6700\u53f3\u7aef\n            int third = n - 1;\n            int target = -nums[first];\n            // \u679a\u4e3e b\n            for (int second = first + 1; second &lt; n; ++second) {\n                // \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n                if (second &gt; first + 1 &amp;&amp; nums[second] == nums[second - 1]) {\n                    continue;\n                }\n                // \u9700\u8981\u4fdd\u8bc1 b \u7684\u6307\u9488\u5728 c \u7684\u6307\u9488\u7684\u5de6\u4fa7\n                while (second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target) {\n                    --third;\n                }\n                // \u5982\u679c\u6307\u9488\u91cd\u5408\uff0c\u968f\u7740 b \u540e\u7eed\u7684\u589e\u52a0\n                // \u5c31\u4e0d\u4f1a\u6709\u6ee1\u8db3 a+b+c=0 \u5e76\u4e14 b&lt;c \u7684 c \u4e86\uff0c\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\n                if (second == third) {\n                    break;\n                }\n                if (nums[second] + nums[third] == target) {\n                    ans.push_back({nums[first], nums[second], nums[third]});\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_32","title":"\u611f\u60f3","text":"<ul> <li>\u4ed4\u7ec6\u5206\u6790\u4e0d\u96be\u770b\u51fa\u6765\u8fd9\u9898\u7684\u601d\u8def\u662f\u6392\u5e8f+\u53cc\u6307\u9488,\u4f46\u672c\u9898\u6211\u5728\u53cc\u6307\u9488\u7684\u9009\u62e9\u4e0a\u672a\u505a\u5230\u6700\u597d,\u6211\u7684\u7b97\u6cd5\u662f\u5c06\u4e00\u4e2a\u6307\u9488\u4ece\u5c0f\u5230\u5927\u79fb\u52a8,\u53e6\u4e00\u4e2a\u6307\u9488\u4ece\u5927\u5230\u5c0f\u79fb\u52a8,\u7531\u4e8e\u6307\u9488\u5e76\u4e0d\u662f\u540c\u65f6\u79fb\u52a8,\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N^2)\\),\u7136\u540e\u5bf9\u6bcf\u4e00\u79cd\u60c5\u51b5\u8fdb\u884c\u4e00\u4e2afind\u64cd\u4f5c\u5bfb\u627e\u7b2c\u4e09\u4e2a\u6570,\u8fd9\u91cc\u4e00\u5f00\u59cb\u4f7f\u7528\u7684\u662f\u904d\u5386\u7684\u65b9\u6cd5,\u90a3\u6837\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u8fbe\u5230\\(O(N^3)\\),\u8d85\u51fa\u65f6\u95f4\u9650\u5236,\u5c06find\u51fd\u6570\u4f18\u5316\u4e3a\u4e8c\u5206\u67e5\u627e,\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u4e3a\\(O(N^2logN)\\),\u901a\u8fc7</li> <li>\u6bd4\u8f83\u597d\u7684\u7b97\u6cd5\u662f:</li> <li>\u8bbe\\(a+b+c = 0\\)\u5176\u4e2da,b,c\u4e3a\u5347\u5e8f</li> <li>\u904d\u5386a,\u5bf9\u4efb\u610f\u4e00\u4e2aa,\u53d6b\u6307\u5411a\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e,c\u6307\u5411\u6570\u7ec4\u672b\u5c3e,\u7531\u4e8eb\u589e\u52a0\u65f6c\u5fc5\u7136\u4f1a\u51cf\u5c0f,\u6b64\u65f6\u53cc\u6307\u9488\u662f\u540c\u65f6\u79fb\u52a8\u7684,\u5747\u644a\u4e0b\u6765\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N)\\),\u8003\u8651\u5230\u5916\u5c42\u5bf9a\u7684\u904d\u5386,\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N^2)\\)</li> <li>\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528STL\u7684\u51fd\u6570(\u6548\u7387\u4f4e)</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#17-medium","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408(medium)","text":"<p>2023/7/13</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_33","title":"\u9898\u76ee\u63cf\u8ff0","text":"<ul> <li>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 <code>2-9</code> \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002</li> </ul> <p>\u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002</p> <p></p> <p>\u793a\u4f8b 1\uff1a</p> <p><code>\u8f93\u5165\uff1adigits = \"23\"   \u8f93\u51fa\uff1a[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]</code></p> <p>\u793a\u4f8b 2\uff1a</p> <p><code>\u8f93\u5165\uff1adigits = \"\"   \u8f93\u51fa\uff1a[]</code></p> <p>\u793a\u4f8b 3\uff1a</p> <p><code>\u8f93\u5165\uff1adigits = \"2\"   \u8f93\u51fa\uff1a[\"a\",\"b\",\"c\"]</code></p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= digits.length &lt;= 4</code></li> <li><code>digits[i]</code> \u662f\u8303\u56f4 <code>['2', '9']</code> \u7684\u4e00\u4e2a\u6570\u5b57\u3002</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_34","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; letterCombinations(string digits) {\n        int n = digits.size();\n        vector&lt;string&gt; map, res;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            switch(digits[i])\n            {\n                case '2' : map.push_back(\"abc\");  break;\n                case '3' : map.push_back(\"def\");  break;\n                case '4' : map.push_back(\"ghi\");  break;\n                case '5' : map.push_back(\"jkl\");  break;\n                case '6' : map.push_back(\"mno\");  break;\n                case '7' : map.push_back(\"pqrs\");  break;\n                case '8' : map.push_back(\"tuv\");  break;\n                case '9' : map.push_back(\"wxyz\");  break;\n            }\n        }\n        string tmp = \"\";\n        dfs(map, res, tmp, 0);\n        return res;\n    }\n    void dfs(vector&lt;string&gt; map, vector&lt;string&gt;&amp; res, string tmp, int lv)\n    {\n        if (map.size() == lv)\n        {\n            if (tmp != \"\")\n                res.push_back(tmp);\n            return;\n        }\n        for(int i = 0; i &lt; map[lv].size(); ++i)\n        {\n            dfs(map, res, tmp + map[lv][i], lv+1);\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_35","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; letterCombinations(string digits) {\n        vector&lt;string&gt; combinations;\n        if (digits.empty()) {\n            return combinations;\n        }\n        unordered_map&lt;char, string&gt; phoneMap{\n            {'2', \"abc\"},\n            {'3', \"def\"},\n            {'4', \"ghi\"},\n            {'5', \"jkl\"},\n            {'6', \"mno\"},\n            {'7', \"pqrs\"},\n            {'8', \"tuv\"},\n            {'9', \"wxyz\"}\n        };\n        string combination;\n        backtrack(combinations, phoneMap, digits, 0, combination);\n        return combinations;\n    }\n\n    void backtrack(vector&lt;string&gt;&amp; combinations, const unordered_map&lt;char, string&gt;&amp; phoneMap, const string&amp; digits, int index, string&amp; combination) {\n        if (index == digits.length()) {\n            combinations.push_back(combination);\n        } else {\n            char digit = digits[index];\n            const string&amp; letters = phoneMap.at(digit);\n            for (const char&amp; letter: letters) {\n                combination.push_back(letter);\n                backtrack(combinations, phoneMap, digits, index + 1, combination);\n                combination.pop_back();\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_36","title":"\u611f\u60f3","text":"<p>\u770b\u4e86\u9898\u89e3\uff0c\u662f\u540c\u4e00\u79cd\u601d\u8def\uff0c\u552f\u4e00\u7684\u4e0d\u540c\u662f\u6211\u6ca1\u6709\u7528\u54c8\u5e0c\u8868\uff0c\u4f46\u662f\u6211\u8ba4\u4e3a\u7b97\u6cd5\u662fdfs\uff0c\u9898\u89e3\u8bf4\u662f\u56de\u6eaf\uff0c\u5dee\u4e0d\u591a\u5566~</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#19-n-medium","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9(medium)","text":"<p>2023/7/13</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_37","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c <code>n</code> \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2,3,4,5], n = 2\n\u8f93\u51fa\uff1a[1,2,3,5]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [1], n = 1\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [1,2], n = 1\n\u8f93\u51fa\uff1a[1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u7ed3\u70b9\u7684\u6570\u76ee\u4e3a <code>sz</code></li> <li><code>1 &lt;= sz &lt;= 30</code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= sz</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_38","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* pl = head;\n        ListNode* pbefore = head;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            pl = pl-&gt;next;\n        }\n        if (pl == nullptr)\n        {\n            return head-&gt;next;\n        }\n        while(pl-&gt;next != nullptr)\n        {\n            pl = pl-&gt;next;\n            pbefore = pbefore-&gt;next;\n        }\n        pbefore-&gt;next = pbefore-&gt;next-&gt;next;\n        return head;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_39","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        ListNode* first = head;\n        ListNode* second = dummy;\n        for (int i = 0; i &lt; n; ++i) {\n            first = first-&gt;next;\n        }\n        while (first) {\n            first = first-&gt;next;\n            second = second-&gt;next;\n        }\n        second-&gt;next = second-&gt;next-&gt;next;\n        ListNode* ans = dummy-&gt;next;\n        delete dummy;\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_40","title":"\u611f\u60f3","text":"<p>\u5f88\u7b80\u5355\uff0c\u53cc\u6307\u9488\u79d2\u6740\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#20-easy","title":"20. \u6709\u6548\u7684\u62ec\u53f7(easy)","text":"<p>2023/7/13</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_41","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec <code>'('</code>\uff0c<code>')'</code>\uff0c<code>'{'</code>\uff0c<code>'}'</code>\uff0c<code>'['</code>\uff0c<code>']'</code> \u7684\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p> <ol> <li>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</li> <li>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</li> <li>\u6bcf\u4e2a\u53f3\u62ec\u53f7\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u76f8\u540c\u7c7b\u578b\u7684\u5de6\u62ec\u53f7\u3002</li> </ol> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"()\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"()[]{}\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"(]\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s</code> \u4ec5\u7531\u62ec\u53f7 <code>'()[]{}'</code> \u7ec4\u6210</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_42","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>#include &lt;stack&gt;\nclass Solution {\npublic:\n    bool isValid(string s) {\n        stack&lt;char&gt; stk;\n        int size = s.size();\n        for (int i = 0; i &lt; size; ++i)\n        {\n            if (s[i] == ')')\n            {\n                if(!stk.empty() &amp;&amp; stk.top() == '(')\n                {\n                    stk.pop();\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else if (s[i] == ']')\n            {\n                if(!stk.empty() &amp;&amp; stk.top() == '[')\n                {\n                    stk.pop();\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else if (s[i] == '}')\n            {\n                if(!stk.empty() &amp;&amp; stk.top() == '{')\n                {\n                    stk.pop();\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else\n            {\n                stk.push(s[i]);\n            }\n        }\n        return stk.empty();\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_43","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        int n = s.size();\n        if (n % 2 == 1) {\n            return false;\n        }\n\n        unordered_map&lt;char, char&gt; pairs = {\n            {')', '('},\n            {']', '['},\n            {'}', '{'}\n        };\n        stack&lt;char&gt; stk;\n        for (char ch: s) {\n            if (pairs.count(ch)) {\n                if (stk.empty() || stk.top() != pairs[ch]) {\n                    return false;\n                }\n                stk.pop();\n            }\n            else {\n                stk.push(ch);\n            }\n        }\n        return stk.empty();\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_44","title":"\u611f\u60f3","text":"<p>\u5f88\u57fa\u7840\u7684\u6808\u7684\u9898\u76ee\uff0c\u79d2\u6740\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#21-easy","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868(easy)","text":"<p>2023/7/13</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_45","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 </p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1al1 = [1,2,4], l2 = [1,3,4]\n\u8f93\u51fa\uff1a[1,1,2,3,4,4]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1al1 = [], l2 = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1al1 = [], l2 = [0]\n\u8f93\u51fa\uff1a[0]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u4e24\u4e2a\u94fe\u8868\u7684\u8282\u70b9\u6570\u76ee\u8303\u56f4\u662f <code>[0, 50]</code></li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>l1</code> \u548c <code>l2</code> \u5747\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5217</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_46","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if (list1 == nullptr)\n        {\n            return list2;\n        }\n        else if (list2 == nullptr)\n        {\n            return list1;\n        }\n        ListNode* res = list1-&gt;val &lt; list2-&gt;val ? list1 : list2;\n        ListNode* p1 = list1 == res ? list1-&gt;next : list1;\n        ListNode* p2 = list2 == res ? list2-&gt;next : list2;\n        ListNode* res_tail = res;\n        while (p1 != nullptr || p2 != nullptr)\n        {\n            if (p1 == nullptr)\n            {\n                res_tail-&gt;next = p2;\n                break;\n            }\n            else if (p2 == nullptr)\n            {\n                res_tail-&gt;next = p1;\n                break;\n            }\n            else if (p1-&gt;val &lt; p2-&gt;val)\n            {\n                res_tail-&gt;next = p1;\n                p1 = p1-&gt;next;\n                res_tail = res_tail-&gt;next;\n            }\n            else if (p1-&gt;val &gt;= p2-&gt;val)\n            {\n                res_tail-&gt;next = p2;\n                p2 = p2-&gt;next;\n                res_tail = res_tail-&gt;next;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_47","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (l1 == nullptr) {\n            return l2;\n        } else if (l2 == nullptr) {\n            return l1;\n        } else if (l1-&gt;val &lt; l2-&gt;val) {\n            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);\n            return l1;\n        } else {\n            l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);\n            return l2;\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_48","title":"\u611f\u60f3","text":"<p>\u6211\u5199\u7684\u662f\u8fed\u4ee3\u6cd5\uff0c\u53c2\u8003\u7b54\u6848\u5c31\u653e\u53e6\u4e00\u79cd\u9012\u5f52\u7684\u601d\u8def\uff0c\u90fd\u4e0d\u96be\uff0c\u9012\u5f52\u76f8\u5bf9\u66f4\u52a0\u7b80\u6d01\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#22-medium","title":"22. \u62ec\u53f7\u751f\u6210(medium)","text":"<p>2023/7/13</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_49","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6570\u5b57 <code>n</code> \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 3\n\u8f93\u51fa\uff1a[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 1\n\u8f93\u51fa\uff1a[\"()\"]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 8</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_50","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        int remain_left = n, remain_right = n;\n        vector&lt;string&gt; res;\n        string tmp;\n        generate(remain_left, remain_right, res, tmp);\n        return res;\n    }\n    void generate(int remain_left, int remain_right, vector&lt;string&gt; &amp;res, string tmp)\n    {\n        if (remain_left == 0)\n        {\n            for (int i = 0; i &lt; remain_right; ++i)\n            {\n                tmp += \")\";\n            }\n            res.push_back(tmp);\n            return;\n        }\n        if (remain_right &gt; remain_left)\n        {\n            generate(remain_left, remain_right - 1, res, tmp + \")\");\n            generate(remain_left - 1, remain_right, res, tmp + \"(\");\n        }\n        else if (remain_right &lt;= remain_left)\n        {\n            generate(remain_left - 1, remain_right, res, tmp + \"(\");\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_51","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\n    void backtrack(vector&lt;string&gt;&amp; ans, string&amp; cur, int open, int close, int n) {\n        if (cur.size() == n * 2) {\n            ans.push_back(cur);\n            return;\n        }\n        if (open &lt; n) {\n            cur.push_back('(');\n            backtrack(ans, cur, open + 1, close, n);\n            cur.pop_back();\n        }\n        if (close &lt; open) {\n            cur.push_back(')');\n            backtrack(ans, cur, open, close + 1, n);\n            cur.pop_back();\n        }\n    }\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        vector&lt;string&gt; result;\n        string current;\n        backtrack(result, current, 0, 0, n);\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_52","title":"\u611f\u60f3","text":"<p>\u53c8\u662fdfs\u56de\u6eaf\uff0c\u548c\u7b2c17\u9898\u7535\u8bdd\u53f7\u7801\u7c7b\u4f3c\uff0c\u9898\u89e3\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u6bd4\u8f83\u5de7\u5999\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u611f\u89c9\u5bb9\u6613\u51fa\u9519\uff0c\u8fd8\u662f\u7528\u8001\u8001\u5b9e\u5b9edfs\u5427\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#23-k-hard","title":"23.\u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868(hard)","text":"<p>2023/7/14</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_53","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002</p> <p>\u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1alists = [[1,4,5],[1,3,4],[2,6]]\n\u8f93\u51fa\uff1a[1,1,2,3,4,4,5,6]\n\u89e3\u91ca\uff1a\u94fe\u8868\u6570\u7ec4\u5982\u4e0b\uff1a\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\u4e2d\u5f97\u5230\u3002\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1alists = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1alists = [[]]\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>k == lists.length</code></li> <li><code>0 &lt;= k &lt;= 10^4</code></li> <li><code>0 &lt;= lists[i].length &lt;= 500</code></li> <li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li> <li><code>lists[i]</code> \u6309 \u5347\u5e8f \u6392\u5217</li> <li><code>lists[i].length</code> \u7684\u603b\u548c\u4e0d\u8d85\u8fc7 <code>10^4</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_54","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        ListNode* min = nullptr;\n        for (auto&amp; it : lists)\n        {\n            if (it == nullptr || it-&gt;val == 1E5)\n            {\n                continue;\n            }\n            if (min == nullptr || min-&gt;val &gt; it-&gt;val)\n            {\n                min = it;\n            }\n        }\n        if (min == nullptr)\n        {\n            return nullptr;\n        }\n        ListNode* res = new ListNode(min-&gt;val);\n        if (min-&gt;next != nullptr)\n        {\n            // ListNode* tmp = min-&gt;next;\n            min-&gt;val = min-&gt;next-&gt;val;\n            min-&gt;next = min-&gt;next-&gt;next;         \n            // delete tmp;\n        }\n        else\n        {\n            min-&gt;val = 1E5;\n        }\n        res-&gt;next = mergeKLists(lists);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_55","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    struct Status {\n        int val;\n        ListNode *ptr;\n        bool operator &lt; (const Status &amp;rhs) const {\n            return val &gt; rhs.val;\n        }\n    };\n\n    priority_queue &lt;Status&gt; q;\n\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        for (auto node: lists) {\n            if (node) q.push({node-&gt;val, node});\n        }\n        ListNode head, *tail = &amp;head;\n        while (!q.empty()) {\n            auto f = q.top(); q.pop();\n            tail-&gt;next = f.ptr; \n            tail = tail-&gt;next;\n            if (f.ptr-&gt;next) q.push({f.ptr-&gt;next-&gt;val, f.ptr-&gt;next});\n        }\n        return head.next;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_56","title":"\u611f\u60f3","text":"<p>\u73b0\u5728\u5199hard\u9898\u6ca1\u6709\u5f88\u5403\u529b\u4e86\uff0c\u5f88\u5feb\u5c31\u6709\u4e86\u601d\u8def\u4f46\u662f\u56db\u5341\u5206\u949f\u624dac\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u4e0d\u592a\u597d\uff0c\u9898\u89e3\u91cc\u9762\u4f18\u5148\u961f\u5217\u7684\u505a\u6cd5\u8fd8\u4e0d\u9519\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#31medium","title":"31.\u4e0b\u4e00\u4e2a\u6392\u5217(medium)","text":"<p>2023/8/9</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_57","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6574\u6570\u6570\u7ec4\u7684\u4e00\u4e2a \u6392\u5217 \u5c31\u662f\u5c06\u5176\u6240\u6709\u6210\u5458\u4ee5\u5e8f\u5217\u6216\u7ebf\u6027\u987a\u5e8f\u6392\u5217\u3002</p> <ul> <li>\u4f8b\u5982\uff0c<code>arr = [1,2,3]</code> \uff0c\u4ee5\u4e0b\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u89c6\u4f5c <code>arr</code> \u7684\u6392\u5217\uff1a<code>[1,2,3]</code>\u3001<code>[1,3,2]</code>\u3001<code>[3,1,2]</code>\u3001<code>[2,3,1]</code> \u3002</li> </ul> <p>\u6574\u6570\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u662f\u6307\u5176\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002\u66f4\u6b63\u5f0f\u5730\uff0c\u5982\u679c\u6570\u7ec4\u7684\u6240\u6709\u6392\u5217\u6839\u636e\u5176\u5b57\u5178\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u5c31\u662f\u5728\u8fd9\u4e2a\u6709\u5e8f\u5bb9\u5668\u4e2d\u6392\u5728\u5b83\u540e\u9762\u7684\u90a3\u4e2a\u6392\u5217\u3002\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u987b\u91cd\u6392\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\uff0c\u5176\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5217\uff09\u3002</p> <ul> <li>\u4f8b\u5982\uff0c<code>arr = [1,2,3]</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f <code>[1,3,2]</code> \u3002</li> <li>\u7c7b\u4f3c\u5730\uff0c<code>arr = [2,3,1]</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f <code>[3,1,2]</code> \u3002</li> <li>\u800c <code>arr = [3,2,1]</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f <code>[1,2,3]</code> \uff0c\u56e0\u4e3a <code>[3,2,1]</code> \u4e0d\u5b58\u5728\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u51fa <code>nums</code> \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u3002</p> <p>\u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3]\n\u8f93\u51fa\uff1a[1,3,2]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,2,1]\n\u8f93\u51fa\uff1a[1,2,3]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,1,5]\n\u8f93\u51fa\uff1a[1,5,1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_58","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void nextPermutation(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n &lt;= 1)\n        {\n            return;\n        }\n        for (int i = 1; i &lt;= n; ++i)\n        {\n            if(Process(nums, i))\n            {\n                return;\n            }\n        }\n        for (int i = 0; i &lt; n / 2; ++i)\n        {\n            int temp = nums[i];\n            nums[i] = nums[n - 1 - i];\n            nums[n - 1 - i] = temp;\n        }\n\n        return;\n    }\n    bool Process(vector&lt;int&gt; &amp;nums, int n)\n    {\n        int size = nums.size();\n        int i = size - 1, j = size - n;\n        while(i &gt; size - n &amp;&amp; j &gt;= size - n)\n        {\n            if (nums[i] &gt; nums[j])\n            {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n                sort(nums.begin()+j+1, nums.end());\n                return true;\n            }\n            if (j != size - n)\n            {\n                j--;\n            }\n            else\n            {\n                j = --i - 1;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_59","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void nextPermutation(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        if (size &lt;= 1) return;\n        int now = nums[size - 1];\n        int loc = -1;\n        for (int i = size - 2; i &gt;= 0; --i)\n        {\n            if (nums[i] &lt; now)\n            {\n                loc = i;\n                now = nums[loc];\n                break;\n            }\n            now = nums[i];\n        }\n        if (loc != -1)\n        {\n            for (int i = size - 1; i &gt; loc; --i)\n            {\n                if (nums[i] &gt; now)\n                {\n                    nums[loc] = nums[i];\n                    nums[i] = now;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i &lt; (size - loc - 1) / 2; ++i)\n        {\n            // loc+1+i, size - 1 - i\n            int temp = nums[loc+1+i];\n            nums[loc+1+i] = nums[size-1-i];\n            nums[size-1-i] = temp;\n        }\n        return;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_60","title":"\u611f\u60f3","text":"<p>\u8fb9\u4e0a\u8bfe\u8fb9\u5199\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u4e0a\u9762gif\u56fe\u5c31\u662f\u6700\u597d\u7684\u7406\u89e3\uff0c\u53ef\u60dc\u7684\u662f\u6211\u4e00\u76f4\u5230\u63d0\u4ea4\u90fd\u6ca1\u6709\u60f3\u5230\u8fd9\u4e48naive\u7684\u505a\u6cd5\uff0c\u4e0d\u8fc7\u4ee3\u7801\u7684\u672c\u8d28\u5012\u662f\u5bf9\u4e86\uff0c\u611f\u89c9\u53ef\u4ee5\u5199\u5f97\u4f18\u96c5\u5f88\u591a\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#32hard","title":"32.\u6700\u957f\u6709\u6548\u62ec\u53f7(hard)","text":"<p>2023/8/9</p> <p>01 : 13 : 26</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_61","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b <code>'('</code> \u548c <code>')'</code> \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"(()\"\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \"()\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \")()())\"\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \"()()\"\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"\"\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= s.length &lt;= 3 * 104</code></li> <li><code>s[i]</code> \u4e3a <code>'('</code> \u6216 <code>')'</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_62","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int size = s.size();\n        int max = 0;\n        int* dp = new int[size+1]();\n        // dp[i]\u4ee3\u8868\u4ecei\u5f00\u59cb\u6709\u51e0\u4f4d\u6709\u6548     \n\n        for (int i = size - 2; i &gt;= 0; --i)\n        {\n            if (s[i] == '(')\n            {\n                int tmp1 = 0, tmp2 = 0;\n                if (s[i+1] == ')')\n                {\n                    tmp1 = dp[i+2] + 2;\n                }\n                if (s[i + 1 + dp[i+1]] == ')')\n                {\n                    tmp2 = dp[i+1] + 2 + dp[i + 2 + dp[i+1]];\n                }\n                dp[i] = tmp1 &gt; tmp2 ? tmp1 : tmp2;\n                max = dp[i] &gt; max ? dp[i] : max;\n            }\n        }\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_63","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int left = 0, right = 0, maxlength = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s[i] == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = max(maxlength, 2 * right);\n            } else if (right &gt; left) {\n                left = right = 0;\n            }\n        }\n        left = right = 0;\n        for (int i = (int)s.length() - 1; i &gt;= 0; i--) {\n            if (s[i] == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = max(maxlength, 2 * left);\n            } else if (left &gt; right) {\n                left = right = 0;\n            }\n        }\n        return maxlength;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_64","title":"\u611f\u60f3","text":"<p>\u7b2c\u4e00\u53cd\u5e94\u662f\u4f7f\u7528\u52a8\u89c4\uff0c\u4f46\u662f\u770b\u7b54\u68483\u7684\u505a\u6cd5\u975e\u5e38\u81ea\u7136\uff0c\u56e0\u4e3a\u5224\u65ad\u62ec\u53f7\u662f\u5426\u5339\u914d\u53ea\u9700\u8981\u6570\u4e2a\u6570\u5373\u53ef\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#33medium","title":"33.\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4(medium)","text":"<p>2023/8/9</p> <p>00 : 55 : 36</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_65","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6574\u6570\u6570\u7ec4 <code>nums</code> \u6309\u5347\u5e8f\u6392\u5217\uff0c\u6570\u7ec4\u4e2d\u7684\u503c \u4e92\u4e0d\u76f8\u540c \u3002</p> <p>\u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0c<code>nums</code> \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 <code>k</code>\uff08<code>0 &lt;= k &lt; nums.length</code>\uff09\u4e0a\u8fdb\u884c\u4e86 \u65cb\u8f6c\uff0c\u4f7f\u6570\u7ec4\u53d8\u4e3a <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>\uff08\u4e0b\u6807 \u4ece 0 \u5f00\u59cb \u8ba1\u6570\uff09\u3002\u4f8b\u5982\uff0c <code>[0,1,2,4,5,6,7]</code> \u5728\u4e0b\u6807 <code>3</code> \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a <code>[4,5,6,7,0,1,2]</code> \u3002</p> <p>\u7ed9\u4f60 \u65cb\u8f6c\u540e \u7684\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>target</code> \uff0c\u5982\u679c <code>nums</code> \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c <code>target</code> \uff0c\u5219\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de <code>-1</code> \u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(log n)</code> \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [4,5,6,7,0,1,2], target = 0\n\u8f93\u51fa\uff1a4\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [4,5,6,7,0,1,2], target = 3\n\u8f93\u51fa\uff1a-1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1], target = 0\n\u8f93\u51fa\uff1a-1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>nums</code> \u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd \u72ec\u4e00\u65e0\u4e8c</li> <li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1 <code>nums</code> \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c</li> <li><code>-104 &lt;= target &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_66","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int size = nums.size();\n        if (size == 1)\n        {\n            return target == nums[0] ? 0 : -1;\n        }\n        if (target &gt; nums[size-1] &amp;&amp; target &lt; nums[0]) return -1;\n        int left = 0, right = size - 1;\n        while (left &lt; right - 1)\n        {\n            if (nums[(left + right) / 2] &gt; nums[0])\n            {\n                left = (left + right) / 2;\n            }\n            else\n            {\n                right = (left + right) / 2;\n            }\n        }\n        if (target &gt;= nums[0])\n        {\n            right = left;\n            left = 0;\n        }\n        else\n        {\n            ++left;\n            right = size - 1;\n        }\n        while (left &lt; right - 1)\n        {\n            if (nums[(left + right) / 2] &gt;= target)\n            {\n                right = (left + right) / 2;\n            }\n            else\n            {\n                left = (left + right) / 2;\n            }\n        }\n        if (nums[left] == target)\n        {\n            return left;\n        }\n        else if (left + 1 &lt; size &amp;&amp; nums[left + 1] == target)\n        {\n            return left + 1;\n        }\n        else if (right + 1 &lt; size &amp;&amp; nums[right + 1] == target)\n        {\n            return right + 1;\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_67","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int n = (int)nums.size();\n        if (!n) {\n            return -1;\n        }\n        if (n == 1) {\n            return nums[0] == target ? 0 : -1;\n        }\n        int l = 0, r = n - 1;\n        while (l &lt;= r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[0] &lt;= nums[mid]) {\n                if (nums[0] &lt;= target &amp;&amp; target &lt; nums[mid]) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                if (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - 1]) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_68","title":"\u611f\u60f3","text":"<p>\u901f\u5ea6\u8fd8\u662f\u6709\u70b9\u6162\uff0c\u4f46\u662f\u53ef\u80fd\u662f\u4e0d\u591f\u4e13\u6ce8\u56e0\u4e3a\u5728\u4e0a\u8bfe\uff0c\u597d\u5728\u662f\u7b2c\u4e00\u65f6\u95f4\u5c31\u60f3\u5230\u4e86\u4e8c\u5206\u67e5\u627e\uff0c\u5199\u7684\u65f6\u5019\u7528\u4e86\u5f88\u591ahack</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#34medium","title":"34.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e(medium)","text":"<p>2023/8/9</p> <p>00 : 27 : 12</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_69","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6309\u7167\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code>\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code>\u3002\u8bf7\u4f60\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002</p> <p>\u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c <code>target</code>\uff0c\u8fd4\u56de <code>[-1, -1]</code>\u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(log n)</code> \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [5,7,7,8,8,10], target = 8\n\u8f93\u51fa\uff1a[3,4]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [5,7,7,8,8,10], target = 6\n\u8f93\u51fa\uff1a[-1,-1]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [], target = 0\n\u8f93\u51fa\uff1a[-1,-1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= nums.length &lt;= 105</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> <li><code>nums</code> \u662f\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u7ec4</li> <li><code>-109 &lt;= target &lt;= 109</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_70","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; res;\n        res.push_back(-1);\n        res.push_back(-1);\n        int l = 0, size = nums.size();\n        int r = size - 1;\n        if (size == 1 &amp;&amp; nums[0] == target)\n        {\n            res[0] = res[1] = 0;\n            return res;\n        }\n        while (l &lt;= r)\n        {\n            int mid = (l + r) / 2;\n\n\n            if (nums[mid] &gt;= target)\n            {\n                r = mid - 1;\n                res[0] = nums[mid] == target ? mid : res[0];\n            }\n            else\n            {\n                l = mid + 1;\n            }\n        }\n        l = 0;\n        r = size - 1;\n        while (l &lt;= r)\n        {\n            int mid = (l + r) / 2;\n\n            if (nums[mid] &gt; target)\n            {\n                r = mid - 1;\n            }\n            else\n            {\n                l = mid + 1;\n                res[1] = nums[mid] == target ? mid : res[1];\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_71","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution { \npublic:\n    int binarySearch(vector&lt;int&gt;&amp; nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left &lt;= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.size() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) {\n            return vector&lt;int&gt;{leftIdx, rightIdx};\n        } \n        return vector&lt;int&gt;{-1, -1};\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_72","title":"\u611f\u60f3","text":"<p>\u901f\u5ea6\u8fd8\u662f\u6709\u70b9\u6162\uff0c\u4f46\u662f\u53ef\u80fd\u662f\u4e0d\u591f\u4e13\u6ce8\u56e0\u4e3a\u5728\u4e0a\u8bfe\uff0c\u597d\u5728\u662f\u7b2c\u4e00\u65f6\u95f4\u5c31\u60f3\u5230\u4e86\u4e8c\u5206\u67e5\u627e\uff0c\u5199\u7684\u65f6\u5019\u7528\u4e86\u5f88\u591ahack</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#39-medium","title":"39. \u7ec4\u5408\u603b\u548c(medium)","text":"<p>2023/8/26</p> <p>01 : 14 : 01</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_73","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u65e0\u91cd\u590d\u5143\u7d20 \u7684\u6574\u6570\u6570\u7ec4 <code>candidates</code> \u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570 <code>target</code> \uff0c\u627e\u51fa <code>candidates</code> \u4e2d\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a\u76ee\u6807\u6570 <code>target</code> \u7684 \u6240\u6709 \u4e0d\u540c\u7ec4\u5408 \uff0c\u5e76\u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u8fd9\u4e9b\u7ec4\u5408\u3002</p> <p><code>candidates</code> \u4e2d\u7684 \u540c\u4e00\u4e2a \u6570\u5b57\u53ef\u4ee5 \u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6 \u3002\u5982\u679c\u81f3\u5c11\u4e00\u4e2a\u6570\u5b57\u7684\u88ab\u9009\u6570\u91cf\u4e0d\u540c\uff0c\u5219\u4e24\u79cd\u7ec4\u5408\u662f\u4e0d\u540c\u7684\u3002 </p> <p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\uff0c\u4fdd\u8bc1\u548c\u4e3a <code>target</code> \u7684\u4e0d\u540c\u7ec4\u5408\u6570\u5c11\u4e8e <code>150</code> \u4e2a\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1acandidates = [2,3,6,7], target = 7\n\u8f93\u51fa\uff1a[[2,2,3],[7]]\n\u89e3\u91ca\uff1a\n2 \u548c 3 \u53ef\u4ee5\u5f62\u6210\u4e00\u7ec4\u5019\u9009\uff0c2 + 2 + 3 = 7 \u3002\u6ce8\u610f 2 \u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\u3002\n7 \u4e5f\u662f\u4e00\u4e2a\u5019\u9009\uff0c 7 = 7 \u3002\n\u4ec5\u6709\u8fd9\u4e24\u79cd\u7ec4\u5408\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: candidates = [2,3,5], target = 8\n\u8f93\u51fa: [[2,2,2,2],[2,3,3],[3,5]]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165: candidates = [2], target = 1\n\u8f93\u51fa: []\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= candidates.length &lt;= 30</code></li> <li><code>2 &lt;= candidates[i] &lt;= 40</code></li> <li><code>candidates</code> \u7684\u6240\u6709\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c</li> <li><code>1 &lt;= target &lt;= 40</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_74","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        int size = candidates.size();\n        vector&lt;vector&lt;int&gt;&gt; res;\n        if (target == 0)\n        {\n            vector&lt;int&gt; tmp;\n            res.push_back(tmp);\n            return res;\n        }\n        else if (target &lt; 0)\n        {\n            return res;\n        }\n        for (int i = 0; i &lt; size; ++i)\n        {\n            auto tmp = combinationSum(candidates, target - candidates[i]);\n            if (!tmp.empty())\n            {\n                for (auto &amp;it : tmp)\n                {\n                    if (it.empty() || it.back() &lt;= candidates[i])\n                    {\n                        it.push_back(candidates[i]);\n                        res.push_back(it);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_75","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void dfs(vector&lt;int&gt;&amp; candidates, int target, vector&lt;vector&lt;int&gt;&gt;&amp; ans, vector&lt;int&gt;&amp; combine, int idx) {\n        if (idx == candidates.size()) {\n            return;\n        }\n        if (target == 0) {\n            ans.emplace_back(combine);\n            return;\n        }\n        // \u76f4\u63a5\u8df3\u8fc7\n        dfs(candidates, target, ans, combine, idx + 1);\n        // \u9009\u62e9\u5f53\u524d\u6570\n        if (target - candidates[idx] &gt;= 0) {\n            combine.emplace_back(candidates[idx]);\n            dfs(candidates, target - candidates[idx], ans, combine, idx);\n            combine.pop_back();\n        }\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; combine;\n        dfs(candidates, target, ans, combine, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_76","title":"\u611f\u60f3","text":"<p>\u60f3\u4e86\u5f88\u4e45\u786c\u505a\u51fa\u6765\u7684\uff0c\u6ca1\u6709\u7528\u5230\u7b54\u6848\u7684\u56de\u6eaf\u526a\u679d\uff0c\u8fd8\u9700\u8981\u8981\u591a\u52a0\u7ec3\u4e60</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#42-hard","title":"42. \u63a5\u96e8\u6c34(hard)","text":"<p>2023/8/26</p> <p>00 : 49 : 24</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_77","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a <code>n</code> \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a <code>1</code> \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aheight = [0,1,0,2,1,0,1,3,2,1,2,1]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002 \n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aheight = [4,2,0,3,2,5]\n\u8f93\u51fa\uff1a9\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= height[i] &lt;= 105</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_78","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int boxSum(vector&lt;int&gt;&amp; height, int l, int r)\n    {\n        int sum = 0;\n        for (; l &lt;= r; ++l)\n        {\n            sum += height[l];\n        }\n        return sum;\n    }\n\n    int trap(vector&lt;int&gt;&amp; height) {\n        int size = height.size();\n        int *dp = new int[size]();\n        for (int i = 2; i &lt; size; ++i)\n        {\n            if (height[i] &lt;= height[i-1])\n            {\n                dp[i] = dp[i-1];\n                continue;\n            }\n            int index = -1, max = 0;\n            for (int j = i - 2; j &gt;= 0; --j)\n            {\n                if (height[j] &gt; max)\n                {\n                    index = j;\n                    max = height[index];\n                    if (max &gt;= height[i])\n                    {\n                        max = height[i];\n                        break;\n                    }\n                }\n            }\n            if (index &gt;= 0)\n            {\n                int append = max * (i - index - 1) - boxSum(height, index + 1, i - 1);\n                if (append &gt; 0 &amp;&amp; height[i - 1] &lt;= max)\n                {\n                    dp[i] = dp[index] + append;\n                }\n                else\n                {\n                    dp[i] = dp[i - 1];\n                }\n            }\n            else\n            {\n                dp[i] = dp[i - 1];\n            }\n        }\n        return dp[size - 1];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_79","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        int n = height.size();\n        if (n == 0) {\n            return 0;\n        }\n        vector&lt;int&gt; leftMax(n);\n        leftMax[0] = height[0];\n        for (int i = 1; i &lt; n; ++i) {\n            leftMax[i] = max(leftMax[i - 1], height[i]);\n        }\n\n        vector&lt;int&gt; rightMax(n);\n        rightMax[n - 1] = height[n - 1];\n        for (int i = n - 2; i &gt;= 0; --i) {\n            rightMax[i] = max(rightMax[i + 1], height[i]);\n        }\n\n        int ans = 0;\n        for (int i = 0; i &lt; n; ++i) {\n            ans += min(leftMax[i], rightMax[i]) - height[i];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_80","title":"\u611f\u60f3","text":"<p>\u77e5\u9053\u662fdp\uff0c\u4f46\u662fdp\u7684\u65b9\u5f0f\u4e0d\u5982\u5b98\u65b9\u9898\u89e3\u7684\u90a3\u6837\u6e05\u6670\u7b80\u6d01</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#46-medium","title":"46. \u5168\u6392\u5217(medium)","text":"<p>2023/8/27</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_81","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4 <code>nums</code> \uff0c\u8fd4\u56de\u5176 \u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217 \u3002\u4f60\u53ef\u4ee5 \u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3]\n\u8f93\u51fa\uff1a[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [0,1]\n\u8f93\u51fa\uff1a[[0,1],[1,0]]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1]\n\u8f93\u51fa\uff1a[[1]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 6</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li><code>nums</code> \u4e2d\u7684\u6240\u6709\u6574\u6570 \u4e92\u4e0d\u76f8\u540c</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_82","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        res.push_back(vector&lt;int&gt;{nums[0]});\n        int size = nums.size();\n        for (int i = 1; i &lt; size; ++i)\n        {\n            int res_size = res.size(); \n            for (int k = 0; k &lt; res_size; ++k)\n            {\n                int len = res[k].size();\n                for (int j = 0; j &lt; len; ++j)\n                {\n                    vector&lt;int&gt;* temp = new vector&lt;int&gt; (res[k]);\n                    temp-&gt;push_back(nums[i]);\n                    swap((*temp)[j], (*temp)[len]);\n                    res.push_back(*temp);\n                }\n                res[k].push_back(nums[i]);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_83","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void backtrack(vector&lt;vector&lt;int&gt;&gt;&amp; res, vector&lt;int&gt;&amp; output, int first, int len){\n        // \u6240\u6709\u6570\u90fd\u586b\u5b8c\u4e86\n        if (first == len) {\n            res.emplace_back(output);\n            return;\n        }\n        for (int i = first; i &lt; len; ++i) {\n            // \u52a8\u6001\u7ef4\u62a4\u6570\u7ec4\n            swap(output[i], output[first]);\n            // \u7ee7\u7eed\u9012\u5f52\u586b\u4e0b\u4e00\u4e2a\u6570\n            backtrack(res, output, first + 1, len);\n            // \u64a4\u9500\u64cd\u4f5c\n            swap(output[i], output[first]);\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt; &gt; res;\n        backtrack(res, nums, 0, (int)nums.size());\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_84","title":"\u611f\u60f3","text":"<p>\u4e0d\u592a\u719f\u6089\u56de\u6eaf\u7684\u505a\u6cd5\uff0c\u6211\u7684\u65b9\u6cd5\u662f\u5bf9\u6bcf\u4e00\u4e2a\u65b0\u7684\u6570\u5b57\u63d2\u5165\u5230\u4e4b\u524d\u5df2\u6709\u7684res\u4e2d\uff0c\u5e76\u4e14\u4e0e\u6bcf\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u6392\u5217</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#48-medium","title":"48. \u65cb\u8f6c\u56fe\u50cf(medium)","text":"<p>2023/8/27</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_85","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635 <code>matrix</code> \u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002\u8bf7\u4f60\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002</p> <p>\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981 \u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amatrix = [[1,2,3],[4,5,6],[7,8,9]]\n\u8f93\u51fa\uff1a[[7,4,1],[8,5,2],[9,6,3]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amatrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n\u8f93\u51fa\uff1a[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_86","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int levels = matrix.size();\n        int times = levels / 2;\n        for (int i = 0; i &lt; times; ++i)\n        {\n            int sizeLen = levels - 2 * i - 1;\n            for (int j = 0; j &lt; 3 * sizeLen; ++j)\n            {\n                int dest;\n                int destX, destY, srcX, srcY;\n                dest = j + sizeLen;\n                if (j &lt; sizeLen)\n                {\n                    srcX = i + j;\n                    srcY = i;\n                }\n                else if (j &lt; 2 * sizeLen)\n                {\n                    srcX = i+sizeLen;\n                    srcY = i+j-sizeLen;\n                }\n                else if (j &lt; 3 * sizeLen)\n                {\n                    srcX = i+sizeLen-(j-2*sizeLen);\n                    srcY = i+sizeLen;\n                }\n                else if (j &lt; 4 * sizeLen)\n                {\n                    srcX = i;\n                    srcY = i+sizeLen-(j-3*sizeLen);\n                }\n                if (dest &lt; sizeLen)\n                {\n                    destX = i + dest;\n                    destY = i;\n                }\n                else if (dest &lt; 2 * sizeLen)\n                {\n                    destX = i+sizeLen;\n                    destY = i+dest-sizeLen;\n                }\n                else if (dest &lt; 3 * sizeLen)\n                {\n                    destX = i+sizeLen-(dest-2*sizeLen);\n                    destY = i+sizeLen;\n                }\n                else if (dest &lt; 4 * sizeLen)\n                {\n                    destX = i;\n                    destY = i+sizeLen-(dest-3*sizeLen);\n                }\n                swap(matrix[destX][destY], matrix[srcX][srcY]);\n            }\n        }\n\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_87","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int n = matrix.size();\n        for (int i = 0; i &lt; n / 2; ++i) {\n            for (int j = 0; j &lt; (n + 1) / 2; ++j) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[n - j - 1][i];\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n                matrix[j][n - i - 1] = temp;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_88","title":"\u611f\u60f3","text":"<p>\u9650\u5b9a\u4e86\u539f\u5730\u4ea4\u6362\uff0c\u611f\u89c9\u66f4\u50cf\u662f\u4e00\u9053\u6570\u5b66\u9898\uff0c\u6211\u662f\u8003\u8651\u4e86\u8fde\u7eed\u53cd\u65b9\u5411\u4ea4\u6362\u53ef\u4ee5\u8fbe\u5230\u6b63\u65b9\u5411\u63d2\u5165\u7684\u6548\u679c\uff0c\u611f\u89c9\u5b98\u65b9\u9898\u89e3\u7684\u601d\u8def\u66f4\u7b80\u6d01\uff0c\u65e2\u7136\u90fd\u662f\u8981\u6362\u56db\u4e2a\uff0c\u786e\u5b9e\u53ef\u4ee5\u4e00\u6b21\u6027\u628a\u8fd9\u56db\u4e2a\u5168\u90e8\u627e\u5230\uff0c\u6211\u7684\u7b54\u6848\u4e5f\u53ef\u4ee5\u7528\u8fd9\u79cd\u601d\u8def\u4f18\u5316\uff0c\u901f\u5ea6\u53ef\u4ee5\u63d0\u5347\u56db\u500d</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#49-medium","title":"49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4(medium)","text":"<p>2023/8/27</p> <p>00 : 49 : 24</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_89","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8bf7\u4f60\u5c06 \u5b57\u6bcd\u5f02\u4f4d\u8bcd \u7ec4\u5408\u5728\u4e00\u8d77\u3002\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7ed3\u679c\u5217\u8868\u3002</p> <p>\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u662f\u7531\u91cd\u65b0\u6392\u5217\u6e90\u5355\u8bcd\u7684\u6240\u6709\u5b57\u6bcd\u5f97\u5230\u7684\u4e00\u4e2a\u65b0\u5355\u8bcd\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n\u8f93\u51fa: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: strs = [\"\"]\n\u8f93\u51fa: [[\"\"]]\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: strs = [\"a\"]\n\u8f93\u51fa: [[\"a\"]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= strs.length &lt;= 104</code></li> <li><code>0 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> \u4ec5\u5305\u542b\u5c0f\u5199\u5b57\u6bcd</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_90","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) {\n        vector&lt;vector&lt;string&gt;&gt; res;\n        unordered_map&lt;string, int&gt; map;\n        for (auto &amp;str : strs)\n        {\n            string temp = str;\n            sort(temp.begin(), temp.end());\n            if (map.find(temp) == map.end())\n            {\n                map.emplace(temp, res.size());\n                res.push_back(vector&lt;string&gt;({str}));\n            }\n            else\n            {\n                res[map[temp]].push_back(str);\n            }\n        }\n        return res;\n\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_91","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) {\n        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;\n        for (string&amp; str: strs) {\n            string key = str;\n            sort(key.begin(), key.end());\n            mp[key].emplace_back(str);\n        }\n        vector&lt;vector&lt;string&gt;&gt; ans;\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            ans.emplace_back(it-&gt;second);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_92","title":"\u611f\u60f3","text":"<p>\u6211\u7b2c\u4e00\u6b21\u5199\u662f\u7528\u7684\u66b4\u529b\u89e3\u6cd5\uff0c\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u8fc7\u4e0d\u53bb\uff0c\u770b\u4e86\u8bc4\u8bba\u533a\u7684\u8bdd\uff0c\u6539\u7528\u4e86\u54c8\u5e0c\uff0c\u77e5\u9053\u54c8\u5e0c\u7684\u8bdd\u5f88\u597d\u8fc7</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#53-medium","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c(medium)","text":"<p>2023/8/27</p> <p>00 : 09 : 01</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_93","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u90e8\u5206\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [-2,1,-3,4,-1,2,1,-5,4]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [5,4,-1,7,8]\n\u8f93\u51fa\uff1a23\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul> <p>\u8fdb\u9636\uff1a\u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a <code>O(n)</code> \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684 \u5206\u6cbb\u6cd5 \u6c42\u89e3\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_94","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        int max = nums[0];\n        int *dp = new int[size];\n        dp[0] = max;\n        for (int i = 1; i &lt; size; ++i)\n        {\n            dp[i] = (dp[i-1] &gt; 0 ? dp[i-1] : 0) + nums[i];\n            max = dp[i] &gt; max ? dp[i] : max;\n        }\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_95","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        int pre = 0, maxAns = nums[0];\n        for (const auto &amp;x: nums) {\n            pre = max(pre + x, x);\n            maxAns = max(maxAns, pre);\n        }\n        return maxAns;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_96","title":"\u611f\u60f3","text":"<p>\u975e\u5e38\u7b80\u5355\u7684dp\uff0c\u4e5f\u5f88\u5bb9\u6613\u53cd\u5e94\u8fc7\u6765\u662fdp\uff0c\u79d2\u6740</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#55-medium","title":"55. \u8df3\u8dc3\u6e38\u620f(medium)","text":"<p>2023/8/27</p> <p>00 : 05 : 44</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_97","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684 \u7b2c\u4e00\u4e2a\u4e0b\u6807 \u3002\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002</p> <p>\u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,3,1,1,4]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u53ef\u4ee5\u5148\u8df3 1 \u6b65\uff0c\u4ece\u4e0b\u6807 0 \u5230\u8fbe\u4e0b\u6807 1, \u7136\u540e\u518d\u4ece\u4e0b\u6807 1 \u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,2,1,0,4]\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\u65e0\u8bba\u600e\u6837\uff0c\u603b\u4f1a\u5230\u8fbe\u4e0b\u6807\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4e0b\u6807\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>0 &lt;= nums[i] &lt;= 105</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_98","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        bool *dp = new bool[size]();\n        dp[0] = true;\n        for (int i = 0; i &lt; size; ++i)\n        {\n            if (dp[i] == false)\n            {\n                continue;\n            }\n            for (int j = 1; j &lt;= nums[i] &amp;&amp; i + j &lt; size; ++j)\n            {\n                dp[i + j] = true;\n            }\n        }\n        return dp[size - 1];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_99","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int rightmost = 0;\n        for (int i = 0; i &lt; n; ++i) {\n            if (i &lt;= rightmost) {\n                rightmost = max(rightmost, i + nums[i]);\n                if (rightmost &gt;= n - 1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_100","title":"\u611f\u60f3","text":"<p>\u7528dp\u7684\u8bdd\u5f88\u7b80\u5355\u4f46\u662f\u6548\u7387\u4e0d\u9ad8\uff0c\u9898\u89e3\u7ed9\u7684\u662f\u8d2a\u5fc3\u7684\u505a\u6cd5\uff0c\u8d2a\u5fc3\u786e\u5b9e\u662f\u6700\u597d\u7684\u505a\u6cd5\uff0c\u6211\u6709\u70b9dp\u4e0a\u5934\u4e86\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#56-medium","title":"56. \u5408\u5e76\u533a\u95f4(medium)","text":"<p>2023/8/28</p> <p>00 : 09 : 30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_101","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4ee5\u6570\u7ec4 <code>intervals</code> \u8868\u793a\u82e5\u5e72\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5355\u4e2a\u533a\u95f4\u4e3a <code>intervals[i] = [starti, endi]</code> \u3002\u8bf7\u4f60\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\uff0c\u5e76\u8fd4\u56de \u4e00\u4e2a\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u9700\u6070\u597d\u8986\u76d6\u8f93\u5165\u4e2d\u7684\u6240\u6709\u533a\u95f4 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aintervals = [[1,3],[2,6],[8,10],[15,18]]\n\u8f93\u51fa\uff1a[[1,6],[8,10],[15,18]]\n\u89e3\u91ca\uff1a\u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6].\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aintervals = [[1,4],[4,5]]\n\u8f93\u51fa\uff1a[[1,5]]\n\u89e3\u91ca\uff1a\u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 104</code></li> <li><code>intervals[i].length == 2</code></li> <li><code>0 &lt;= starti &lt;= endi &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_102","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        sort(intervals.begin(), intervals.end(), \n        [](vector&lt;int&gt; a, vector&lt;int&gt; b)\n        {\n            return a[0] &lt; b[0];\n        });\n        int size = intervals.size();\n        vector&lt;vector&lt;int&gt;&gt; result;\n        result.push_back(intervals[0]);\n        int lastRight = intervals[0][1];\n        for (int i = 1; i &lt; size; ++i)\n        {\n            if (intervals[i][0] &lt;= lastRight &amp;&amp; intervals[i][1] &gt; lastRight)\n            {\n                vector&lt;int&gt; temp = result.back();\n                result.pop_back();\n                lastRight = temp[1] = intervals[i][1];\n                result.push_back(temp);\n            }\n            else if (intervals[i][0] &gt; lastRight)\n            {\n                result.push_back(intervals[i]);\n                lastRight = intervals[i][1];\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_103","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        if (intervals.size() == 0) {\n            return {};\n        }\n        sort(intervals.begin(), intervals.end());\n        vector&lt;vector&lt;int&gt;&gt; merged;\n        for (int i = 0; i &lt; intervals.size(); ++i) {\n            int L = intervals[i][0], R = intervals[i][1];\n            if (!merged.size() || merged.back()[1] &lt; L) {\n                merged.push_back({L, R});\n            }\n            else {\n                merged.back()[1] = max(merged.back()[1], R);\n            }\n        }\n        return merged;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_104","title":"\u611f\u60f3","text":"<p>\u548c\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7684\u505a\u6cd5\u4e00\u81f4, \u90fd\u662f\u5148\u6392\u5e8f\u518d\u8d2a\u5fc3, \u901f\u5ea6\u6bd4\u8f83\u4e00\u822c</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#62-medium","title":"62. \u4e0d\u540c\u8def\u5f84(medium)","text":"<p>2023/8/28</p> <p>00 : 30 : 55</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_105","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a <code>m x n</code> \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cStart\u201d \uff09\u3002</p> <p>\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cFinish\u201d \uff09\u3002</p> <p>\u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1am = 3, n = 7\n\u8f93\u51fa\uff1a28\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1am = 3, n = 2\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\n\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002\n1. \u5411\u53f3 -&gt; \u5411\u4e0b -&gt; \u5411\u4e0b\n2. \u5411\u4e0b -&gt; \u5411\u4e0b -&gt; \u5411\u53f3\n3. \u5411\u4e0b -&gt; \u5411\u53f3 -&gt; \u5411\u4e0b\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1am = 7, n = 3\n\u8f93\u51fa\uff1a28\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1am = 3, n = 3\n\u8f93\u51fa\uff1a6\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8e <code>2 * 109</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_106","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        int **dp = new int*[m];\n        for (int i = 0; i &lt; m; ++i)\n        {\n            dp[i] = new int[n];\n            for (int j = 0; j &lt; n; ++j)\n            {\n                if (i == 0 || j == 0)\n                {\n                    dp[i][j] = 1;\n                }\n                else\n                {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 1; i &lt; m; ++i)\n        {\n            for (int j = 1; j &lt; n; ++j)\n            {\n                dp[i][j] = dp[i-1][j] + dp[i][j-1];\n            }\n        }\n        return dp[m-1][n-1];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_107","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector&lt;vector&lt;int&gt;&gt; f(m, vector&lt;int&gt;(n));\n        for (int i = 0; i &lt; m; ++i) {\n            f[i][0] = 1;\n        }\n        for (int j = 0; j &lt; n; ++j) {\n            f[0][j] = 1;\n        }\n        for (int i = 1; i &lt; m; ++i) {\n            for (int j = 1; j &lt; n; ++j) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n            }\n        }\n        return f[m - 1][n - 1];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_108","title":"\u611f\u60f3","text":"<p>\u7b2c\u4e00\u904d\u5199\u7684\u65f6\u5019\u6ca1\u6709\u7528\u52a8\u6001\u89c4\u5212,\u800c\u662f\u5f53\u6210\u5bfb\u8def\u7684\u9898, \u7528\u7684dfs, \u6548\u7387\u5f88\u707e\u96be, \u4e8e\u662f\u6539\u7528dp, \u53d1\u73b0\u5f88\u7b80\u5355</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#64-medium","title":"64. \u6700\u5c0f\u8def\u5f84\u548c(medium)","text":"<p>2023/8/28</p> <p>00 : 06 : 37</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_109","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684 <code>*m* x *n*</code> \u7f51\u683c <code>grid</code> \uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002</p> <p>\u8bf4\u660e\uff1a\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1agrid = [[1,3,1],[1,5,1],[4,2,1]]\n\u8f93\u51fa\uff1a7\n\u89e3\u91ca\uff1a\u56e0\u4e3a\u8def\u5f84 1\u21923\u21921\u21921\u21921 \u7684\u603b\u548c\u6700\u5c0f\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1agrid = [[1,2,3],[4,5,6]]\n\u8f93\u51fa\uff1a12\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 200</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_110","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int minPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        for (int i = 1; i &lt; n; ++i)\n        {\n            grid[0][i] += grid[0][i-1];\n        }\n        for (int i = 1; i &lt; m; ++i)\n        {\n            grid[i][0] += grid[i-1][0];\n        }\n        for (int i = 1; i &lt; m; ++i)\n        {\n            for (int j = 1; j &lt; n; ++j)\n            {\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1]);\n            }\n        }\n\n        return grid[m-1][n-1];\n\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_111","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int minPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        if (grid.size() == 0 || grid[0].size() == 0) {\n            return 0;\n        }\n        int rows = grid.size(), columns = grid[0].size();\n        auto dp = vector &lt; vector &lt;int&gt; &gt; (rows, vector &lt;int&gt; (columns));\n        dp[0][0] = grid[0][0];\n        for (int i = 1; i &lt; rows; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for (int j = 1; j &lt; columns; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n        for (int i = 1; i &lt; rows; i++) {\n            for (int j = 1; j &lt; columns; j++) {\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n        return dp[rows - 1][columns - 1];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_112","title":"\u611f\u60f3","text":"<p>\u8fd9\u9898\u7684\u601d\u8def\u548c62\u5f88\u50cf, \u4e5f\u662f\u57fa\u672c\u4e00\u81f4\u7684dp</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#70-easy","title":"70. \u722c\u697c\u68af(easy)","text":"<p>2023/8/28</p> <p>00 : 03 : 00</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_113","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 <code>n</code> \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002</p> <p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c <code>1</code> \u6216 <code>2</code> \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 2\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1. 1 \u9636 + 1 \u9636\n2. 2 \u9636\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 3\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1. 1 \u9636 + 1 \u9636 + 1 \u9636\n2. 1 \u9636 + 2 \u9636\n3. 2 \u9636 + 1 \u9636\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 45</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_114","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n == 1)\n        {\n            return 1;\n        }\n        int *dp = new int[n];\n        for (int i = 0; i &lt; n; ++i)\n        {\n            dp[i] = 0;\n        }\n        dp[0] = 1;\n        dp[1] = 2;\n        for (int i = 2; i &lt; n; ++i)\n        {\n            dp[i] = dp[i-2] + dp[i-1];\n        }\n        return dp[n-1];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_115","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        int p = 0, q = 0, r = 1;\n        for (int i = 1; i &lt;= n; ++i) {\n            p = q; \n            q = r; \n            r = p + q;\n        }\n        return r;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_116","title":"\u611f\u60f3","text":"<p>\u4e0d\u6127\u662feasy\u9898, \u6bd4\u524d\u9762\u7684dp\u66f4\u5feb, \u4e0d\u8fc7\u770b\u9898\u89e3\u8bf4\u662f\u53ef\u4ee5\u7528\u300c\u6eda\u52a8\u6570\u7ec4\u601d\u60f3\u300d(\u7c7b\u4f3c\u6ed1\u52a8\u7a97\u53e3)\u89e3\u51b3, \u53ef\u4ee5\u7701\u4e0b\u5f88\u591a\u7a7a\u95f4</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#72-hard","title":"72. \u7f16\u8f91\u8ddd\u79bb(hard)","text":"<p>2023/8/28</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_117","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd <code>word1</code> \u548c <code>word2</code>\uff0c \u8bf7\u8fd4\u56de\u5c06 <code>word1</code> \u8f6c\u6362\u6210 <code>word2</code> \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002</p> <p>\u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26</li> <li>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26</li> <li>\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aword1 = \"horse\", word2 = \"ros\"\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\nhorse -&gt; rorse (\u5c06 'h' \u66ff\u6362\u4e3a 'r')\nrorse -&gt; rose (\u5220\u9664 'r')\nrose -&gt; ros (\u5220\u9664 'e')\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aword1 = \"intention\", word2 = \"execution\"\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\nintention -&gt; inention (\u5220\u9664 't')\ninention -&gt; enention (\u5c06 'i' \u66ff\u6362\u4e3a 'e')\nenention -&gt; exention (\u5c06 'n' \u66ff\u6362\u4e3a 'x')\nexention -&gt; exection (\u5c06 'n' \u66ff\u6362\u4e3a 'c')\nexection -&gt; execution (\u63d2\u5165 'u')\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li> <li><code>word1</code> \u548c <code>word2</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_118","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int min(int x, int y, int z)\n    {\n        int temp = y &lt; z ? y : z;\n        return x &lt; temp ? x : temp;\n    }\n    int minDistance(string word1, string word2) {\n        int m = word1.size();\n        int n = word2.size();\n        int **dp = new int*[m+1];\n        for (int i = 0; i &lt;= m; ++i)\n        {\n            dp[i] = new int[n+1];\n            for (int j = 0; j &lt;= n; ++j)\n            {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i &lt;= m; ++i)\n        {\n            dp[i][0] = i;\n        }\n        for (int j = 0; j &lt;= n; ++j)\n        {\n            dp[0][j] = j;\n        }\n        for (int i = 1; i &lt;= m; ++i)\n        {\n            for (int j = 1; j &lt;= n; ++j)\n            {\n                int temp1 = dp[i-1][j-1] + (word1[i-1] == word2[j-1] ? 0 : 1);\n                int temp2 = dp[i-1][j] + 1;\n                int temp3 = dp[i][j-1] + 1;\n                dp[i][j] = min(temp1, temp2, temp3);\n            }\n        }\n        return dp[m][n];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_119","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        int n = word1.length();\n        int m = word2.length();\n\n        // \u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\u7a7a\u4e32\n        if (n * m == 0) return n + m;\n\n        // DP \u6570\u7ec4\n        vector&lt;vector&lt;int&gt;&gt; D(n + 1, vector&lt;int&gt;(m + 1));\n\n        // \u8fb9\u754c\u72b6\u6001\u521d\u59cb\u5316\n        for (int i = 0; i &lt; n + 1; i++) {\n            D[i][0] = i;\n        }\n        for (int j = 0; j &lt; m + 1; j++) {\n            D[0][j] = j;\n        }\n\n        // \u8ba1\u7b97\u6240\u6709 DP \u503c\n        for (int i = 1; i &lt; n + 1; i++) {\n            for (int j = 1; j &lt; m + 1; j++) {\n                int left = D[i - 1][j] + 1;\n                int down = D[i][j - 1] + 1;\n                int left_down = D[i - 1][j - 1];\n                if (word1[i - 1] != word2[j - 1]) left_down += 1;\n                D[i][j] = min(left, min(down, left_down));\n\n            }\n        }\n        return D[n][m];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_120","title":"\u611f\u60f3","text":"<p>\u786e\u5b9e\u5199\u4e0d\u51fa\u6765, \u770b\u4e86\u9898\u89e3\u624d\u80fd\u505a\u51fa\u6765, \u8fd9\u4e2adp\u7684\u601d\u8def\u5f88\u5de7\u5999, \u8fd8\u662f\u5148\u80cc\u4e0b\u6765\u5427</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#75-medium","title":"75. \u989c\u8272\u5206\u7c7b(medium)","text":"<p>2023/8/30</p> <p>00 : 10 : 00</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_121","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3001\u5171 <code>n</code> \u4e2a\u5143\u7d20\u7684\u6570\u7ec4 <code>nums</code> \uff0c\u539f\u5730\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u76f8\u540c\u989c\u8272\u7684\u5143\u7d20\u76f8\u90bb\uff0c\u5e76\u6309\u7167\u7ea2\u8272\u3001\u767d\u8272\u3001\u84dd\u8272\u987a\u5e8f\u6392\u5217\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u6574\u6570 <code>0</code>\u3001 <code>1</code> \u548c <code>2</code> \u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002</p> <p>\u5fc5\u987b\u5728\u4e0d\u4f7f\u7528\u5e93\u5185\u7f6e\u7684 sort \u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,0,2,1,1,0]\n\u8f93\u51fa\uff1a[0,0,1,1,2,2]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,0,1]\n\u8f93\u51fa\uff1a[0,1,2]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>nums[i]</code> \u4e3a <code>0</code>\u3001<code>1</code> \u6216 <code>2</code></li> </ul> <p>\u8fdb\u9636\uff1a</p> <ul> <li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\u5417\uff1f</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_122","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void quickSort(vector&lt;int&gt;&amp; nums, int l, int r)\n    {\n        if (l &gt;= r)\n        {\n            return;\n        }\n        int left = l, right = r-1;\n        // srand(time(NULL));\n        // swap(nums[r], nums[rand() % (r-l+1) + l]);\n        int pivot = r;\n        while (left &lt; right)\n        {\n            while (left &lt; right &amp;&amp; nums[left] &lt;= nums[pivot])\n            {\n                left++;\n            }\n            while (left &lt; right &amp;&amp; nums[right] &gt; nums[pivot])\n            {\n                right--;\n            }\n            swap(nums[left], nums[right]);\n        }\n        if (nums[left] &gt; nums[pivot])\n        {\n            swap(nums[left], nums[pivot]);\n            pivot = left;\n        }\n        quickSort(nums, l, pivot-1);\n        quickSort(nums, pivot+1, r);\n    }\n\n    void sortColors(vector&lt;int&gt;&amp; nums) {\n        quickSort(nums, 0, nums.size()-1);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_123","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void sortColors(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int p0 = 0, p2 = n - 1;\n        for (int i = 0; i &lt;= p2; ++i) {\n            while (i &lt;= p2 &amp;&amp; nums[i] == 2) {\n                swap(nums[i], nums[p2]);\n                --p2;\n            }\n            if (nums[i] == 0) {\n                swap(nums[i], nums[p0]);\n                ++p0;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_124","title":"\u611f\u60f3","text":"<p>\u77e5\u9053\u4e0d\u9700\u8981\u7528\u5feb\u6392, \u4f46\u662f\u6b63\u597d\u590d\u4e60\u4e00\u4e0b\u5feb\u6392(), \u8bf4\u56de\u9898\u76ee\u672c\u8eab, \u53ea\u9700\u8981\u628a0\u653e\u6700\u524d, 2\u653e\u6700\u540e\u5373\u53ef</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#76-hard","title":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32(hard)","text":"<p>2023/8/30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_125","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>t</code> \u3002\u8fd4\u56de <code>s</code> \u4e2d\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c <code>s</code> \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 <code>\"\"</code> \u3002</p> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u5bf9\u4e8e <code>t</code> \u4e2d\u91cd\u590d\u5b57\u7b26\uff0c\u6211\u4eec\u5bfb\u627e\u7684\u5b50\u5b57\u7b26\u4e32\u4e2d\u8be5\u5b57\u7b26\u6570\u91cf\u5fc5\u987b\u4e0d\u5c11\u4e8e <code>t</code> \u4e2d\u8be5\u5b57\u7b26\u6570\u91cf\u3002</li> <li>\u5982\u679c <code>s</code> \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"ADOBECODEBANC\", t = \"ABC\"\n\u8f93\u51fa\uff1a\"BANC\"\n\u89e3\u91ca\uff1a\u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \"BANC\" \u5305\u542b\u6765\u81ea\u5b57\u7b26\u4e32 t \u7684 'A'\u3001'B' \u548c 'C'\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"a\", t = \"a\"\n\u8f93\u51fa\uff1a\"a\"\n\u89e3\u91ca\uff1a\u6574\u4e2a\u5b57\u7b26\u4e32 s \u662f\u6700\u5c0f\u8986\u76d6\u5b50\u4e32\u3002\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: s = \"a\", t = \"aa\"\n\u8f93\u51fa: \"\"\n\u89e3\u91ca: t \u4e2d\u4e24\u4e2a\u5b57\u7b26 'a' \u5747\u5e94\u5305\u542b\u5728 s \u7684\u5b50\u4e32\u4e2d\uff0c\n\u56e0\u6b64\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>m == s.length</code></li> <li><code>n == t.length</code></li> <li><code>1 &lt;= m, n &lt;= 105</code></li> <li><code>s</code> \u548c <code>t</code> \u7531\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u5728 <code>o(m+n)</code> \u65f6\u95f4\u5185\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u7b97\u6cd5\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_126","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isInclude(unordered_map&lt;char, int&gt;&amp; hash)\n    {\n        for (auto &amp;it : hash)\n        {\n            if (it.second &gt; 0)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    string minWindow(string s, string t)\n    {\n        unordered_map&lt;char, int&gt; hash;\n        int m = s.size();\n        int n = t.size();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (hash.find(t[i]) != hash.end())\n            {\n                hash[t[i]]++;\n            }\n            else\n            {\n                hash.insert({t[i], 1});\n            }\n        }\n        int left = 0, right = 0, index = 0, len = 0x3f3f3f3f;\n        while (right &lt; m)\n        {\n            while (right &lt; m)\n            {\n                if (hash.find(s[right]) != hash.end())\n                {\n                    hash[s[right]]--;\n                }\n                else\n                {\n                    right++;\n                    continue;\n                }\n                if (hash[s[right]] == 0 &amp;&amp; isInclude(hash))\n                {\n                    if (right - left + 1 &lt; len)\n                    {\n                        index = left;\n                        len = right - left + 1;\n                    }\n                    right++;\n                    break;\n                }\n                right++;\n            }\n            if (!isInclude(hash))\n            {\n                break;\n            }\n            while (right - left &gt;= n)\n            {\n                if (hash.find(s[left]) != hash.end())\n                {\n                    hash[s[left]]++;\n                }\n                else\n                {\n                    left++;\n                    continue;\n                }\n                if (hash[s[left]] == 1 &amp;&amp; !isInclude(hash))\n                {\n                    if (right - left &lt; len)\n                    {\n                        index = left;\n                        len = right - left;\n                    }\n                    left++;\n                    break;\n                }\n                left++;\n            }\n        }\n        if (len != 0x3f3f3f3f)\n        {\n            return s.substr(index, len);\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_127","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    unordered_map &lt;char, int&gt; ori, cnt;\n\n    bool check() {\n        for (const auto &amp;p: ori) {\n            if (cnt[p.first] &lt; p.second) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    string minWindow(string s, string t) {\n        for (const auto &amp;c: t) {\n            ++ori[c];\n        }\n\n        int l = 0, r = -1;\n        int len = INT_MAX, ansL = -1, ansR = -1;\n\n        while (r &lt; int(s.size())) {\n            if (ori.find(s[++r]) != ori.end()) {\n                ++cnt[s[r]];\n            }\n            while (check() &amp;&amp; l &lt;= r) {\n                if (r - l + 1 &lt; len) {\n                    len = r - l + 1;\n                    ansL = l;\n                }\n                if (ori.find(s[l]) != ori.end()) {\n                    --cnt[s[l]];\n                }\n                ++l;\n            }\n        }\n\n        return ansL == -1 ? string() : s.substr(ansL, len);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_128","title":"\u611f\u60f3","text":"<p>\u5199\u4e86\u5f88\u4e45, \u6478\u7d22\u51fa\u6765\u662f\u6ed1\u52a8\u7a97\u53e3, \u4f46\u662f\u5173\u4e8e\u5177\u4f53\u600e\u4e48\u5212\u603b\u662f\u51fabug, \u4e8e\u662f\u770b\u4e86\u4e00\u773c\u9898\u89e3\u518d\u91cd\u5199\u4e86\u4e00\u904d</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#78-medium","title":"78. \u5b50\u96c6(medium)","text":"<p>2023/8/30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_129","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c \u3002\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002</p> <p>\u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u89e3\u96c6\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3]\n\u8f93\u51fa\uff1a[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [0]\n\u8f93\u51fa\uff1a[[],[0]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li><code>nums</code> \u4e2d\u7684\u6240\u6709\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_130","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        vector&lt;vector&lt;int&gt;&gt; res;\n        if (size == 0)\n        {\n            return res;\n        }\n        else\n        {\n            vector&lt;int&gt; temp;\n            res.push_back(temp);\n            temp.push_back(nums[0]);\n            res.push_back(temp);\n        }\n        for (int i = 1; i &lt; size; ++i)\n        {\n            vector&lt;vector&lt;int&gt;&gt; newSubsets;\n            for (auto &amp;it : res)\n            {\n                vector&lt;int&gt; tmp = it;\n                tmp.push_back(nums[i]);\n                newSubsets.push_back(tmp);\n            }\n            res.insert(res.end(), newSubsets.begin(), newSubsets.end());\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_131","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; t;\n    vector&lt;vector&lt;int&gt;&gt; ans;\n\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int mask = 0; mask &lt; (1 &lt;&lt; n); ++mask) {\n            t.clear();\n            for (int i = 0; i &lt; n; ++i) {\n                if (mask &amp; (1 &lt;&lt; i)) {\n                    t.push_back(nums[i]);\n                }\n            }\n            ans.push_back(t);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_132","title":"\u611f\u60f3","text":"<p>\u8fd9\u4e2a\u4e0d\u96be, \u6ce8\u610f\u4ee3\u780119\u884c\u4f7f\u7528\u7684newSubsets</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#79-medium","title":"79. \u5355\u8bcd\u641c\u7d22(medium)","text":"<p>2023/8/30</p> <p>00 : 35 : 49</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_133","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a <code>m x n</code> \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c <code>board</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5355\u8bcd <code>word</code> \u3002\u5982\u679c <code>word</code> \u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>m == board.length</code></li> <li><code>n = board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 6</code></li> <li><code>1 &lt;= word.length &lt;= 15</code></li> <li><code>board</code> \u548c <code>word</code> \u4ec5\u7531\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u4f7f\u7528\u641c\u7d22\u526a\u679d\u7684\u6280\u672f\u6765\u4f18\u5316\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u5176\u5728 <code>board</code> \u66f4\u5927\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u66f4\u5feb\u89e3\u51b3\u95ee\u9898\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_134","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool search(int posx, int posy, vector&lt;vector&lt;char&gt;&gt;&amp; board, string&amp; word, vector&lt;vector&lt;bool&gt;&gt;&amp; passedby)\n    {\n        passedby[posx][posy] = true;\n        if (word == \"\")\n        {\n            passedby[posx][posy] = false;\n            return true;\n        }\n        string str = word.substr(1);\n        if (posx &gt; 0 &amp;&amp; !passedby[posx-1][posy] &amp;&amp; board[posx-1][posy] == word[0] &amp;&amp; search(posx-1, posy, board, str, passedby))\n        {\n            passedby[posx][posy] = false;\n            return true;\n        }\n        if (posx+1 &lt; board.size() &amp;&amp; !passedby[posx+1][posy] &amp;&amp; board[posx+1][posy] == word[0] &amp;&amp; search(posx+1, posy, board, str, passedby))\n        {\n            passedby[posx][posy] = false;\n            return true;\n        }\n        if (posy &gt; 0 &amp;&amp; !passedby[posx][posy-1] &amp;&amp; board[posx][posy-1] == word[0] &amp;&amp; search(posx, posy-1, board, str, passedby))\n        {\n            passedby[posx][posy] = false;\n            return true;\n        }\n        if (posy+1 &lt; board[0].size() &amp;&amp; !passedby[posx][posy+1] &amp;&amp; board[posx][posy+1] == word[0] &amp;&amp; search(posx, posy+1, board, str, passedby))\n        {\n            passedby[posx][posy] = false;\n            return true;\n        }\n        passedby[posx][posy] = false;\n        return false;\n    }\n    bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) {\n        vector&lt;vector&lt;bool&gt;&gt; passedby;\n        for (int i = 0; i &lt; board.size(); ++i)\n        {\n            vector&lt;bool&gt; temp;\n            for (int j = 0; j &lt; board[i].size(); ++j)\n            {\n                temp.push_back(false);\n            }\n            passedby.push_back(temp);\n        }\n        string str =  word.substr(1);\n        for (int i = 0; i &lt; board.size(); ++i)\n        {\n            for (int j = 0; j &lt; board[i].size(); ++j)\n            {\n                if (board[i][j] == word[0])\n                {\n                    if (search(i, j, board,str, passedby))\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_135","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>int directions[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\nbool check(char** board, int boardSize, int boardColSize, int** visited, int i, int j, char* s, int sSize, int k) {\n    if (board[i][j] != s[k]) {\n        return false;\n    } else if (k == sSize - 1) {\n        return true;\n    }\n    visited[i][j] = true;\n    bool result = false;\n    for (int sel = 0; sel &lt; 4; sel++) {\n        int newi = i + directions[sel][0], newj = j + directions[sel][1];\n        if (newi &gt;= 0 &amp;&amp; newi &lt; boardSize &amp;&amp; newj &gt;= 0 &amp;&amp; newj &lt; boardColSize) {\n            if (!visited[newi][newj]) {\n                bool flag = check(board, boardSize, boardColSize, visited, newi, newj, s, sSize, k + 1);\n                if (flag) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n    }\n    visited[i][j] = false;\n    return result;\n}\n\nbool exist(char** board, int boardSize, int* boardColSize, char* word) {\n    int** visited = malloc(sizeof(int*) * boardSize);\n    for (int i = 0; i &lt; boardSize; i++) {\n        visited[i] = malloc(sizeof(int) * boardColSize[0]);\n        memset(visited[i], 0, sizeof(int) * boardColSize[0]);\n    }\n    int wordSize = strlen(word);\n    for (int i = 0; i &lt; boardSize; i++) {\n        for (int j = 0; j &lt; boardColSize[0]; j++) {\n            bool flag = check(board, boardSize, boardColSize[0], visited, i, j, word, wordSize, 0);\n            if (flag) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_136","title":"\u611f\u60f3","text":"<p>\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5, \u95ee\u9898\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8, \u5199\u51fa\u6765\u4e4b\u540e\u53d1\u73b0\u8d85\u65f6\u9650\u4e86, \u770b\u4e86\u773c\u9898\u89e3\u53d1\u73b0\u601d\u8def\u6ca1\u95ee\u9898, \u628a\u4ee3\u7801\u4f18\u5316\u4e86\u4e00\u4e0b, \u6bd4\u5982\u53c2\u6570\u4ece\u4f20\u503c\u53d8\u6210\u4f20\u5f15\u7528, \u589e\u52a0\u5224\u5b9a\u6761\u4ef6\u526a\u679d\u7b49</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#84-hard","title":"84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62(hard)","text":"<p>2023/8/30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_137","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb\uff0c\u4e14\u5bbd\u5ea6\u4e3a 1 \u3002</p> <p>\u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d\uff0c\u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002</p> <p>\u793a\u4f8b 1:</p> <p></p> <pre><code>\u8f93\u5165\uff1aheights = [2,1,5,6,2,3]\n\u8f93\u51fa\uff1a10\n\u89e3\u91ca\uff1a\u6700\u5927\u7684\u77e9\u5f62\u4e3a\u56fe\u4e2d\u7ea2\u8272\u533a\u57df\uff0c\u9762\u79ef\u4e3a 10\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1a heights = [2,4]\n\u8f93\u51fa\uff1a 4\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= heights.length &lt;=105</code></li> <li><code>0 &lt;= heights[i] &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_138","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt; &amp;heights)\n    {\n        int size = heights.size();\n        int *preorder = new int[size]();\n        int *postorder = new int[size]();\n        stack&lt;int&gt; stk;\n        stk.push(-1);\n        int top = -1;\n        for (int i = 0; i &lt; size; ++i)\n        {\n            if (top == -1 || heights[top] &lt; heights[i])\n            {\n                stk.push(i);\n                top = i;\n            }\n            else\n            {\n                while (top != -1 &amp;&amp; heights[top] &gt;= heights[i])\n                {\n                    int tmp = top;\n                    stk.pop();\n                    top = stk.top();\n                    preorder[tmp] = top;\n                }\n                stk.push(i);\n                top = i;\n            }\n        }\n        while (top != -1)\n        {\n            int tmp = top;\n            stk.pop();\n            top = stk.top();\n            preorder[tmp] = top;\n        }\n        // post\n        stk.pop();\n        stk.push(size);\n        top = size;\n        for (int i = size - 1; i &gt;= 0; --i)\n        {\n            if (top == size || heights[top] &lt; heights[i])\n            {\n                stk.push(i);\n                top = i;\n            }\n            else\n            {\n                while (top != size &amp;&amp; heights[top] &gt;= heights[i])\n                {\n                    int tmp = top;\n                    stk.pop();\n                    top = stk.top();\n                    postorder[tmp] = top;\n                }\n                stk.push(i);\n                top = i;\n            }\n        }\n        while (top != size)\n        {\n            int tmp = top;\n            stk.pop();\n            top = stk.top();\n            postorder[tmp] = top;\n        }\n        int max = 0;\n        for (int i = 0; i &lt; size; ++i)\n        {\n            int area = heights[i] * (postorder[i] - preorder[i] - 1);\n            max = max &lt; area ? area : max;\n        }\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_139","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        int n = heights.size();\n        vector&lt;int&gt; left(n), right(n);\n\n        stack&lt;int&gt; mono_stack;\n        for (int i = 0; i &lt; n; ++i) {\n            while (!mono_stack.empty() &amp;&amp; heights[mono_stack.top()] &gt;= heights[i]) {\n                mono_stack.pop();\n            }\n            left[i] = (mono_stack.empty() ? -1 : mono_stack.top());\n            mono_stack.push(i);\n        }\n\n        mono_stack = stack&lt;int&gt;();\n        for (int i = n - 1; i &gt;= 0; --i) {\n            while (!mono_stack.empty() &amp;&amp; heights[mono_stack.top()] &gt;= heights[i]) {\n                mono_stack.pop();\n            }\n            right[i] = (mono_stack.empty() ? n : mono_stack.top());\n            mono_stack.push(i);\n        }\n\n        int ans = 0;\n        for (int i = 0; i &lt; n; ++i) {\n            ans = max(ans, (right[i] - left[i] - 1) * heights[i]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_140","title":"\u611f\u60f3","text":"<p>\u66b4\u641c\u7684\u901f\u5ea6\u592a\u6162\u4e86, \u65e0\u8bba\u600e\u4e48\u4f18\u5316\u90fd\u8fc7\u4e0d\u53bb\u6700\u540e\u4e24\u4e2a\u6d4b\u8bd5\u70b9, \u65e0\u5948\u653e\u5f03, \u770b\u4e86\u9898\u89e3\u8bf4\u662f\u5355\u8c03\u6808, \u597d\u50cf\u662f\u7b2c\u4e00\u6b21\u63a5\u89e6\u5355\u8c03\u6808\u7684\u9898\u76ee, \u5149\u662f\u7406\u89e3\u9898\u89e3\u90fd\u82b1\u4e86\u597d\u4e00\u6bb5\u65f6\u95f4, \u597d\u5728\u6700\u540e\u8fd8\u662f\u5199\u4e86\u51fa\u6765, \u4f46\u662f\u4e0d\u6562\u4fdd\u8bc1\u4e0b\u6b21\u78b0\u89c1\u8fd8\u80fd\u505a\u51fa\u6765</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#85-hard","title":"85. \u6700\u5927\u77e9\u5f62(hard)","text":"<p>2023/8/31</p> <p>01 : 14 : 15</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_141","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b <code>0</code> \u548c <code>1</code> \u3001\u5927\u5c0f\u4e3a <code>rows x cols</code> \u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u77e9\u9635\uff0c\u627e\u51fa\u53ea\u5305\u542b <code>1</code> \u7684\u6700\u5927\u77e9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amatrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u6700\u5927\u77e9\u5f62\u5982\u4e0a\u56fe\u6240\u793a\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1amatrix = []\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1amatrix = [[\"0\"]]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1amatrix = [[\"1\"]]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 5\uff1a</p> <pre><code>\u8f93\u5165\uff1amatrix = [[\"0\",\"0\"]]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>rows == matrix.length</code></li> <li><code>cols == matrix[0].length</code></li> <li><code>1 &lt;= row, cols &lt;= 200</code></li> <li><code>matrix[i][j]</code> \u4e3a <code>'0'</code> \u6216 <code>'1'</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_142","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maximalRectangle(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        int size = m*n;\n        int max = 0;\n        bool *dp = new bool[size];\n\n        for (int i = 0; i &lt; size; ++i)\n        {\n            int rowX = n-i%n;\n            int rowY = m-i/n;\n            int banX = n;\n            int size_j = rowX * rowY;\n            if (size_j &lt; max)\n            {\n                i = (i/n + 1) * n - 1;\n                continue;\n            }\n            dp[0] = matrix[i/n][i%n] == '1';\n            max = dp[0] &amp;&amp; max == 0 ? 1 : max;\n            for (int j = 1; j &lt; size_j; ++j)\n            {\n                if (j/rowX == 0)\n                {\n                    dp[j] = dp[j-1] &amp;&amp; matrix[i/n][i%n+j] == '1';\n                }\n                else if (j%rowX == 0)\n                {\n                    dp[j] = dp[j-rowX] &amp;&amp; matrix[i/n + j/rowX][i%n] == '1';\n                }\n                else\n                {\n                    if (i%n + j%rowX &gt;= banX)\n                    {\n                        j = (j/rowX + 1) * rowX - 1;\n                        continue;\n                    }\n                    dp[j] = dp[j-1] &amp;&amp; dp[j-rowX] &amp;&amp; matrix[i/n + j/rowX][i%n + j%rowX] == '1';\n                }\n                if (dp[j])\n                {\n                    int area = (j%rowX + 1) * (j/rowX + 1);\n                    max = max &gt; area ? max : area;\n                }\n                else\n                {\n                    banX = banX &lt; i%n + j%rowX ? banX : i%n + j%rowX;\n                }\n            }\n        }\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_143","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maximalRectangle(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) {\n        int m = matrix.size();\n        if (m == 0) {\n            return 0;\n        }\n        int n = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; left(m, vector&lt;int&gt;(n, 0));\n\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (matrix[i][j] == '1') {\n                    left[i][j] = (j == 0 ? 0: left[i][j - 1]) + 1;\n                }\n            }\n        }\n\n        int ret = 0;\n        for (int j = 0; j &lt; n; j++) { // \u5bf9\u4e8e\u6bcf\u4e00\u5217\uff0c\u4f7f\u7528\u57fa\u4e8e\u67f1\u72b6\u56fe\u7684\u65b9\u6cd5\n            vector&lt;int&gt; up(m, 0), down(m, 0);\n\n            stack&lt;int&gt; stk;\n            for (int i = 0; i &lt; m; i++) {\n                while (!stk.empty() &amp;&amp; left[stk.top()][j] &gt;= left[i][j]) {\n                    stk.pop();\n                }\n                up[i] = stk.empty() ? -1 : stk.top();\n                stk.push(i);\n            }\n            stk = stack&lt;int&gt;();\n            for (int i = m - 1; i &gt;= 0; i--) {\n                while (!stk.empty() &amp;&amp; left[stk.top()][j] &gt;= left[i][j]) {\n                    stk.pop();\n                }\n                down[i] = stk.empty() ? m : stk.top();\n                stk.push(i);\n            }\n\n            for (int i = 0; i &lt; m; i++) {\n                int height = down[i] - up[i] - 1;\n                int area = height * left[i][j];\n                ret = max(ret, area);\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_144","title":"\u611f\u60f3","text":"<p>\u6211\u7684\u662f\u66b4\u529b\u89e3\u6cd5, \u5e94\u8be5\u53c2\u800384\u9898\u4f7f\u7528\u5355\u8c03\u6808\u4f1a\u66f4\u597d</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#94-easy","title":"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386(easy)","text":"<p>2023/8/31</p> <p>00 : 02 : 43</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_145","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8fd4\u56de \u5b83\u7684 \u4e2d\u5e8f \u904d\u5386 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [1,null,2,3]\n\u8f93\u51fa\uff1a[1,3,2]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1]\n\u8f93\u51fa\uff1a[1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[0, 100]</code> \u5185</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p>\u8fdb\u9636: \u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_146","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void dfs(vector&lt;int&gt; &amp;res, TreeNode* node)\n    {\n        if (node == nullptr)\n        {\n            return;\n        }\n        dfs(res, node-&gt;left);\n        res.push_back(node-&gt;val);\n        dfs(res, node-&gt;right);\n    }\n    vector&lt;int&gt; inorderTraversal(TreeNode* root) {\n        vector&lt;int&gt; res;\n        dfs(res, root);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_147","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; inorderTraversal(TreeNode* root) {\n        vector&lt;int&gt; res;\n        stack&lt;TreeNode*&gt; stk;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.push(root);\n                root = root-&gt;left;\n            }\n            root = stk.top();\n            stk.pop();\n            res.push_back(root-&gt;val);\n            root = root-&gt;right;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_148","title":"\u611f\u60f3","text":"<p>\u81ea\u7136\u7684\u601d\u8def\u662f\u9012\u5f52, \u672c\u8d28\u4e0a\u5c31\u662f\u9690\u5f0f\u5730\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6808</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#96-medium","title":"96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811(medium)","text":"<p>2023/8/31</p> <p>00 : 24 : 24</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_149","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>n</code> \uff0c\u6c42\u6070\u7531 <code>n</code> \u4e2a\u8282\u70b9\u7ec4\u6210\u4e14\u8282\u70b9\u503c\u4ece <code>1</code> \u5230 <code>n</code> \u4e92\u4e0d\u76f8\u540c\u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \u6709\u591a\u5c11\u79cd\uff1f\u8fd4\u56de\u6ee1\u8db3\u9898\u610f\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u79cd\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1an = 3\n\u8f93\u51fa\uff1a5\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 1\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 19</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_150","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n\n    int numTrees(int n) {\n        int *dp = new int[n+1]();\n        dp[0] = 1;\n        for (int i = 1; i &lt;= n; ++i)\n        {\n            for (int j = 1; j &lt;= i; ++j)\n            {\n                dp[i] += dp[j-1] * dp[i-j];\n            }\n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_151","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int numTrees(int n) {\n        vector&lt;int&gt; G(n + 1, 0);\n        G[0] = 1;\n        G[1] = 1;\n\n        for (int i = 2; i &lt;= n; ++i) {\n            for (int j = 1; j &lt;= i; ++j) {\n                G[i] += G[j - 1] * G[i - j];\n            }\n        }\n        return G[n];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_152","title":"\u611f\u60f3","text":"<p>\u4e00\u4e2a\u9012\u63a8\u516c\u5f0f, \u60f3\u6e05\u695a\u4e86\u518d\u4e0b\u7b14\u5c31\u4e0d\u96be, \u9898\u89e3\u6709\u4e00\u4e2a\u6570\u5b66\u65b9\u6cd5\u8fd8\u6709\u70b9\u610f\u601d, \u5e94\u8be5\u662f\u5229\u7528\u8fd9\u4e2a\u9012\u63a8\u516c\u5f0f\u7b97\u51fa\u6765\u7684</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#98-medium","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811(medium)","text":"<p>2023/8/31</p> <p>00 : 26 : 29</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_153","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>\u6709\u6548 \u4e8c\u53c9\u641c\u7d22\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b \u5c0f\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002</li> <li>\u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b \u5927\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002</li> <li>\u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [2,1,3]\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [5,1,4,null,null,3,6]\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\u6839\u8282\u70b9\u7684\u503c\u662f 5 \uff0c\u4f46\u662f\u53f3\u5b50\u8282\u70b9\u7684\u503c\u662f 4 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u8303\u56f4\u5728<code>[1, 104]</code> \u5185</li> <li><code>-231 &lt;= Node.val &lt;= 231 - 1</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_154","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isValid(TreeNode* root, int min, int max, bool hasMin, bool hasMax)\n    {\n        if (root == nullptr)\n        {\n            return true;\n        }\n        if ((!hasMax || root-&gt;val &lt; max) &amp;&amp; (!hasMin || root-&gt;val &gt; min))\n        {\n            return isValid(root-&gt;left, min, root-&gt;val, hasMin, true) &amp;&amp; isValid(root-&gt;right, root-&gt;val, max, true, hasMax);\n        }\n        else\n        {\n            return false;\n        }\n\n    }\n    bool isValidBST(TreeNode* root) {\n        return isValid(root, 0, 0, false, false);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_155","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\n    long pre = Long.MIN_VALUE;\n    public boolean isValidBST(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        // \u8bbf\u95ee\u5de6\u5b50\u6811\n        if (!isValidBST(root.left)) {\n            return false;\n        }\n        // \u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff1a\u5982\u679c\u5f53\u524d\u8282\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf4\u660e\u4e0d\u6ee1\u8db3BST\uff0c\u8fd4\u56de false\uff1b\u5426\u5219\u7ee7\u7eed\u904d\u5386\u3002\n        if (root.val &lt;= pre) {\n            return false;\n        }\n        pre = root.val;\n        // \u8bbf\u95ee\u53f3\u5b50\u6811\n        return isValidBST(root.right);\n    }\n}\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_156","title":"\u611f\u60f3","text":"<p>\u6211\u662f\u9012\u5f52\u505a\u7684 ,\u7528\u4e2d\u5e8f\u904d\u5386\u4e5f\u53ef\u4ee5\u505a, \u8bbe\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u7ef4\u62a4\u904d\u5386\u5230\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u5373\u53ef</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#101-easy","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811(easy)","text":"<p>2023/8/31</p> <p>00 : 05 : 02</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_157","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c \u68c0\u67e5\u5b83\u662f\u5426\u8f74\u5bf9\u79f0\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [1,2,2,3,4,4,3]\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [1,2,2,null,3,null,3]\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[1, 1000]</code> \u5185</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_158","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool dfs(TreeNode* l, TreeNode* r)\n    {\n        if (l == nullptr || r == nullptr)\n        {\n            return l == r;\n        }\n        return l-&gt;val == r-&gt;val &amp;&amp; dfs(l-&gt;left, r-&gt;right) &amp;&amp; dfs(l-&gt;right, r-&gt;left);\n    }\n    bool isSymmetric(TreeNode* root) {\n        return dfs(root-&gt;left, root-&gt;right);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_159","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_160","title":"\u611f\u60f3","text":"<p>\u611f\u89c9\u6211\u5199\u7684\u4ee3\u7801\u6bd4\u9898\u89e3\u5199\u5f97\u8981\u7b80\u6d01, \u5c31\u4e0d\u8d34\u9898\u89e3\u4e86, \u7b80\u5355\u9898\u57fa\u672c\u80fd\u505a\u5230\u5341\u5206\u949f\u4ee5\u5185\u89e3\u51b3\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#102-medium","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386(medium)","text":"<p>2023/9/1</p> <p>00 : 08 : 35</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_161","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684 \u5c42\u5e8f\u904d\u5386 \u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7]\n\u8f93\u51fa\uff1a[[3],[9,20],[15,7]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1]\n\u8f93\u51fa\uff1a[[1]]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[0, 2000]</code> \u5185</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_162","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        queue&lt;TreeNode*&gt; q;\n        vector&lt;vector&lt;int&gt;&gt; res;\n        vector&lt;int&gt; level;\n        if (root == nullptr)\n        {\n            return res;\n        }\n        q.push(root);\n        q.push(nullptr);\n\n        while (!q.empty())\n        {\n            if (q.front() == nullptr)\n            {\n                q.pop();\n                res.push_back(level);\n                if (q.empty())\n                {\n                    break;\n                }\n                else\n                {\n                    level = vector&lt;int&gt;();\n                    q.push(nullptr);\n                }\n            }\n            TreeNode* temp = q.front();\n            q.pop();\n            level.push_back(temp-&gt;val);\n            if (temp-&gt;left != nullptr)\n            {\n                q.push(temp-&gt;left);\n            }\n            if (temp-&gt;right != nullptr)\n            {\n                q.push(temp-&gt;right);\n            } \n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_163","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        vector &lt;vector &lt;int&gt;&gt; ret;\n        if (!root) {\n            return ret;\n        }\n\n        queue &lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            int currentLevelSize = q.size();\n            ret.push_back(vector &lt;int&gt; ());\n            for (int i = 1; i &lt;= currentLevelSize; ++i) {\n                auto node = q.front(); q.pop();\n                ret.back().push_back(node-&gt;val);\n                if (node-&gt;left) q.push(node-&gt;left);\n                if (node-&gt;right) q.push(node-&gt;right);\n            }\n        }\n\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_164","title":"\u611f\u60f3","text":"<p>\u6ce8\u610f\u5728\u961f\u5217\u4e2d\u8981\u60f3\u529e\u6cd5\u7ef4\u62a4\u884c\u4e0e\u884c\u7684\u5206\u754c</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#104-easy","title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6(easy)","text":"<p>2023/9/1</p> <p>00 : 04 : 30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_165","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811 <code>root</code> \uff0c\u8fd4\u56de\u5176\u6700\u5927\u6df1\u5ea6\u3002</p> <p>\u4e8c\u53c9\u6811\u7684 \u6700\u5927\u6df1\u5ea6 \u662f\u6307\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7]\n\u8f93\u51fa\uff1a3\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1,null,2]\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u7684\u6570\u91cf\u5728 <code>[0, 104]</code> \u533a\u95f4\u5185\u3002</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_166","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int dfs(TreeNode* node, int depth)\n    {\n        if (node == nullptr)\n        {\n            return depth;\n        }\n        depth++;\n        int temp1 = dfs(node-&gt;left, depth);\n        int temp2 = dfs(node-&gt;right, depth);\n        return temp1 &gt; temp2 ? temp1 : temp2;\n    }\n    int maxDepth(TreeNode* root) {\n        return dfs(root, 0);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_167","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == nullptr) return 0;\n        return max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + 1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_168","title":"\u611f\u60f3","text":"<p>\u7ecf\u5178\u7684dfs</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#105-medium","title":"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811(medium)","text":"<p>2023/9/1</p> <p>00 : 15 : 15</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_169","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 <code>preorder</code> \u548c <code>inorder</code> \uff0c\u5176\u4e2d <code>preorder</code> \u662f\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c <code>inorder</code> \u662f\u540c\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u8bf7\u6784\u9020\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002</p> <p>\u793a\u4f8b 1:</p> <p></p> <pre><code>\u8f93\u5165: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n\u8f93\u51fa: [3,9,20,null,null,15,7]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: preorder = [-1], inorder = [-1]\n\u8f93\u51fa: [-1]\n</code></pre> <p>\u63d0\u793a:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 3000</code></li> <li><code>inorder.length == preorder.length</code></li> <li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li> <li><code>preorder</code> \u548c <code>inorder</code> \u5747 \u65e0\u91cd\u590d \u5143\u7d20</li> <li><code>inorder</code> \u5747\u51fa\u73b0\u5728 <code>preorder</code></li> <li><code>preorder</code> \u4fdd\u8bc1 \u4e3a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u5e8f\u5217</li> <li><code>inorder</code> \u4fdd\u8bc1 \u4e3a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_170","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    TreeNode* build(vector&lt;int&gt;&amp; preorder, int pre_begin, vector&lt;int&gt;&amp; inorder, int in_begin, int len)\n    {\n        if (len == 0)\n        {\n            return nullptr;\n        }\n        TreeNode* root = new TreeNode(preorder[pre_begin]);\n        int index = 0;\n\n        for (int i = 0; i &lt; len; ++i)\n        {\n            if (inorder[in_begin+i] == preorder[pre_begin])\n            {\n                index = i;\n                break;\n            }\n        }\n\n        root-&gt;left = build(preorder, pre_begin+1, inorder, in_begin, index);\n        root-&gt;right = build(preorder, pre_begin+1+index, inorder, in_begin+index+1, len - index - 1);\n        return root;\n    }\n    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\n        return build(preorder, 0, inorder, 0, inorder.size());\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_171","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\nprivate:\n    unordered_map&lt;int, int&gt; index;\n\npublic:\n    TreeNode* myBuildTree(const vector&lt;int&gt;&amp; preorder, const vector&lt;int&gt;&amp; inorder, int preorder_left, int preorder_right, int inorder_left, int inorder_right) {\n        if (preorder_left &gt; preorder_right) {\n            return nullptr;\n        }\n\n        // \u524d\u5e8f\u904d\u5386\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u6839\u8282\u70b9\n        int preorder_root = preorder_left;\n        // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u5b9a\u4f4d\u6839\u8282\u70b9\n        int inorder_root = index[preorder[preorder_root]];\n\n        // \u5148\u628a\u6839\u8282\u70b9\u5efa\u7acb\u51fa\u6765\n        TreeNode* root = new TreeNode(preorder[preorder_root]);\n        // \u5f97\u5230\u5de6\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u6570\u76ee\n        int size_left_subtree = inorder_root - inorder_left;\n        // \u9012\u5f52\u5730\u6784\u9020\u5de6\u5b50\u6811\uff0c\u5e76\u8fde\u63a5\u5230\u6839\u8282\u70b9\n        // \u5148\u5e8f\u904d\u5386\u4e2d\u300c\u4ece \u5de6\u8fb9\u754c+1 \u5f00\u59cb\u7684 size_left_subtree\u300d\u4e2a\u5143\u7d20\u5c31\u5bf9\u5e94\u4e86\u4e2d\u5e8f\u904d\u5386\u4e2d\u300c\u4ece \u5de6\u8fb9\u754c \u5f00\u59cb\u5230 \u6839\u8282\u70b9\u5b9a\u4f4d-1\u300d\u7684\u5143\u7d20\n        root-&gt;left = myBuildTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left, inorder_root - 1);\n        // \u9012\u5f52\u5730\u6784\u9020\u53f3\u5b50\u6811\uff0c\u5e76\u8fde\u63a5\u5230\u6839\u8282\u70b9\n        // \u5148\u5e8f\u904d\u5386\u4e2d\u300c\u4ece \u5de6\u8fb9\u754c+1+\u5de6\u5b50\u6811\u8282\u70b9\u6570\u76ee \u5f00\u59cb\u5230 \u53f3\u8fb9\u754c\u300d\u7684\u5143\u7d20\u5c31\u5bf9\u5e94\u4e86\u4e2d\u5e8f\u904d\u5386\u4e2d\u300c\u4ece \u6839\u8282\u70b9\u5b9a\u4f4d+1 \u5230 \u53f3\u8fb9\u754c\u300d\u7684\u5143\u7d20\n        root-&gt;right = myBuildTree(preorder, inorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1, inorder_right);\n        return root;\n    }\n\n    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\n        int n = preorder.size();\n        // \u6784\u9020\u54c8\u5e0c\u6620\u5c04\uff0c\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u5b9a\u4f4d\u6839\u8282\u70b9\n        for (int i = 0; i &lt; n; ++i) {\n            index[inorder[i]] = i;\n        }\n        return myBuildTree(preorder, inorder, 0, n - 1, 0, n - 1);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_172","title":"\u611f\u60f3","text":"<p>\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\u8f85\u52a9\u5b9a\u4f4d\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4e0b\u6807\u4f4d\u7f6e</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#114-medium","title":"114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868(medium)","text":"<p>2023/9/1</p> <p>00 : 15 : 12</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_173","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 <code>root</code> \uff0c\u8bf7\u4f60\u5c06\u5b83\u5c55\u5f00\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\uff1a</p> <ul> <li>\u5c55\u5f00\u540e\u7684\u5355\u94fe\u8868\u5e94\u8be5\u540c\u6837\u4f7f\u7528 <code>TreeNode</code> \uff0c\u5176\u4e2d <code>right</code> \u5b50\u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u800c\u5de6\u5b50\u6307\u9488\u59cb\u7ec8\u4e3a <code>null</code> \u3002</li> <li>\u5c55\u5f00\u540e\u7684\u5355\u94fe\u8868\u5e94\u8be5\u4e0e\u4e8c\u53c9\u6811 \u5148\u5e8f\u904d\u5386 \u987a\u5e8f\u76f8\u540c\u3002</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [1,2,5,3,4,null,6]\n\u8f93\u51fa\uff1a[1,null,2,null,3,null,4,null,5,null,6]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [0]\n\u8f93\u51fa\uff1a[0]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u7ed3\u70b9\u6570\u5728\u8303\u56f4 <code>[0, 2000]</code> \u5185</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\uff08<code>O(1)</code> \u989d\u5916\u7a7a\u95f4\uff09\u5c55\u5f00\u8fd9\u68f5\u6811\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_174","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void flatten(TreeNode* root) {\n        if (root == nullptr)\n        {\n            return;\n        }\n        if (root-&gt;left == nullptr)\n        {\n            flatten(root-&gt;right);\n            return;\n        }\n        // TreeNode* temp = root-&gt;right;\n        // root-&gt;right = root-&gt;left;\n        flatten(root-&gt;left);\n        flatten(root-&gt;right);\n        swap(root-&gt;left, root-&gt;right);\n        TreeNode* it = root-&gt;right;\n        while (it-&gt;right != nullptr)\n        {\n            it = it-&gt;right;\n        }\n        it-&gt;right = root-&gt;left;\n        root-&gt;left = nullptr;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_175","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void flatten(TreeNode* root) {\n        TreeNode *curr = root;\n        while (curr != nullptr) {\n            if (curr-&gt;left != nullptr) {\n                auto next = curr-&gt;left;\n                auto predecessor = next;\n                while (predecessor-&gt;right != nullptr) {\n                    predecessor = predecessor-&gt;right;\n                }\n                predecessor-&gt;right = curr-&gt;right;\n                curr-&gt;left = nullptr;\n                curr-&gt;right = next;\n            }\n            curr = curr-&gt;right;\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_176","title":"\u611f\u60f3","text":"<p>\u8fd9\u9898\u6211\u81ea\u5df1\u7684\u601d\u8def\u611f\u89c9\u633a\u4e0d\u9519\u7684, \u4e3b\u8981\u662f\u505a\u5230\u4e86\"\u539f\u5730\"</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#121-easy","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a(easy)","text":"<p>2023/9/1</p> <p>00 : 11 : 29</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_177","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>prices</code> \uff0c\u5b83\u7684\u7b2c <code>i</code> \u4e2a\u5143\u7d20 <code>prices[i]</code> \u8868\u793a\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u4f60\u53ea\u80fd\u9009\u62e9 \u67d0\u4e00\u5929 \u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5e76\u9009\u62e9\u5728 \u672a\u6765\u7684\u67d0\u4e00\u4e2a\u4e0d\u540c\u7684\u65e5\u5b50 \u5356\u51fa\u8be5\u80a1\u7968\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u8fd4\u56de\u4f60\u53ef\u4ee5\u4ece\u8fd9\u7b14\u4ea4\u6613\u4e2d\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de <code>0</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a[7,1,5,3,6,4]\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002\n     \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aprices = [7,6,4,3,1]\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= prices.length &lt;= 105</code></li> <li><code>0 &lt;= prices[i] &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_178","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        stack&lt;int&gt; stk;\n        int buttom = -1;\n        int max = 0;\n        int size = prices.size();\n        for (int i = size-1; i &gt;= 0; --i)\n        {\n            if (stk.empty())\n            {\n                stk.push(prices[i]);\n                buttom = prices[i];\n            }\n            else\n            {\n                if (stk.top() &gt; prices[i])\n                {\n                    stk.push(prices[i]);\n                }\n                else\n                {\n                    while (!stk.empty() &amp;&amp; stk.top() &lt;= prices[i])\n                    {\n                        int income = buttom - stk.top();\n                        max = income &gt; max ? income : max;\n                        stk.pop();\n                    }\n                    if (stk.empty())\n                    {\n                        buttom = prices[i];\n                    }\n                    stk.push(prices[i]);\n                }\n            }\n        }\n        int income = buttom - stk.top();\n        max = income &gt; max ? income : max;\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_179","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int inf = 1e9;\n        int minprice = inf, maxprofit = 0;\n        for (int price: prices) {\n            maxprofit = max(maxprofit, price - minprice);\n            minprice = min(price, minprice);\n        }\n        return maxprofit;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_180","title":"\u611f\u60f3","text":"<p>\u524d\u4e9b\u5929\u5355\u8c03\u6808\u7684\u9898\u76ee\u5199\u591a\u4e86, \u770b\u5230\u8fd9\u9898\u5c31\u60f3\u5230\u4e86\u5355\u8c03\u6808, \u4f46\u662f\u5b9e\u9645\u4e0a\u53ea\u9700\u8981size\u4e3a1\u7684\u6808\u5373\u53ef, \u5c0f\u4e8e\u6808\u9876\u5219\u66ff\u6362, \u5927\u4e8e\u6808\u9876\u5219\u8ba1\u7b97</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#124-medium","title":"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c(medium)","text":"<p>2023/9/2</p> <p>00 : 35 : 23</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_181","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e8c\u53c9\u6811\u4e2d\u7684 \u8def\u5f84 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u8282\u70b9\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u5bf9\u76f8\u90bb\u8282\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\u3002\u540c\u4e00\u4e2a\u8282\u70b9\u5728\u4e00\u6761\u8def\u5f84\u5e8f\u5217\u4e2d \u81f3\u591a\u51fa\u73b0\u4e00\u6b21 \u3002\u8be5\u8def\u5f84 \u81f3\u5c11\u5305\u542b\u4e00\u4e2a \u8282\u70b9\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ecf\u8fc7\u6839\u8282\u70b9\u3002</p> <p>\u8def\u5f84\u548c \u662f\u8def\u5f84\u4e2d\u5404\u8282\u70b9\u503c\u7684\u603b\u548c\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8fd4\u56de\u5176 \u6700\u5927\u8def\u5f84\u548c \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [1,2,3]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u6700\u4f18\u8def\u5f84\u662f 2 -&gt; 1 -&gt; 3 \uff0c\u8def\u5f84\u548c\u4e3a 2 + 1 + 3 = 6\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [-10,9,20,null,null,15,7]\n\u8f93\u51fa\uff1a42\n\u89e3\u91ca\uff1a\u6700\u4f18\u8def\u5f84\u662f 15 -&gt; 20 -&gt; 7 \uff0c\u8def\u5f84\u548c\u4e3a 15 + 20 + 7 = 42\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u8303\u56f4\u662f <code>[1, 3 * 104]</code></li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_182","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int dfs(TreeNode* root , int&amp; res)\n    {\n        if (root == nullptr)\n        {\n            return 0;\n        }\n        int left = dfs(root-&gt;left, res);\n        int right = dfs(root-&gt;right, res);\n        int max = (left &gt; 0 ? left : 0) + (right &gt; 0 ? right : 0) + root-&gt;val;\n        res = res &gt; max ? res : max;\n        if (left &lt; 0 &amp;&amp; right &lt; 0)\n        {\n            return root-&gt;val;\n        }\n        return (left &gt; right ? left : right) + root-&gt;val;\n    }\n    int maxPathSum(TreeNode* root) {\n        int res = root-&gt;val;\n        dfs(root, res);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_183","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\nprivate:\n    int maxSum = INT_MIN;\n\npublic:\n    int maxGain(TreeNode* node) {\n        if (node == nullptr) {\n            return 0;\n        }\n\n        // \u9012\u5f52\u8ba1\u7b97\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u6700\u5927\u8d21\u732e\u503c\n        // \u53ea\u6709\u5728\u6700\u5927\u8d21\u732e\u503c\u5927\u4e8e 0 \u65f6\uff0c\u624d\u4f1a\u9009\u53d6\u5bf9\u5e94\u5b50\u8282\u70b9\n        int leftGain = max(maxGain(node-&gt;left), 0);\n        int rightGain = max(maxGain(node-&gt;right), 0);\n\n        // \u8282\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\u53d6\u51b3\u4e8e\u8be5\u8282\u70b9\u7684\u503c\u4e0e\u8be5\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u6700\u5927\u8d21\u732e\u503c\n        int priceNewpath = node-&gt;val + leftGain + rightGain;\n\n        // \u66f4\u65b0\u7b54\u6848\n        maxSum = max(maxSum, priceNewpath);\n\n        // \u8fd4\u56de\u8282\u70b9\u7684\u6700\u5927\u8d21\u732e\u503c\n        return node-&gt;val + max(leftGain, rightGain);\n    }\n\n    int maxPathSum(TreeNode* root) {\n        maxGain(root);\n        return maxSum;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_184","title":"\u611f\u60f3","text":"<p>\u548c\u9898\u89e3\u51e0\u4e4e\u4e00\u6837\u7684\u505a\u6cd5,  \u8fd9\u9053hard\u5e76\u6ca1\u6709\u5f88\u96be, \u91cd\u70b9\u662f\u601d\u8def\u8981\u5bf9</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#128-medium","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217(medium)","text":"<p>2023/9/2</p> <p>00 : 54 : 49</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_185","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6\u3002</p> <p>\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n)</code> \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [100,4,200,1,3,2]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u6700\u957f\u6570\u5b57\u8fde\u7eed\u5e8f\u5217\u662f [1, 2, 3, 4]\u3002\u5b83\u7684\u957f\u5ea6\u4e3a 4\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [0,3,7,2,5,8,4,6,0,1]\n\u8f93\u51fa\uff1a9\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= nums.length &lt;= 105</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_186","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        // \u524d\u5927\u540e\u5c0f\n        unordered_map&lt;int, int&gt; hash1;\n        // \u524d\u5c0f\u540e\u5927\n        unordered_map&lt;int, int&gt; hash2;\n\n        int size = nums.size();\n        int max = 0;\n        for (int i = 0; i &lt; size; ++i)\n        {\n            if (hash1.find(nums[i]) != hash1.end() || hash2.find(nums[i]) != hash2.end())\n            {\n                continue;\n            }\n            auto it_hash1 = hash1.find(nums[i]-1);\n            auto it_hash2 = hash2.find(nums[i]+1);\n            if (it_hash1 != hash1.end())\n            {\n                if (it_hash2 != hash2.end())\n                {\n                    int small = hash1[nums[i]-1];\n                    int large = hash2[nums[i]+1];\n                    hash1.erase(it_hash1);\n                    hash1.erase(hash1.find(large));\n                    hash1.insert({large, small});\n                    hash2.erase(it_hash2);\n                    hash2.erase(hash2.find(small));\n                    hash2.insert({small, large});\n                    max = (large - small + 1) &gt; max ? (large - small + 1) : max;\n                }\n                else\n                {\n                    int small = hash1[nums[i]-1];\n                    hash1.erase(it_hash1);\n                    hash1.insert({nums[i], small});\n                    hash2[small]++;\n                    max = (nums[i] - small + 1) &gt; max ? (nums[i] - small + 1) : max;\n                }\n            }\n            else\n            {\n                if (it_hash2 != hash2.end())\n                {\n                    int large = hash2[nums[i]+1];\n                    hash1[large]--;\n                    hash2.erase(it_hash2);\n                    hash2.insert({nums[i], large});\n                    max = (large - nums[i] + 1) &gt; max ? (large - nums[i] + 1) : max;\n                }\n                else\n                {\n                    hash1.insert({nums[i], nums[i]});\n                    hash2.insert({nums[i], nums[i]});\n                    max = 1 &gt; max ? 1 : max;\n                }\n            }\n        }\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_187","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        unordered_set&lt;int&gt; num_set;\n        for (const int&amp; num : nums) {\n            num_set.insert(num);\n        }\n\n        int longestStreak = 0;\n\n        for (const int&amp; num : num_set) {\n            if (!num_set.count(num - 1)) {\n                int currentNum = num;\n                int currentStreak = 1;\n\n                while (num_set.count(currentNum + 1)) {\n                    currentNum += 1;\n                    currentStreak += 1;\n                }\n\n                longestStreak = max(longestStreak, currentStreak);\n            }\n        }\n\n        return longestStreak;           \n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_188","title":"\u611f\u60f3","text":"<p>\u679c\u7136\u662fhash\u8868, \u96be\u5ea6\u4e0d\u5927\u4f46\u662f\u6709\u5f88\u591ahack, \u6240\u4ee5\u82b1\u4e86\u5f88\u957f\u65f6\u95f4</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#136-easy","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57(easy)","text":"<p>2023/9/2</p> <p>00 : 25 : 04</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_189","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u975e\u7a7a \u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u4e14\u8be5\u7b97\u6cd5\u53ea\u4f7f\u7528\u5e38\u91cf\u989d\u5916\u7a7a\u95f4\u3002</p> <p>\u793a\u4f8b 1 \uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,2,1]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 2 \uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [4,1,2,1,2]\n\u8f93\u51fa\uff1a4\n</code></pre> <p>\u793a\u4f8b 3 \uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li> <li><code>-3 * 104 &lt;= nums[i] &lt;= 3 * 104</code></li> <li>\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_190","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums) {\n        int res = 0;\n        for (auto&amp; i : nums)\n        {\n            res ^= i;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_191","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_192","title":"\u611f\u60f3","text":"<p>\u9898\u76ee\u8bf4\u65f6\u95f4\u8981O(n),\u7a7a\u95f4\u53ea\u80fd\u5e38\u6570, \u5b9e\u5728\u60f3\u4e0d\u5230\u8fd9\u6837\u7684\u7b97\u6cd5, \u4e8e\u662f\u770b\u4e86\u9898\u89e3, \u8bf4\u662f\u7528\u5f02\u6216, \u8305\u585e\u987f\u5f00</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#139-medium","title":"139. \u5355\u8bcd\u62c6\u5206(medium)","text":"<p>2023/8/24</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_193","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 <code>wordDict</code> \u4f5c\u4e3a\u5b57\u5178\u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5229\u7528\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u62fc\u63a5\u51fa <code>s</code> \u3002</p> <p>\u6ce8\u610f\uff1a\u4e0d\u8981\u6c42\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u5e76\u4e14\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n\u8f93\u51fa: true\n\u89e3\u91ca: \u8fd4\u56de true \u56e0\u4e3a \"leetcode\" \u53ef\u4ee5\u7531 \"leet\" \u548c \"code\" \u62fc\u63a5\u6210\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n\u8f93\u51fa: true\n\u89e3\u91ca: \u8fd4\u56de true \u56e0\u4e3a \"applepenapple\" \u53ef\u4ee5\u7531 \"apple\" \"pen\" \"apple\" \u62fc\u63a5\u6210\u3002\n     \u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n\u8f93\u51fa: false\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li> <li><code>s</code> \u548c <code>wordDict[i]</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> <li><code>wordDict</code> \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32 \u4e92\u4e0d\u76f8\u540c</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_194","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool Compare(string s, string&amp; word)\n    {\n        int size = word.size();\n        for (int i = 0; i &lt; size; ++i)\n        {\n            if (s[i] != word[i])\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    bool wordBreak(string s, vector&lt;string&gt;&amp; wordDict) {\n        int len = s.size();\n        bool* dp = new bool[len + 1]; // dp[i]\u8868\u793a\u524di\u4e2aok\n        dp[0] = true;\n        for (int i = 1; i &lt;= len; ++i)\n        {\n            dp[i] = false;\n            for (auto &amp; word : wordDict)\n            {\n                int size = word.size();\n                if (size &lt;= i &amp;&amp; dp[i - size] &amp;&amp; Compare(s.substr(i - size), word))\n                {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        return dp[len];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_195","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool wordBreak(string s, vector&lt;string&gt;&amp; wordDict) {\n        auto wordDictSet = unordered_set &lt;string&gt; ();\n        for (auto word: wordDict) {\n            wordDictSet.insert(word);\n        }\n\n        auto dp = vector &lt;bool&gt; (s.size() + 1);\n        dp[0] = true;\n        for (int i = 1; i &lt;= s.size(); ++i) {\n            for (int j = 0; j &lt; i; ++j) {\n                if (dp[j] &amp;&amp; wordDictSet.find(s.substr(j, i - j)) != wordDictSet.end()) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n\n        return dp[s.size()];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_196","title":"\u611f\u60f3","text":"<p>\u540c\u6837\u662fdp\uff0c\u6bd4\u5b98\u65b9\u9898\u89e3\u5feb\u4e867\u500d\uff0c\u5b98\u65b9\u9898\u89e3\u7684\u7b2c\u4e8c\u4e2afor\u5faa\u73af\u611f\u89c9\u6ca1\u6709\u610f\u4e49\uff0c\u5f88\u6d6a\u8d39\u65f6\u95f4</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#141-easy","title":"141. \u73af\u5f62\u94fe\u8868(easy)","text":"<p>2023/9/2</p> <p>00 : 05 : 45</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_197","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a <code>next</code> \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 <code>pos</code> \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u6ce8\u610f\uff1a<code>pos</code> \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012 \u3002\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af \uff0c\u5219\u8fd4\u56de <code>true</code> \u3002 \u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2], pos = 0\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1], pos = -1\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u8303\u56f4\u662f <code>[0, 104]</code></li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li><code>pos</code> \u4e3a <code>-1</code> \u6216\u8005\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a \u6709\u6548\u7d22\u5f15 \u3002</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u7528 <code>O(1)</code>\uff08\u5373\uff0c\u5e38\u91cf\uff09\u5185\u5b58\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_198","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* p1, *p2;\n        p1 = p2 = head;\n        while (p1 != nullptr &amp;&amp; p2 != nullptr)\n        {\n            p2 = p2-&gt;next;\n            if (p2 == nullptr)\n            {\n                return false;\n            }\n            else if (p2 == p1)\n            {\n                return true;\n            }\n            p2 = p2-&gt;next;\n            p1 = p1-&gt;next;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_199","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool hasCycle(ListNode* head) {\n        if (head == nullptr || head-&gt;next == nullptr) {\n            return false;\n        }\n        ListNode* slow = head;\n        ListNode* fast = head-&gt;next;\n        while (slow != fast) {\n            if (fast == nullptr || fast-&gt;next == nullptr) {\n                return false;\n            }\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_200","title":"\u611f\u60f3","text":"<p>\u4f9d\u7a00\u8bb0\u5f97\u4ee5\u524d\u5728\u5b66\u6821\u91cc\u6709\u5b66\u5230\u8fc7\u5feb\u6162\u6307\u9488\u7684\u65b9\u6cd5, \u8111\u6d4b\u53ef\u884c\u4e4b\u540e\u76f4\u63a5\u5199\u4e86, \u53ea\u7528\u4e86\u4e94\u5206\u949f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#142-iimedium","title":"142. \u73af\u5f62\u94fe\u8868 II(medium)","text":"<p>2023/9/2</p> <p>00 : 18 : 57</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_201","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9  <code>head</code> \uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de <code>null</code>\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a <code>next</code> \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 <code>pos</code> \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c <code>pos</code> \u662f <code>-1</code>\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\u6ce8\u610f\uff1a<code>pos</code> \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002</p> <p>\u4e0d\u5141\u8bb8\u4fee\u6539 \u94fe\u8868\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1\n\u8f93\u51fa\uff1a\u8fd4\u56de\u7d22\u5f15\u4e3a 1 \u7684\u94fe\u8868\u8282\u70b9\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2], pos = 0\n\u8f93\u51fa\uff1a\u8fd4\u56de\u7d22\u5f15\u4e3a 0 \u7684\u94fe\u8868\u8282\u70b9\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1], pos = -1\n\u8f93\u51fa\uff1a\u8fd4\u56de null\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u8303\u56f4\u5728\u8303\u56f4 <code>[0, 104]</code> \u5185</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li><code>pos</code> \u7684\u503c\u4e3a <code>-1</code> \u6216\u8005\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u6709\u6548\u7d22\u5f15</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u662f\u5426\u53ef\u4ee5\u4f7f\u7528 <code>O(1)</code> \u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_202","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        unordered_set&lt;ListNode*&gt; set;\n        ListNode* p = head;\n        while (p != NULL)\n        {\n            if (set.find(p) == set.end())\n            {\n                set.insert(p);\n                p = p-&gt;next;\n            }\n            else\n            {\n                return p;\n            }\n        }\n        return NULL;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_203","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode *slow = head, *fast = head;\n        while (fast != nullptr) {\n            slow = slow-&gt;next;\n            if (fast-&gt;next == nullptr) {\n                return nullptr;\n            }\n            fast = fast-&gt;next-&gt;next;\n            if (fast == slow) {\n                ListNode *ptr = head;\n                while (ptr != slow) {\n                    ptr = ptr-&gt;next;\n                    slow = slow-&gt;next;\n                }\n                return ptr;\n            }\n        }\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_204","title":"\u611f\u60f3","text":"<p>\u4f9d\u7136\u53ef\u4ee5\u7528\u5feb\u6162\u6307\u9488, \u6839\u636e\u6570\u5b66\u63a8\u5bfc, \u5728\u76f8\u9047\u540e\u4fdd\u6301slow\u7ee7\u7eed\u8fd0\u52a8, </p> <p>\u540c\u65f6\u65b0\u589e\u4e00\u4e2a\u901f\u5ea6\u4e3a1\u7684\u6307\u9488\u4ece\u5934\u5f00\u59cb\u8fd0\u52a8, \u4ed6\u4eec\u76f8\u9047\u7684\u70b9\u5fc5\u4e3a\u73af\u8d77\u70b9</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#146-lru-medium","title":"146. LRU \u7f13\u5b58(medium)","text":"<p>2023/9/3</p> <p>01 : 11 : 05</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_205","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u6ee1\u8db3 LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58 \u7ea6\u675f\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u5b9e\u73b0 <code>LRUCache</code> \u7c7b\uff1a</p> <ul> <li><code>LRUCache(int capacity)</code> \u4ee5 \u6b63\u6574\u6570 \u4f5c\u4e3a\u5bb9\u91cf <code>capacity</code> \u521d\u59cb\u5316 LRU \u7f13\u5b58</li> <li><code>int get(int key)</code> \u5982\u679c\u5173\u952e\u5b57 <code>key</code> \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u8fd4\u56de\u5173\u952e\u5b57\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de <code>-1</code> \u3002</li> <li><code>void put(int key, int value)</code> \u5982\u679c\u5173\u952e\u5b57 <code>key</code> \u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u53d8\u66f4\u5176\u6570\u636e\u503c <code>value</code> \uff1b\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u5411\u7f13\u5b58\u4e2d\u63d2\u5165\u8be5\u7ec4 <code>key-value</code> \u3002\u5982\u679c\u63d2\u5165\u64cd\u4f5c\u5bfc\u81f4\u5173\u952e\u5b57\u6570\u91cf\u8d85\u8fc7 <code>capacity</code> \uff0c\u5219\u5e94\u8be5 \u9010\u51fa \u6700\u4e45\u672a\u4f7f\u7528\u7684\u5173\u952e\u5b57\u3002</li> </ul> <p>\u51fd\u6570 <code>get</code> \u548c <code>put</code> \u5fc5\u987b\u4ee5 <code>O(1)</code> \u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u8fd0\u884c\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n\u8f93\u51fa\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n\u89e3\u91ca\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // \u7f13\u5b58\u662f {1=1}\nlRUCache.put(2, 2); // \u7f13\u5b58\u662f {1=1, 2=2}\nlRUCache.get(1);    // \u8fd4\u56de 1\nlRUCache.put(3, 3); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5173\u952e\u5b57 2 \u4f5c\u5e9f\uff0c\u7f13\u5b58\u662f {1=1, 3=3}\nlRUCache.get(2);    // \u8fd4\u56de -1 (\u672a\u627e\u5230)\nlRUCache.put(4, 4); // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5173\u952e\u5b57 1 \u4f5c\u5e9f\uff0c\u7f13\u5b58\u662f {4=4, 3=3}\nlRUCache.get(1);    // \u8fd4\u56de -1 (\u672a\u627e\u5230)\nlRUCache.get(3);    // \u8fd4\u56de 3\nlRUCache.get(4);    // \u8fd4\u56de 4\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= capacity &lt;= 3000</code></li> <li><code>0 &lt;= key &lt;= 10000</code></li> <li><code>0 &lt;= value &lt;= 105</code></li> <li>\u6700\u591a\u8c03\u7528 <code>2 * 105</code> \u6b21 <code>get</code> \u548c <code>put</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_206","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class LRUCache {\n    struct Node\n    {\n        int key, val;\n        Node* prev, *next;\n        Node(int k = 0, int v = 0, Node* p = nullptr, Node* n = nullptr) : key (k), val(v), prev(p), next(n) {} \n    };\npublic:\n    LRUCache(int capacity) {\n        m_capacity = capacity;\n        m_size = 0;\n        m_head = new Node();\n        m_tail = new Node();\n        m_head-&gt;next = m_tail;\n        m_tail-&gt;prev = m_head;\n    }\n\n    int get(int key) {\n        auto it = m_hash.find(key);\n        if (it != m_hash.end())\n        {\n            // \u79fb\u5230\u6700\u524d\n            Node* p = it-&gt;second;\n            p-&gt;prev-&gt;next = p-&gt;next;\n            p-&gt;next-&gt;prev = p-&gt;prev;\n            Node* tmp = m_head-&gt;next;\n            p-&gt;next = tmp;\n            tmp-&gt;prev = p;\n            p-&gt;prev = m_head;\n            m_head-&gt;next = p;\n            // ////\n            return p-&gt;val;\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    void put(int key, int value) {\n        auto it = m_hash.find(key);\n        Node *p;\n        if (it != m_hash.end())\n        {\n            // \u79fb\u5230\u6700\u524d\n            p = it-&gt;second;\n            p-&gt;prev-&gt;next = p-&gt;next;\n            p-&gt;next-&gt;prev = p-&gt;prev;\n            p-&gt;val = value;\n        }\n        else\n        {\n            if (m_size &gt;= m_capacity)\n            {\n                Node* toErase = m_tail-&gt;prev;\n                m_size--;\n                m_hash.erase(m_hash.find(toErase-&gt;key));\n                toErase-&gt;prev-&gt;next = toErase-&gt;next;\n                toErase-&gt;next-&gt;prev = toErase-&gt;prev;\n                delete toErase;\n            }\n            m_size++;\n            p = new Node(key, value);\n            m_hash.insert({key, p});\n        }\n        Node* tmp = m_head-&gt;next;\n        p-&gt;next = tmp;\n        tmp-&gt;prev = p;\n        p-&gt;prev = m_head;\n        m_head-&gt;next = p;\n    }\nprivate:\n    int m_capacity;\n    int m_size;\n    unordered_map&lt;int, Node*&gt; m_hash;\n    Node* m_head, *m_tail;\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj-&gt;get(key);\n * obj-&gt;put(key,value);\n */\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_207","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>struct DLinkedNode {\n    int key, value;\n    DLinkedNode* prev;\n    DLinkedNode* next;\n    DLinkedNode(): key(0), value(0), prev(nullptr), next(nullptr) {}\n    DLinkedNode(int _key, int _value): key(_key), value(_value), prev(nullptr), next(nullptr) {}\n};\n\nclass LRUCache {\nprivate:\n    unordered_map&lt;int, DLinkedNode*&gt; cache;\n    DLinkedNode* head;\n    DLinkedNode* tail;\n    int size;\n    int capacity;\n\npublic:\n    LRUCache(int _capacity): capacity(_capacity), size(0) {\n        // \u4f7f\u7528\u4f2a\u5934\u90e8\u548c\u4f2a\u5c3e\u90e8\u8282\u70b9\n        head = new DLinkedNode();\n        tail = new DLinkedNode();\n        head-&gt;next = tail;\n        tail-&gt;prev = head;\n    }\n\n    int get(int key) {\n        if (!cache.count(key)) {\n            return -1;\n        }\n        // \u5982\u679c key \u5b58\u5728\uff0c\u5148\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9a\u4f4d\uff0c\u518d\u79fb\u5230\u5934\u90e8\n        DLinkedNode* node = cache[key];\n        moveToHead(node);\n        return node-&gt;value;\n    }\n\n    void put(int key, int value) {\n        if (!cache.count(key)) {\n            // \u5982\u679c key \u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\n            DLinkedNode* node = new DLinkedNode(key, value);\n            // \u6dfb\u52a0\u8fdb\u54c8\u5e0c\u8868\n            cache[key] = node;\n            // \u6dfb\u52a0\u81f3\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\n            addToHead(node);\n            ++size;\n            if (size &gt; capacity) {\n                // \u5982\u679c\u8d85\u51fa\u5bb9\u91cf\uff0c\u5220\u9664\u53cc\u5411\u94fe\u8868\u7684\u5c3e\u90e8\u8282\u70b9\n                DLinkedNode* removed = removeTail();\n                // \u5220\u9664\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u9879\n                cache.erase(removed-&gt;key);\n                // \u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\n                delete removed;\n                --size;\n            }\n        }\n        else {\n            // \u5982\u679c key \u5b58\u5728\uff0c\u5148\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9a\u4f4d\uff0c\u518d\u4fee\u6539 value\uff0c\u5e76\u79fb\u5230\u5934\u90e8\n            DLinkedNode* node = cache[key];\n            node-&gt;value = value;\n            moveToHead(node);\n        }\n    }\n\n    void addToHead(DLinkedNode* node) {\n        node-&gt;prev = head;\n        node-&gt;next = head-&gt;next;\n        head-&gt;next-&gt;prev = node;\n        head-&gt;next = node;\n    }\n\n    void removeNode(DLinkedNode* node) {\n        node-&gt;prev-&gt;next = node-&gt;next;\n        node-&gt;next-&gt;prev = node-&gt;prev;\n    }\n\n    void moveToHead(DLinkedNode* node) {\n        removeNode(node);\n        addToHead(node);\n    }\n\n    DLinkedNode* removeTail() {\n        DLinkedNode* node = tail-&gt;prev;\n        removeNode(node);\n        return node;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_208","title":"\u611f\u60f3","text":"<p>\u8bb0\u4f4f\u51e0\u4e2a\u7ec6\u8282:</p> <ol> <li>\u81ea\u5df1\u5b9a\u4e49\u94fe\u8868</li> <li>dummy node\u9996\u5c3e</li> <li>hash\u5b58\u6307\u9488\u65b9\u4fbf\u5b9a\u4f4d</li> </ol>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#148-medium","title":"148. \u6392\u5e8f\u94fe\u8868(medium)","text":"<p>2023/9/3</p> <p>00 : 48 : 32</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_209","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u94fe\u8868\u7684\u5934\u7ed3\u70b9 <code>head</code> \uff0c\u8bf7\u5c06\u5176\u6309 \u5347\u5e8f \u6392\u5217\u5e76\u8fd4\u56de \u6392\u5e8f\u540e\u7684\u94fe\u8868 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [4,2,1,3]\n\u8f93\u51fa\uff1a[1,2,3,4]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [-1,5,3,4,0]\n\u8f93\u51fa\uff1a[-1,0,3,4,5]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728\u8303\u56f4 <code>[0, 5 * 104]</code> \u5185</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u5728 <code>O(n log n)</code> \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_210","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeSort(ListNode* p1, ListNode* p2)\n    {\n        if (p1 == nullptr)\n        {\n            return p2;\n        }\n        if (p2 == nullptr)\n        {\n            return p1;\n        }\n        ListNode *res_head = nullptr, *res_tail = nullptr;\n        if (p1-&gt;val &lt; p2-&gt;val)\n        {\n            res_head = p1;\n            p1 = p1-&gt;next;\n            res_tail = res_head;\n        }\n        else\n        {\n            res_head = p2;\n            p2 = p2-&gt;next;\n            res_tail = res_head;\n        }\n\n        while (p1 != nullptr || p2 != nullptr)\n        {\n            if (p1 == nullptr)\n            {\n                res_tail-&gt;next = p2;\n                return res_head;\n            }\n            if (p2 == nullptr)\n            {\n                res_tail-&gt;next = p1;\n                return res_head;\n            }\n            if (p1-&gt;val &lt; p2-&gt;val)\n            {\n                res_tail-&gt;next = p1;\n                p1 = p1-&gt;next;\n            }\n            else\n            {\n                res_tail-&gt;next = p2;\n                p2 = p2-&gt;next;\n            }\n            res_tail = res_tail-&gt;next;\n        }\n        return res_head;\n    }\n\n    ListNode* FindMedium(ListNode* head)\n    {\n        if (head == nullptr || head-&gt;next == nullptr)\n        {\n            return head;\n        }\n        ListNode *p1 = head, *p2 = head-&gt;next;\n        while (p2 &amp;&amp; p2-&gt;next)\n        {\n            p1 = p1-&gt;next;\n            p2 = p2-&gt;next-&gt;next;\n        }\n        return p1;\n    }\n\n    ListNode* sortList(ListNode* head) {\n        if (head == nullptr || head-&gt;next == nullptr)\n        {\n            return head;\n        }\n        ListNode* medium  = FindMedium(head);\n        ListNode* p1 = head, *p2 = medium-&gt;next;\n        medium-&gt;next = nullptr;\n\n        ListNode *list1 = sortList(p1);\n        ListNode *list2 = sortList(p2);\n\n        return mergeSort(list1, list2);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_211","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\nprivate:\n  ListNode* getMedian(ListNode* head) {\n    if (!head || !head-&gt;next) return head;\n\n    ListNode *slow = head;\n    ListNode *fast = head-&gt;next;\n    while (fast &amp;&amp; fast-&gt;next) {\n      slow = slow-&gt;next;\n      fast = fast-&gt;next-&gt;next;\n    }\n    return slow;\n  }\n\n  ListNode* mergeSortedList(ListNode* head1, ListNode* head2) {\n    if (!head1 || !head2) return head1 ? head1 : head2;\n\n    if (head1-&gt;val &lt; head2-&gt;val) {\n      head1-&gt;next = mergeSortedList(head1-&gt;next, head2);\n      return head1;\n    } else {\n      head2-&gt;next = mergeSortedList(head1, head2-&gt;next);\n      return head2;\n    }\n  }\n\npublic:\n  ListNode* sortList(ListNode* head) {\n    if (!head || !head-&gt;next) return head;\n\n    ListNode *mid = getMedian(head);\n    ListNode *next = mid-&gt;next;\n    mid-&gt;next = nullptr;\n\n    ListNode *list1 = sortList(head);\n    ListNode *list2 = sortList(next);\n    return mergeSortedList(list1, list2);\n  }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_212","title":"\u611f\u60f3","text":"<p>\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f, \u5229\u7528\u4e24\u500d\u901f\u6307\u9488\u5bfb\u627e\u4e2d\u70b9</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#152-medium","title":"152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4(medium)","text":"<p>2023/9/3</p> <p>01 : 07 : 30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_213","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002</p> <p>\u6d4b\u8bd5\u7528\u4f8b\u7684\u7b54\u6848\u662f\u4e00\u4e2a 32-\u4f4d \u6574\u6570\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: nums = [2,3,-2,4]\n\u8f93\u51fa: 6\n\u89e3\u91ca: \u5b50\u6570\u7ec4 [2,3] \u6709\u6700\u5927\u4e58\u79ef 6\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: nums = [-2,0,-1]\n\u8f93\u51fa: 0\n\u89e3\u91ca: \u7ed3\u679c\u4e0d\u80fd\u4e3a 2, \u56e0\u4e3a [-2,-1] \u4e0d\u662f\u5b50\u6570\u7ec4\u3002\n</code></pre> <p>\u63d0\u793a:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li><code>nums</code> \u7684\u4efb\u4f55\u524d\u7f00\u6216\u540e\u7f00\u7684\u4e58\u79ef\u90fd \u4fdd\u8bc1 \u662f\u4e00\u4e2a 32-\u4f4d \u6574\u6570</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_214","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxProduct(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        int product = nums[0];\n        int max = product;\n        int last = 0;\n        int lastIndex = -1;\n        for (int i = 1; i &lt; size ; ++i)\n        {\n            if (nums[i] &gt; 0)\n            {\n                if (product == 0)\n                {\n                    product = nums[i];\n                }\n                else\n                {\n                    product *= nums[i];\n                }\n            }\n            else if (nums[i] == 0)\n            {\n                max = max &gt; 0 ? max : 0;\n                max = product &gt; max ? product : max;\n                product = 0;\n            }\n            else\n            {\n                if (product &lt; 0)\n                {\n                    product *= nums[i];\n                    max = product &gt; max ? product : max;\n                }\n                else if (product == 0)\n                {\n                    product = nums[i];\n                }\n                else\n                {\n                    max = product &gt; max ? product : max;\n                    product *= nums[i];\n                }\n                last = product;\n                lastIndex = i;\n            }\n        }\n        if (last &lt; 0 &amp;&amp; lastIndex != size-1 &amp;&amp; product &lt; 0)\n        {\n            product /= last;\n        }\n        max = product &gt; max ? product : max;\n\n        // \u53cd\u5411\n        product = nums[size - 1];\n        last = 0;\n        lastIndex = -1;\n        for (int i = size - 2; i &gt;= 0 ; --i)\n        {\n            if (nums[i] &gt; 0)\n            {\n                if (product == 0)\n                {\n                    product = nums[i];\n                }\n                else\n                {\n                    product *= nums[i];\n                }\n            }\n            else if (nums[i] == 0)\n            {\n                max = max &gt; 0 ? max : 0;\n                max = product &gt; max ? product : max;\n                product = 0;\n            }\n            else\n            {\n                if (product &lt; 0)\n                {\n                    product *= nums[i];\n                    max = product &gt; max ? product : max;\n                }\n                else if (product == 0)\n                {\n                    product = nums[i];\n                }\n                else\n                {\n                    max = product &gt; max ? product : max;\n                    product *= nums[i];\n                }\n                last = product;\n                lastIndex = i;\n            }\n        }\n        if (last &lt; 0 &amp;&amp; lastIndex != 0 &amp;&amp; product &lt; 0)\n        {\n            product /= last;\n        }\n        max = product &gt; max ? product : max;\n        return max;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_215","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maxProduct(vector&lt;int&gt;&amp; nums) {\n        int maxF = nums[0], minF = nums[0], ans = nums[0];\n        for (int i = 1; i &lt; nums.size(); ++i) {\n            int mx = maxF, mn = minF;\n            maxF = max(mx * nums[i], max(nums[i], mn * nums[i]));\n            minF = min(mn * nums[i], min(nums[i], mx * nums[i]));\n            ans = max(maxF, ans);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_216","title":"\u611f\u60f3","text":"<p>\u52a8\u6001\u89c4\u5212\u4f18\u5316\u540e\u53ea\u9700\u8981\u5e38\u6570\u7a7a\u95f4, \u5c31\u662f\u5b58\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5305\u542b\u5176\u81ea\u8eab\u7684\u6700\u5927\u6700\u5c0f\u503c</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#155-medium","title":"155. \u6700\u5c0f\u6808(medium)","text":"<p>2023/9/3</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_217","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 <code>push</code> \uff0c<code>pop</code> \uff0c<code>top</code> \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002</p> <p>\u5b9e\u73b0 <code>MinStack</code> \u7c7b:</p> <ul> <li><code>MinStack()</code> \u521d\u59cb\u5316\u5806\u6808\u5bf9\u8c61\u3002</li> <li><code>void push(int val)</code> \u5c06\u5143\u7d20val\u63a8\u5165\u5806\u6808\u3002</li> <li><code>void pop()</code> \u5220\u9664\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002</li> <li><code>int top()</code> \u83b7\u53d6\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002</li> <li><code>int getMin()</code> \u83b7\u53d6\u5806\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002</li> </ul> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165\uff1a\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\n\u8f93\u51fa\uff1a\n[null,null,null,null,-3,null,0,-2]\n\n\u89e3\u91ca\uff1a\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; \u8fd4\u56de -3.\nminStack.pop();\nminStack.top();      --&gt; \u8fd4\u56de 0.\nminStack.getMin();   --&gt; \u8fd4\u56de -2.\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>-231 &lt;= val &lt;= 231 - 1</code></li> <li><code>pop</code>\u3001<code>top</code> \u548c <code>getMin</code> \u64cd\u4f5c\u603b\u662f\u5728 \u975e\u7a7a\u6808 \u4e0a\u8c03\u7528</li> <li><code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>\u6700\u591a\u88ab\u8c03\u7528 <code>3 * 104</code> \u6b21</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_218","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class MinStack {\npublic:\n    MinStack() {\n\n    }\n\n    void push(int val) {\n        stk.push(val);\n        if (map.find(val) == map.end())\n        {\n            map.insert({val, 1});\n        }\n        else\n        {\n            map[val]++;\n        }\n    }\n\n    void pop() {\n        // set.erase(set.find(stk.top()));\n        map[stk.top()]--;\n        if (map[stk.top()] == 0)\n        {\n            map.erase(map.find(stk.top()));\n        }\n        stk.pop();\n    }\n\n    int top() {\n        return stk.top();\n    }\n\n    int getMin() {\n        return map.begin()-&gt;first;\n    }\nprivate:\n    stack&lt;int&gt; stk;\n    map&lt;int, int&gt; map;\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj-&gt;push(val);\n * obj-&gt;pop();\n * int param_3 = obj-&gt;top();\n * int param_4 = obj-&gt;getMin();\n */\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_219","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class MinStack {\n    stack&lt;int&gt; x_stack;\n    stack&lt;int&gt; min_stack;\npublic:\n    MinStack() {\n        min_stack.push(INT_MAX);\n    }\n\n    void push(int x) {\n        x_stack.push(x);\n        min_stack.push(min(min_stack.top(), x));\n    }\n\n    void pop() {\n        x_stack.pop();\n        min_stack.pop();\n    }\n\n    int top() {\n        return x_stack.top();\n    }\n\n    int getMin() {\n        return min_stack.top();\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_220","title":"\u611f\u60f3","text":"<p>\u7adf\u7136\u771f\u7684\u53ef\u4ee5\u7528stl, \u7ef4\u62a4\u4e24\u4e2a\u6808\u548c\u7ef4\u62a4\u4e00\u4e2a\u6808\u4e00\u4e2a\u7ea2\u9ed1\u6811\u4e5f\u5dee\u4e0d\u591a\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#160-easy","title":"160. \u76f8\u4ea4\u94fe\u8868(easy)","text":"<p>2023/9/3</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_221","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>headA</code> \u548c <code>headB</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u4e0d\u5b58\u5728\u76f8\u4ea4\u8282\u70b9\uff0c\u8fd4\u56de <code>null</code> \u3002</p> <p>\u56fe\u793a\u4e24\u4e2a\u94fe\u8868\u5728\u8282\u70b9 <code>c1</code> \u5f00\u59cb\u76f8\u4ea4\uff1a</p> <p></p> <p>\u9898\u76ee\u6570\u636e \u4fdd\u8bc1 \u6574\u4e2a\u94fe\u5f0f\u7ed3\u6784\u4e2d\u4e0d\u5b58\u5728\u73af\u3002</p> <p>\u6ce8\u610f\uff0c\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u94fe\u8868\u5fc5\u987b \u4fdd\u6301\u5176\u539f\u59cb\u7ed3\u6784 \u3002</p> <p>\u81ea\u5b9a\u4e49\u8bc4\u6d4b\uff1a</p> <p>\u8bc4\u6d4b\u7cfb\u7edf \u7684\u8f93\u5165\u5982\u4e0b\uff08\u4f60\u8bbe\u8ba1\u7684\u7a0b\u5e8f \u4e0d\u9002\u7528 \u6b64\u8f93\u5165\uff09\uff1a</p> <ul> <li><code>intersectVal</code> - \u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u4e0d\u5b58\u5728\u76f8\u4ea4\u8282\u70b9\uff0c\u8fd9\u4e00\u503c\u4e3a <code>0</code></li> <li><code>listA</code> - \u7b2c\u4e00\u4e2a\u94fe\u8868</li> <li><code>listB</code> - \u7b2c\u4e8c\u4e2a\u94fe\u8868</li> <li><code>skipA</code> - \u5728 <code>listA</code> \u4e2d\uff08\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff09\u8df3\u5230\u4ea4\u53c9\u8282\u70b9\u7684\u8282\u70b9\u6570</li> <li><code>skipB</code> - \u5728 <code>listB</code> \u4e2d\uff08\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff09\u8df3\u5230\u4ea4\u53c9\u8282\u70b9\u7684\u8282\u70b9\u6570</li> </ul> <p>\u8bc4\u6d4b\u7cfb\u7edf\u5c06\u6839\u636e\u8fd9\u4e9b\u8f93\u5165\u521b\u5efa\u94fe\u5f0f\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u5c06\u4e24\u4e2a\u5934\u8282\u70b9 <code>headA</code> \u548c <code>headB</code> \u4f20\u9012\u7ed9\u4f60\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u7a0b\u5e8f\u80fd\u591f\u6b63\u786e\u8fd4\u56de\u76f8\u4ea4\u8282\u70b9\uff0c\u90a3\u4e48\u4f60\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u88ab \u89c6\u4f5c\u6b63\u786e\u7b54\u6848 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aintersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n\u8f93\u51fa\uff1aIntersected at '8'\n\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 8 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\n\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [4,1,8,4,5]\uff0c\u94fe\u8868 B \u4e3a [5,6,1,8,4,5]\u3002\n\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 2 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\u3002\n\u2014 \u8bf7\u6ce8\u610f\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e0d\u4e3a 1\uff0c\u56e0\u4e3a\u5728\u94fe\u8868 A \u548c\u94fe\u8868 B \u4e4b\u4e2d\u503c\u4e3a 1 \u7684\u8282\u70b9 (A \u4e2d\u7b2c\u4e8c\u4e2a\u8282\u70b9\u548c B \u4e2d\u7b2c\u4e09\u4e2a\u8282\u70b9) \u662f\u4e0d\u540c\u7684\u8282\u70b9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u5728\u5185\u5b58\u4e2d\u6307\u5411\u4e24\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u800c\u94fe\u8868 A \u548c\u94fe\u8868 B \u4e2d\u503c\u4e3a 8 \u7684\u8282\u70b9 (A \u4e2d\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0cB \u4e2d\u7b2c\u56db\u4e2a\u8282\u70b9) \u5728\u5185\u5b58\u4e2d\u6307\u5411\u76f8\u540c\u7684\u4f4d\u7f6e\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aintersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n\u8f93\u51fa\uff1aIntersected at '2'\n\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 2 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\n\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [1,9,1,2,4]\uff0c\u94fe\u8868 B \u4e3a [3,2,4]\u3002\n\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 1 \u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aintersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n\u8f93\u51fa\uff1anull\n\u89e3\u91ca\uff1a\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [2,6,4]\uff0c\u94fe\u8868 B \u4e3a [1,5]\u3002\n\u7531\u4e8e\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5 intersectVal \u5fc5\u987b\u4e3a 0\uff0c\u800c skipA \u548c skipB \u53ef\u4ee5\u662f\u4efb\u610f\u503c\u3002\n\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u56e0\u6b64\u8fd4\u56de null \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>listA</code> \u4e2d\u8282\u70b9\u6570\u76ee\u4e3a <code>m</code></li> <li><code>listB</code> \u4e2d\u8282\u70b9\u6570\u76ee\u4e3a <code>n</code></li> <li><code>1 &lt;= m, n &lt;= 3 * 104</code></li> <li><code>1 &lt;= Node.val &lt;= 105</code></li> <li><code>0 &lt;= skipA &lt;= m</code></li> <li><code>0 &lt;= skipB &lt;= n</code></li> <li>\u5982\u679c <code>listA</code> \u548c <code>listB</code> \u6ca1\u6709\u4ea4\u70b9\uff0c<code>intersectVal</code> \u4e3a <code>0</code></li> <li>\u5982\u679c <code>listA</code> \u548c <code>listB</code> \u6709\u4ea4\u70b9\uff0c<code>intersectVal == listA[skipA] == listB[skipB]</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5426\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(m + n)</code> \u3001\u4ec5\u7528 <code>O(1)</code> \u5185\u5b58\u7684\u89e3\u51b3\u65b9\u6848\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_222","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode *p1 = headA, *p2 = headB;\n        if (p1 == nullptr || p2 == nullptr)\n        {\n            return nullptr;\n        }\n        int len1 = 0, len2 = 0;\n        while (p1-&gt;next != nullptr)\n        {\n            p1 = p1-&gt;next;\n            len1++;\n        }\n        while (p2-&gt;next != nullptr)\n        {\n            p2 = p2-&gt;next;\n            len2++;\n        }\n        if (p1 != p2)\n        {\n            return nullptr;\n        }\n        int diff;\n        p1 = headA;\n        p2 = headB;\n        if (len1 &lt; len2)\n        {\n            diff = len2 - len1;\n            while (diff &gt; 0)\n            {\n                p2 = p2-&gt;next;\n                diff--;\n            }\n        }\n        else if (len1 &gt; len2)\n        {\n            diff = len1 - len2;\n            while (diff &gt; 0)\n            {\n                p1 = p1-&gt;next;\n                diff--;\n            }\n        }\n        while (p1 != nullptr)\n        {\n            if (p1 == p2)\n            {\n                return p1;\n            }\n            p1 = p1-&gt;next;\n            p2 = p2-&gt;next;\n        }\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_223","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr) {\n            return nullptr;\n        }\n        ListNode *pA = headA, *pB = headB;\n        while (pA != pB) {\n            pA = pA == nullptr ? headB : pA-&gt;next;\n            pB = pB == nullptr ? headA : pB-&gt;next;\n        }\n        return pA;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_224","title":"\u611f\u60f3","text":"<p>\u5feb\u6162\u6307\u9488yyds</p> <p>\u4e0d\u8fc7\u9898\u89e3\u7684\u65b9\u6cd5\u4ee3\u7801\u91cf\u66f4\u5c11, \u5c31\u662f\u6362\u6761\u8def\u8d70, \u5176\u5b9e\u672c\u8d28\u4e0a\u548c\u6211\u7684\u6ca1\u533a\u522b, \u90fd\u662f\u7b2c\u4e8c\u5708\u76f8\u9047, \u6307\u9488\u9700\u8981\u79fb\u52a8\u7684\u6b21\u6570\u5b8c\u5168\u4e00\u6837</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#169-easy","title":"169. \u591a\u6570\u5143\u7d20(easy)","text":"<p>2023/9/4</p> <p>00 : 03 : 53</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_225","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a <code>n</code> \u7684\u6570\u7ec4 <code>nums</code> \uff0c\u8fd4\u56de\u5176\u4e2d\u7684\u591a\u6570\u5143\u7d20\u3002\u591a\u6570\u5143\u7d20\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570 \u5927\u4e8e <code>\u230a n/2 \u230b</code> \u7684\u5143\u7d20\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u591a\u6570\u5143\u7d20\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,2,3]\n\u8f93\u51fa\uff1a3\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,2,1,1,1,2,2]\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> </ul> <p>\u8fdb\u9636\uff1a\u5c1d\u8bd5\u8bbe\u8ba1\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_226","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        unordered_map&lt;int, int&gt; map;\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (map.find(nums[i]) != map.end())\n            {\n                map[nums[i]]++;\n                if (map[nums[i]] &gt; n/2)\n                {\n                    return nums[i];\n                }\n            }\n            else\n            {\n                map.insert({nums[i], 1});\n                if (map[nums[i]] &gt; n/2)\n                {\n                    return nums[i];\n                }\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_227","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int candidate = -1;\n        int count = 0;\n        for (int num : nums) {\n            if (num == candidate)\n                ++count;\n            else if (--count &lt; 0) {\n                candidate = num;\n                count = 1;\n            }\n        }\n        return candidate;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_228","title":"\u611f\u60f3","text":"<p>\u8fd9\u4e2a\u9898\u6709\u4e2a\u5f88\u4e0d\u9519\u7684\u7b97\u6cd5Boyer-Moore, \u5f15\u7528\u8bc4\u8bba\u533a\u7684\u89e3\u91ca:</p> <p>\u201c\u540c\u5f52\u4e8e\u5c3d\u6d88\u6740\u6cd5\u201d \uff1a</p> <p>\u7531\u4e8e\u591a\u6570\u8d85\u8fc750%, \u6bd4\u5982100\u4e2a\u6570\uff0c\u90a3\u4e48\u591a\u6570\u81f3\u5c1151\u4e2a\uff0c\u5269\u4e0b\u5c11\u6570\u662f49\u4e2a\u3002</p> <ol> <li>\u7b2c\u4e00\u4e2a\u5230\u6765\u7684\u58eb\u5175\uff0c\u76f4\u63a5\u63d2\u4e0a\u81ea\u5df1\u9635\u8425\u7684\u65d7\u5e1c\u5360\u9886\u8fd9\u5757\u9ad8\u5730\uff0c\u6b64\u65f6\u9886\u4e3b winner \u5c31\u662f\u8fd9\u4e2a\u9635\u8425\u7684\u4eba\uff0c\u73b0\u5b58\u5175\u529b count = 1\u3002</li> <li>\u5982\u679c\u65b0\u6765\u7684\u58eb\u5175\u548c\u524d\u4e00\u4e2a\u58eb\u5175\u662f\u540c\u4e00\u9635\u8425\uff0c\u5219\u96c6\u5408\u8d77\u6765\u5360\u9886\u9ad8\u5730\uff0c\u9886\u4e3b\u4e0d\u53d8\uff0cwinner \u4f9d\u7136\u662f\u5f53\u524d\u8fd9\u4e2a\u58eb\u5175\u6240\u5c5e\u9635\u8425\uff0c\u73b0\u5b58\u5175\u529b count++\uff1b</li> <li>\u5982\u679c\u65b0\u6765\u5230\u7684\u58eb\u5175\u4e0d\u662f\u540c\u4e00\u9635\u8425\uff0c\u5219\u524d\u65b9\u9635\u8425\u6d3e\u4e00\u4e2a\u58eb\u5175\u548c\u5b83\u540c\u5f52\u4e8e\u5c3d\u3002 \u6b64\u65f6\u524d\u65b9\u9635\u8425\u5175\u529bcount --\u3002\uff08\u5373\u4f7f\u53cc\u65b9\u90fd\u6b7b\u5149\uff0c\u8fd9\u5757\u9ad8\u5730\u7684\u65d7\u5e1c winner \u4f9d\u7136\u4e0d\u53d8\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6ca1\u6709\u6d3b\u7740\u7684\u58eb\u5175\u53ef\u4ee5\u53bb\u6362\u4e0a\u81ea\u5df1\u7684\u65b0\u65d7\u5e1c\uff09</li> <li>\u5f53\u4e0b\u4e00\u4e2a\u58eb\u5175\u5230\u6765\uff0c\u53d1\u73b0\u524d\u65b9\u9635\u8425\u5df2\u7ecf\u6ca1\u6709\u5175\u529b\uff0c\u65b0\u58eb\u5175\u5c31\u6210\u4e86\u9886\u4e3b\uff0cwinner \u53d8\u6210\u8fd9\u4e2a\u58eb\u5175\u6240\u5c5e\u9635\u8425\u7684\u65d7\u5e1c\uff0c\u73b0\u5b58\u5175\u529b count ++\u3002</li> </ol> <p>\u5c31\u8fd9\u6837\u5404\u8def\u519b\u9600\u4e00\u76f4\u4ee5\u8fd9\u79cd\u4ee5\u4e00\u654c\u4e00\u540c\u5f52\u4e8e\u5c3d\u7684\u65b9\u5f0f\u53ae\u6740\u4e0b\u53bb\uff0c\u76f4\u5230\u5c11\u6570\u9635\u8425\u90fd\u6b7b\u5149\uff0c\u90a3\u4e48\u6700\u540e\u5269\u4e0b\u7684\u51e0\u4e2a\u5fc5\u7136\u5c5e\u4e8e\u591a\u6570\u9635\u8425\uff0cwinner \u5c31\u662f\u591a\u6570\u9635\u8425\u3002\uff08\u591a\u6570\u9635\u8425 51\u4e2a\uff0c\u5c11\u6570\u9635\u8425\u53ea\u670949\u4e2a\uff0c\u6b7b\u5269\u4e0b\u76842\u4e2a\u5c31\u662f\u591a\u6570\u9635\u8425\u7684\u4eba\uff09</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#198-medium","title":"198. \u6253\u5bb6\u52ab\u820d(medium)","text":"<p>2023/9/4</p> <p>00 : 07 : 22</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_229","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a[1,2,3,1]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002\n     \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1a[2,7,9,3,1]\n\u8f93\u51fa\uff1a12\n\u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002\n     \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 400</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_230","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int *dp = new int[n+1]();\n        dp[0] = 0;\n        dp[1] = nums[0];\n        for (int i = 2; i &lt;= n; ++i)\n        {\n            dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]);\n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_231","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        if (nums.empty()) {\n            return 0;\n        }\n        int size = nums.size();\n        if (size == 1) {\n            return nums[0];\n        }\n        int first = nums[0], second = max(nums[0], nums[1]);\n        for (int i = 2; i &lt; size; i++) {\n            int temp = second;\n            second = max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_232","title":"\u611f\u60f3","text":"<p>\u8003\u8651\u5230\u6bcf\u4e2adp\u53ea\u4e0e\u524d\u4e24\u6b21\u7684\u7ed3\u679c\u6709\u5173, \u53ef\u4ee5\u4f7f\u7528\u5927\u5c0f\u4e3a3\u7684\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#200-medium","title":"200. \u5c9b\u5c7f\u6570\u91cf(medium)","text":"<p>2023/9/4</p> <p>00 : 12 : 04</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_233","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531 <code>'1'</code>\uff08\u9646\u5730\uff09\u548c <code>'0'</code>\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002</p> <p>\u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002</p> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1agrid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1agrid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\n\u8f93\u51fa\uff1a3\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>grid[i][j]</code> \u7684\u503c\u4e3a <code>'0'</code> \u6216 <code>'1'</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_234","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void dfs(int i, int j, vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited)\n    {\n        visited[i][j] = true;\n        int m = grid.size();\n        int n = grid[0].size();\n        if (i &gt; 0 &amp;&amp; grid[i-1][j] == '1' &amp;&amp; visited[i-1][j] == false)\n        {\n            dfs(i-1, j, grid, visited);\n        }\n        if (j &gt; 0 &amp;&amp; grid[i][j-1] == '1' &amp;&amp; visited[i][j-1] == false)\n        {\n            dfs(i, j-1, grid, visited);\n        }\n        if (i &lt; m-1 &amp;&amp; grid[i+1][j] == '1' &amp;&amp; visited[i+1][j] == false)\n        {\n            dfs(i+1, j, grid, visited);\n        }\n        if (j &lt; n-1 &amp;&amp; grid[i][j+1] == '1' &amp;&amp; visited[i][j+1] == false)\n        {\n            dfs(i, j+1, grid, visited);\n        }\n\n    }\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));\n        int res = 0;\n        for (int i = 0; i &lt; m; ++i)\n        {\n            for (int j = 0; j &lt; n; ++j)\n            {\n                if (visited[i][j])\n                {\n                    continue;\n                }\n                else\n                {\n                    visited[i][j] = true;\n                }\n                if (grid[i][j] == '1')\n                {\n                    dfs(i, j, grid, visited);\n                    res++;\n                }\n            }\n        }\n        return res;\n\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_235","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\nprivate:\n    void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, int r, int c) {\n        int nr = grid.size();\n        int nc = grid[0].size();\n\n        grid[r][c] = '0';\n        if (r - 1 &gt;= 0 &amp;&amp; grid[r-1][c] == '1') dfs(grid, r - 1, c);\n        if (r + 1 &lt; nr &amp;&amp; grid[r+1][c] == '1') dfs(grid, r + 1, c);\n        if (c - 1 &gt;= 0 &amp;&amp; grid[r][c-1] == '1') dfs(grid, r, c - 1);\n        if (c + 1 &lt; nc &amp;&amp; grid[r][c+1] == '1') dfs(grid, r, c + 1);\n    }\n\npublic:\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int nr = grid.size();\n        if (!nr) return 0;\n        int nc = grid[0].size();\n\n        int num_islands = 0;\n        for (int r = 0; r &lt; nr; ++r) {\n            for (int c = 0; c &lt; nc; ++c) {\n                if (grid[r][c] == '1') {\n                    ++num_islands;\n                    dfs(grid, r, c);\n                }\n            }\n        }\n\n        return num_islands;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_236","title":"\u611f\u60f3","text":"<p>\u8fd8\u53ef\u4ee5\u5e7f\u5ea6\u4f18\u5148\u4f18\u5316\u7a7a\u95f4\u4e5f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6, \u4f46\u662f\u6211\u89c9\u5f97\u8fd8\u662fdfs\u6700\u76f4\u89c2</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#206-easy","title":"206. \u53cd\u8f6c\u94fe\u8868(easy)","text":"<p>2023/9/4</p> <p>00 : 05 : 59</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_237","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \uff0c\u8bf7\u4f60\u53cd\u8f6c\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2,3,4,5]\n\u8f93\u51fa\uff1a[5,4,3,2,1]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2]\n\u8f93\u51fa\uff1a[2,1]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u8303\u56f4\u662f <code>[0, 5000]</code></li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p>\u8fdb\u9636\uff1a\u94fe\u8868\u53ef\u4ee5\u9009\u7528\u8fed\u4ee3\u6216\u9012\u5f52\u65b9\u5f0f\u5b8c\u6210\u53cd\u8f6c\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_238","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* ret = head;\n        if (ret == nullptr)\n        {\n            return ret;\n        }\n        ListNode* p = ret-&gt;next;\n        ret-&gt;next = nullptr;\n        while (p != nullptr)\n        {\n            ListNode *tmp = p-&gt;next;\n            p-&gt;next = ret;\n            ret = p;\n            p = tmp;\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_239","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr-&gt;next;\n            curr-&gt;next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_240","title":"\u611f\u60f3","text":"<p>\u7ecf\u5178\u5934\u63d2, \u8fed\u4ee3\u6bd4\u9012\u5f52\u7701\u4e86\u5f88\u591a\u6808\u7a7a\u95f4(O(1))</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#207-medium","title":"207. \u8bfe\u7a0b\u8868(medium)","text":"<p>2023/9/4</p> <p>01 : 04 : 44</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_241","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4f60\u8fd9\u4e2a\u5b66\u671f\u5fc5\u987b\u9009\u4fee <code>numCourses</code> \u95e8\u8bfe\u7a0b\uff0c\u8bb0\u4e3a <code>0</code> \u5230 <code>numCourses - 1</code> \u3002</p> <p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u5148\u4fee\u8bfe\u7a0b\u6309\u6570\u7ec4 <code>prerequisites</code> \u7ed9\u51fa\uff0c\u5176\u4e2d <code>prerequisites[i] = [ai, bi]</code> \uff0c\u8868\u793a\u5982\u679c\u8981\u5b66\u4e60\u8bfe\u7a0b <code>ai</code> \u5219 \u5fc5\u987b \u5148\u5b66\u4e60\u8bfe\u7a0b <code>bi</code> \u3002</p> <ul> <li>\u4f8b\u5982\uff0c\u5148\u4fee\u8bfe\u7a0b\u5bf9 <code>[0, 1]</code> \u8868\u793a\uff1a\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b <code>0</code> \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b <code>1</code> \u3002</li> </ul> <p>\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f\u5982\u679c\u53ef\u4ee5\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anumCourses = 2, prerequisites = [[1,0]]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0 \u3002\u8fd9\u662f\u53ef\u80fd\u7684\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anumCourses = 2, prerequisites = [[1,0],[0,1]]\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0 \uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= numCourses &lt;= 2000</code></li> <li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= ai, bi &lt; numCourses</code></li> <li><code>prerequisites[i]</code> \u4e2d\u7684\u6240\u6709\u8bfe\u7a0b\u5bf9 \u4e92\u4e0d\u76f8\u540c</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_242","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int FindIndex(vector&lt;int&gt;&amp; comein, vector&lt;bool&gt;&amp; visited)\n    {\n        int n = comein.size();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (visited[i] == false &amp;&amp; comein[i] == 0)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n    bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) {\n        vector&lt;vector&lt;bool&gt;&gt; g(numCourses, vector&lt;bool&gt;(numCourses, false));\n        vector&lt;int&gt; comein(numCourses, 0);\n        for (auto&amp; it : prerequisites)\n        {\n            g[it[0]][it[1]] = true;\n            comein[it[1]]++;\n        }\n        vector&lt;bool&gt; visited(numCourses, false);\n        int index = FindIndex(comein, visited);\n        while (index != -1)\n        {\n            for (int i = 0; i &lt; numCourses; ++i)\n            {\n                if (g[index][i] == true)\n                {\n                    comein[i]--;\n                }\n            }\n            visited[index] = true;\n            index = FindIndex(comein, visited);\n        }\n        for (int i = 0; i &lt; numCourses; ++i)\n        {\n            if (visited[i] == false)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_243","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\nprivate:\n    vector&lt;vector&lt;int&gt;&gt; edges;\n    vector&lt;int&gt; visited;\n    bool valid = true;\n\npublic:\n    void dfs(int u) {\n        visited[u] = 1;\n        for (int v: edges[u]) {\n            if (visited[v] == 0) {\n                dfs(v);\n                if (!valid) {\n                    return;\n                }\n            }\n            else if (visited[v] == 1) {\n                valid = false;\n                return;\n            }\n        }\n        visited[u] = 2;\n    }\n\n    bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) {\n        edges.resize(numCourses);\n        visited.resize(numCourses);\n        for (const auto&amp; info: prerequisites) {\n            edges[info[1]].push_back(info[0]);\n        }\n        for (int i = 0; i &lt; numCourses &amp;&amp; valid; ++i) {\n            if (!visited[i]) {\n                dfs(i);\n            }\n        }\n        return valid;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_244","title":"\u611f\u60f3","text":"<p>\u5c31\u662f\u62d3\u6251\u6392\u5e8f, \u5bf9\u4e8e\u6709\u5411\u56fe\u627e\u5165\u5ea6\u4e3a0, \u5f39\u51fa, \u6d88\u8fb9; \u5bf9\u4e8e\u65e0\u5411\u56fe, \u627e\u5ea6&lt;=1</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#208-trie-medium","title":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)(medium)","text":"<p>2023/9/5</p> <p>00 : 20 : 37</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_245","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>Trie\uff08\u53d1\u97f3\u7c7b\u4f3c \"try\"\uff09\u6216\u8005\u8bf4 \u524d\u7f00\u6811 \u662f\u4e00\u79cd\u6811\u5f62\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u68c0\u7d22\u5b57\u7b26\u4e32\u6570\u636e\u96c6\u4e2d\u7684\u952e\u3002\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u6709\u76f8\u5f53\u591a\u7684\u5e94\u7528\u60c5\u666f\uff0c\u4f8b\u5982\u81ea\u52a8\u8865\u5b8c\u548c\u62fc\u5199\u68c0\u67e5\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0 Trie \u7c7b\uff1a</p> <ul> <li><code>Trie()</code> \u521d\u59cb\u5316\u524d\u7f00\u6811\u5bf9\u8c61\u3002</li> <li><code>void insert(String word)</code> \u5411\u524d\u7f00\u6811\u4e2d\u63d2\u5165\u5b57\u7b26\u4e32 <code>word</code> \u3002</li> <li><code>boolean search(String word)</code> \u5982\u679c\u5b57\u7b26\u4e32 <code>word</code> \u5728\u524d\u7f00\u6811\u4e2d\uff0c\u8fd4\u56de <code>true</code>\uff08\u5373\uff0c\u5728\u68c0\u7d22\u4e4b\u524d\u5df2\u7ecf\u63d2\u5165\uff09\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</li> <li><code>boolean startsWith(String prefix)</code> \u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u63d2\u5165\u7684\u5b57\u7b26\u4e32 <code>word</code> \u7684\u524d\u7f00\u4e4b\u4e00\u4e3a <code>prefix</code> \uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n\u8f93\u51fa\n[null, null, true, false, true, null, true]\n\n\u89e3\u91ca\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // \u8fd4\u56de True\ntrie.search(\"app\");     // \u8fd4\u56de False\ntrie.startsWith(\"app\"); // \u8fd4\u56de True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // \u8fd4\u56de True\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> <li><code>word</code> \u548c <code>prefix</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> <li><code>insert</code>\u3001<code>search</code> \u548c <code>startsWith</code> \u8c03\u7528\u6b21\u6570 \u603b\u8ba1 \u4e0d\u8d85\u8fc7 <code>3 * 104</code> \u6b21</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_246","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Trie {\npublic:\n    Trie() {\n        dummy = new TrieNode;\n    }\n\n    void insert(string word) {\n        int len = word.size();\n        TrieNode *p = dummy;\n        for (int i = 0; i &lt; len; ++i)\n        {\n            if (p-&gt;next.find(word[i]) != p-&gt;next.end())\n            {\n                p = p-&gt;next[word[i]];\n            }\n            else\n            {\n                p-&gt;next.insert({word[i], new TrieNode});\n                p = p-&gt;next[word[i]];\n            }\n        }\n        p-&gt;isEnd = true;\n    }\n\n    bool search(string word) {\n\n        int len = word.size();\n        TrieNode *p = dummy;\n        for (int i = 0; i &lt; len; ++i)\n        {\n            if (p-&gt;next.find(word[i]) != p-&gt;next.end())\n            {\n                p = p-&gt;next[word[i]];\n            }\n            else\n            {\n                return false;\n            }\n        }\n        return p-&gt;isEnd;\n    }\n\n    bool startsWith(string prefix) {\n        int len = prefix.size();\n        TrieNode *p = dummy;\n        for (int i = 0; i &lt; len; ++i)\n        {\n            if (p-&gt;next.find(prefix[i]) != p-&gt;next.end())\n            {\n                p = p-&gt;next[prefix[i]];\n            }\n            else\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    struct TrieNode\n    {\n        bool isEnd = false;\n        unordered_map&lt;char, TrieNode*&gt; next;\n    };\n    TrieNode* dummy;\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_247","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Trie {\nprivate:\n    vector&lt;Trie*&gt; children;\n    bool isEnd;\n\n    Trie* searchPrefix(string prefix) {\n        Trie* node = this;\n        for (char ch : prefix) {\n            ch -= 'a';\n            if (node-&gt;children[ch] == nullptr) {\n                return nullptr;\n            }\n            node = node-&gt;children[ch];\n        }\n        return node;\n    }\n\npublic:\n    Trie() : children(26), isEnd(false) {}\n\n    void insert(string word) {\n        Trie* node = this;\n        for (char ch : word) {\n            ch -= 'a';\n            if (node-&gt;children[ch] == nullptr) {\n                node-&gt;children[ch] = new Trie();\n            }\n            node = node-&gt;children[ch];\n        }\n        node-&gt;isEnd = true;\n    }\n\n    bool search(string word) {\n        Trie* node = this-&gt;searchPrefix(word);\n        return node != nullptr &amp;&amp; node-&gt;isEnd;\n    }\n\n    bool startsWith(string prefix) {\n        return this-&gt;searchPrefix(prefix) != nullptr;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_248","title":"\u611f\u60f3","text":"<p>\u5b8c\u5168\u5fd8\u8bb0\u524d\u7f00\u6811\u4e86, \u770b\u4e86\u4e0b\u524d\u7f00\u6811\u7684\u8868\u793a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u505a\u51fa\u6765, \u6240\u4ee5\u8fd9\u9898\u7684\u91cd\u70b9\u662f\u8981\u8bb0\u5f97\u524d\u7f00\u6811\u7684\u6837\u5b50, \u76f8\u8f83\u4e8e\u9898\u89e3, \u6211\u7684\u505a\u6cd5\u4f18\u5316\u4e86\u7a7a\u95f4, \u4f46\u662f\u7531\u4e8e\u8981\u7ecf\u5e38\u5728\u54c8\u5e0c\u8868\u4e2d\u63d2\u5165, \u6240\u4ee5\u901f\u5ea6\u7a0d\u6162\u4e8e\u9898\u89e3</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#215-kmedium","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20(medium)","text":"<p>2023/9/5</p> <p>00 : 08 : 35</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_249","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u6574\u6570 <code>k</code>\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c <code>**k**</code> \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c <code>k</code> \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c <code>k</code> \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n)</code> \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [3,2,1,5,6,4], k = 2\n\u8f93\u51fa: 5\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [3,2,3,1,2,4,5,5,6], k = 4\n\u8f93\u51fa: 4\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_250","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; min_heap;\n        int size = nums.size();\n        min_heap.push(nums[0]);\n        for (int i = 1; i &lt; size; ++i)\n        {\n            if (min_heap.size() &lt; k)\n            {\n                min_heap.push(nums[i]);\n            }\n            else if (nums[i] &gt; min_heap.top())\n            {\n                min_heap.pop();\n                min_heap.push(nums[i]);\n            }\n        }\n        return min_heap.top();\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_251","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int quickselect(vector&lt;int&gt; &amp;nums, int l, int r, int k) {\n        if (l == r)\n            return nums[k];\n        int partition = nums[l], i = l - 1, j = r + 1;\n        while (i &lt; j) {\n            do i++; while (nums[i] &lt; partition);\n            do j--; while (nums[j] &gt; partition);\n            if (i &lt; j)\n                swap(nums[i], nums[j]);\n        }\n        if (k &lt;= j)return quickselect(nums, l, j, k);\n        else return quickselect(nums, j + 1, r, k);\n    }\n\n    int findKthLargest(vector&lt;int&gt; &amp;nums, int k) {\n        int n = nums.size();\n        return quickselect(nums, 0, n - 1, n - k);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_252","title":"\u611f\u60f3","text":"<p>\u7ecf\u5178topK\u95ee\u9898, \u53ef\u4ee5\u7528\u5feb\u901f\u9009\u62e9(\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u53ea\u8981\u9012\u5f52\u4e00\u534a\u7684\u5feb\u6392)\u6216\u8005\u5806\u6392, \u4e0d\u8fc7\u771f\u8981\u5230\u9762\u8bd5\u7684\u65f6\u5019\u53ef\u80fd\u8981\u81ea\u5df1\u624b\u6495\u4e00\u4e2a\u6700\u5c0f\u5806, \u5c31\u4e0d\u5982\u5feb\u6392\u7701\u4e8b\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#221-medium","title":"221. \u6700\u5927\u6b63\u65b9\u5f62(medium)","text":"<p>2023/9/5</p> <p>00 : 56 : 54</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_253","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u4e00\u4e2a\u7531 <code>'0'</code> \u548c <code>'1'</code> \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b <code>'1'</code> \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amatrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n\u8f93\u51fa\uff1a4\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amatrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1amatrix = [[\"0\"]]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>matrix[i][j]</code> \u4e3a <code>'0'</code> \u6216 <code>'1'</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_254","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maximalSquare(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; dp(m+1, vector&lt;int&gt;(n+1, 0));\n        int maxSide = 0;\n        for (int i = 1; i &lt; m+1; ++i)\n        {\n            for (int j = 1; j &lt; n+1; ++j)\n            {\n                if (matrix[i-1][j-1] == '0')\n                {\n                    dp[i][j] = 0;\n                }\n                else\n                {\n                    dp[i][j] = min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) + 1;\n                    maxSide = dp[i][j] &gt; maxSide ? dp[i][j] : maxSide;\n                }\n            }\n        }\n        return maxSide * maxSide;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_255","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int maximalSquare(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return 0;\n        }\n        int maxSide = 0;\n        int rows = matrix.size(), columns = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; dp(rows, vector&lt;int&gt;(columns));\n        for (int i = 0; i &lt; rows; i++) {\n            for (int j = 0; j &lt; columns; j++) {\n                if (matrix[i][j] == '1') {\n                    if (i == 0 || j == 0) {\n                        dp[i][j] = 1;\n                    } else {\n                        dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n                    }\n                    maxSide = max(maxSide, dp[i][j]);\n                }\n            }\n        }\n        int maxSquare = maxSide * maxSide;\n        return maxSquare;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_256","title":"\u611f\u60f3","text":"<p>\u4e00\u5f00\u59cb\u5199\u7684\u65f6\u5019\u56e0\u4e3a\u60f3\u5230\u4e8685\u6700\u5927\u77e9\u5f62, \u6240\u4ee5\u4e00\u76f4\u5728\u5199\u7528\u5355\u8c03\u6808\u7684\u65b9\u6cd5, \u5199\u7740\u5199\u7740\u611f\u89c9\u4e0d\u5bf9\u52b2, \u597d\u50cf\u5f88\u6d6a\u8d39, \u770b\u4e86\u773c\u9898\u89e3, \u7adf\u7136\u53ea\u9700\u8981dp\u5c31\u53ef\u4ee5\u4e86(), \u4e8e\u662f\u7528dp\u91cd\u5199, \u5f88\u5feb\u80fdac</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#226-easy","title":"226. \u7ffb\u8f6c\u4e8c\u53c9\u6811(easy)","text":"<p>2023/9/5</p> <p>00 : 02 : 28</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_257","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u7ffb\u8f6c\u8fd9\u68f5\u4e8c\u53c9\u6811\uff0c\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [4,2,7,1,3,6,9]\n\u8f93\u51fa\uff1a[4,7,2,9,6,3,1]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [2,1,3]\n\u8f93\u51fa\uff1a[2,3,1]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u8303\u56f4\u5728 <code>[0, 100]</code> \u5185</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_258","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == nullptr)\n        {\n            return root;\n        }\n\n        TreeNode* tmp = root-&gt;left;\n        root-&gt;left = invertTree(root-&gt;right);\n        root-&gt;right = invertTree(tmp);\n        return root;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_259","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        TreeNode* left = invertTree(root-&gt;left);\n        TreeNode* right = invertTree(root-&gt;right);\n        root-&gt;left = right;\n        root-&gt;right = left;\n        return root;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_260","title":"\u611f\u60f3","text":"<p>\u9012\u5f52\u5b9e\u73b0, \u5f88\u7b80\u5355</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#234-easy","title":"234. \u56de\u6587\u94fe\u8868(easy)","text":"<p>2023/9/5</p> <p>00 : 26 : 21</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_261","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \uff0c\u8bf7\u4f60\u5224\u65ad\u8be5\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2,2,1]\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2]\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4<code>[1, 105]</code> \u5185</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5426\u7528 <code>O(n)</code> \u65f6\u95f4\u590d\u6742\u5ea6\u548c <code>O(1)</code> \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_262","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if (head == nullptr || head-&gt;next == nullptr)\n        {\n            return head;\n        }\n        ListNode *slow = head, *fast = head-&gt;next;\n        ListNode *half = nullptr;\n        int cnt = 0;\n        while (fast != nullptr &amp;&amp; fast-&gt;next != nullptr)\n        {\n\n            ListNode* tmp = slow;\n            slow = slow-&gt;next;\n            tmp-&gt;next = half;\n            half = tmp;\n\n            fast = fast-&gt;next-&gt;next;\n            cnt++;\n        }\n        if (fast != nullptr)\n        {\n            ListNode* tmp = slow;\n            slow = slow-&gt;next;\n            tmp-&gt;next = half;\n            half = tmp;\n        }\n        else\n        {\n            slow = slow-&gt;next;\n        }\n        while (half != nullptr || slow != nullptr)\n        {\n            if (half == nullptr || slow == nullptr)\n            {\n                return false;\n            }\n            if (half-&gt;val != slow-&gt;val)\n            {\n                return false;\n            }\n            else\n            {\n                half = half-&gt;next;\n                slow = slow-&gt;next;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_263","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if (head == nullptr) {\n            return true;\n        }\n\n        // \u627e\u5230\u524d\u534a\u90e8\u5206\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u5e76\u53cd\u8f6c\u540e\u534a\u90e8\u5206\u94fe\u8868\n        ListNode* firstHalfEnd = endOfFirstHalf(head);\n        ListNode* secondHalfStart = reverseList(firstHalfEnd-&gt;next);\n\n        // \u5224\u65ad\u662f\u5426\u56de\u6587\n        ListNode* p1 = head;\n        ListNode* p2 = secondHalfStart;\n        bool result = true;\n        while (result &amp;&amp; p2 != nullptr) {\n            if (p1-&gt;val != p2-&gt;val) {\n                result = false;\n            }\n            p1 = p1-&gt;next;\n            p2 = p2-&gt;next;\n        }        \n\n        // \u8fd8\u539f\u94fe\u8868\u5e76\u8fd4\u56de\u7ed3\u679c\n        firstHalfEnd-&gt;next = reverseList(secondHalfStart);\n        return result;\n    }\n\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr != nullptr) {\n            ListNode* nextTemp = curr-&gt;next;\n            curr-&gt;next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n\n    ListNode* endOfFirstHalf(ListNode* head) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n        while (fast-&gt;next != nullptr &amp;&amp; fast-&gt;next-&gt;next != nullptr) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n        }\n        return slow;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_264","title":"\u611f\u60f3","text":"<p>\u4e0a\u6765\u5c31\u76f4\u5954\u6700\u4f18\u89e3\u53bb\u4e86, \u548c\u9898\u89e3\u51e0\u4e4e\u4e00\u6837\u7684\u601d\u8def, \u5148\u5feb\u6162\u6307\u9488\u627e\u4e2d\u70b9, \u7136\u540e\u53cd\u8f6c\u5176\u4e2d\u7684\u4e00\u534a\u94fe\u8868, \u518d\u9010\u4e2a\u6bd4\u8f83</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#236-medium","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148(medium)","text":"<p>2023/9/6</p> <p>00 : 19 : 40</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_265","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p> <p>\u767e\u5ea6\u767e\u79d1\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u8282\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u8282\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\u3002\u201d</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u8282\u70b9 5 \u548c\u8282\u70b9 1 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 3 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\u8282\u70b9 5 \u548c\u8282\u70b9 4 \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 5 \u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1,2], p = 1, q = 2\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[2, 105]</code> \u5185\u3002</li> <li><code>-109 &lt;= Node.val &lt;= 109</code></li> <li>\u6240\u6709 <code>Node.val</code> <code>\u4e92\u4e0d\u76f8\u540c</code> \u3002</li> <li><code>p != q</code></li> <li><code>p</code> \u548c <code>q</code> \u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_266","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool dfs(TreeNode *root, TreeNode *p, vector&lt;TreeNode*&gt; &amp;prev)\n    {\n        if (root == nullptr)\n        {\n            return false;\n        }\n        else\n        {\n            prev.push_back(root);\n        }\n        if (root == p)\n        {\n            return true;\n        }\n        if (dfs(root-&gt;left, p, prev) || dfs(root-&gt;right, p, prev))\n        {\n            return true;\n\n        }\n        else\n        {\n            prev.pop_back();\n            return false;\n        }\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        vector&lt;TreeNode*&gt; prevp, prevq;\n        dfs(root, p, prevp);\n        dfs(root, q, prevq);\n        int p_size = prevp.size();\n        int q_size = prevq.size();\n        TreeNode *tmp = nullptr;\n        for (int i = 0; i &lt; p_size &amp;&amp; i &lt; q_size; ++i)\n        {\n            if (prevp[i] == prevq[i])\n            {\n                tmp = prevp[i];\n            }\n        }\n        return tmp;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_267","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    TreeNode* ans;\n    bool dfs(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (root == nullptr) return false;\n        bool lson = dfs(root-&gt;left, p, q);\n        bool rson = dfs(root-&gt;right, p, q);\n        if ((lson &amp;&amp; rson) || ((root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val) &amp;&amp; (lson || rson))) {\n            ans = root;\n        } \n        return lson || rson || (root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val);\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        dfs(root, p, q);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_268","title":"\u611f\u60f3","text":"<p>\u770b\u4e86\u9898\u89e3, \u6211\u591a\u904d\u5386\u4e86\u4e00\u6b21, \u6548\u7387\u548c\u7a7a\u95f4\u90fd\u6709\u635f\u8017, \u76f4\u63a5\u5728dfs\u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u662f\u6700\u597d\u7684</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#238-medium","title":"238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef(medium)","text":"<p>2023/9/6</p> <p>00 : 11 : 03</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_269","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>\uff0c\u8fd4\u56de \u6570\u7ec4 <code>answer</code> \uff0c\u5176\u4e2d <code>answer[i]</code> \u7b49\u4e8e <code>nums</code> \u4e2d\u9664 <code>nums[i]</code> \u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef \u3002</p> <p>\u9898\u76ee\u6570\u636e \u4fdd\u8bc1 \u6570\u7ec4 <code>nums</code>\u4e4b\u4e2d\u4efb\u610f\u5143\u7d20\u7684\u5168\u90e8\u524d\u7f00\u5143\u7d20\u548c\u540e\u7f00\u7684\u4e58\u79ef\u90fd\u5728 32 \u4f4d \u6574\u6570\u8303\u56f4\u5185\u3002</p> <p>\u8bf7\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\uff0c\u4e14\u5728 <code>O(*n*)</code> \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u6b64\u9898\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: nums = [1,2,3,4]\n\u8f93\u51fa: [24,12,8,6]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: nums = [-1,1,0,-3,3]\n\u8f93\u51fa: [0,0,9,0,0]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>2 &lt;= nums.length &lt;= 105</code></li> <li><code>-30 &lt;= nums[i] &lt;= 30</code></li> <li>\u4fdd\u8bc1 \u6570\u7ec4 <code>nums</code>\u4e4b\u4e2d\u4efb\u610f\u5143\u7d20\u7684\u5168\u90e8\u524d\u7f00\u5143\u7d20\u548c\u540e\u7f00\u7684\u4e58\u79ef\u90fd\u5728 32 \u4f4d \u6574\u6570\u8303\u56f4\u5185</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u5728 <code>O(1)</code> \u7684\u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e2a\u9898\u76ee\u5417\uff1f\uff08 \u51fa\u4e8e\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u76ee\u7684\uff0c\u8f93\u51fa\u6570\u7ec4\u4e0d\u88ab\u89c6\u4e3a\u989d\u5916\u7a7a\u95f4\u3002\uff09</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_270","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        vector&lt;int&gt; preProd(size, 0), postProd(size, 0), res(size, 0);\n        postProd[size - 1] = nums[size - 1];\n        preProd[0] = nums[0];\n        for (int i = 1; i &lt; size; ++i)\n        {\n            preProd[i] = preProd[i-1] * nums[i];\n            postProd[size-1-i] = postProd[size-i] * nums[size-1-i];\n        }\n        res[0] = postProd[1];\n        res[size-1] = preProd[size-2];\n        for (int i = 1; i &lt; size-1; ++i)\n        {\n            res[i] = preProd[i-1] * postProd[i+1];\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_271","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int length = nums.size();\n\n        // L \u548c R \u5206\u522b\u8868\u793a\u5de6\u53f3\u4e24\u4fa7\u7684\u4e58\u79ef\u5217\u8868\n        vector&lt;int&gt; L(length, 0), R(length, 0);\n\n        vector&lt;int&gt; answer(length);\n\n        // L[i] \u4e3a\u7d22\u5f15 i \u5de6\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\n        // \u5bf9\u4e8e\u7d22\u5f15\u4e3a '0' \u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u5de6\u4fa7\u6ca1\u6709\u5143\u7d20\uff0c\u6240\u4ee5 L[0] = 1\n        L[0] = 1;\n        for (int i = 1; i &lt; length; i++) {\n            L[i] = nums[i - 1] * L[i - 1];\n        }\n\n        // R[i] \u4e3a\u7d22\u5f15 i \u53f3\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\n        // \u5bf9\u4e8e\u7d22\u5f15\u4e3a 'length-1' \u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u53f3\u4fa7\u6ca1\u6709\u5143\u7d20\uff0c\u6240\u4ee5 R[length-1] = 1\n        R[length - 1] = 1;\n        for (int i = length - 2; i &gt;= 0; i--) {\n            R[i] = nums[i + 1] * R[i + 1];\n        }\n\n        // \u5bf9\u4e8e\u7d22\u5f15 i\uff0c\u9664 nums[i] \u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef\u5c31\u662f\u5de6\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\u4e58\u4ee5\u53f3\u4fa7\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\n        for (int i = 0; i &lt; length; i++) {\n            answer[i] = L[i] * R[i];\n        }\n\n        return answer;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_272","title":"\u611f\u60f3","text":"<p>O(1)\u4e0d\u80fd\u505a\u5230, \u9898\u89e3\u8bf4\u8f93\u51fa\u7684\u6570\u7ec4\u4e0d\u7b97\u7a7a\u95f4, emmm, \u53cd\u6b63\u5c31\u662f\u628a\u4e00\u4e2adp\u7684\u6570\u7ec4\u5f53\u6210\u662f\u8f93\u51fa\u6570\u7ec4, \u672c\u8d28\u8fd8\u662f\u5de6\u53f3\u4e58\u79ef\u5217\u8868</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#239-hard","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c(hard)","text":"<p>2023/9/6</p> <p>00 : 26 : 35</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_273","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a <code>k</code> \u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 <code>k</code> \u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002</p> <p>\u8fd4\u56de \u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,3,-1,-3,5,3,6,7], k = 3\n\u8f93\u51fa\uff1a[3,3,5,5,6,7]\n\u89e3\u91ca\uff1a\n\u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e                \u6700\u5927\u503c\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1], k = 1\n\u8f93\u51fa\uff1a[1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_274","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; max_heap;\n        unordered_map&lt;int, int&gt; hash;\n        int size = nums.size();\n        vector&lt;int&gt; res;\n        for (int i = 0; i &lt; k; ++i)\n        {\n            max_heap.push(nums[i]);\n        }\n        for (int i = k; i &lt; size; ++i)\n        {\n            int top = max_heap.top();\n            while (hash.find(top) != hash.end() &amp;&amp; hash[top] &gt; 0)\n            {\n                hash[top]--;\n                max_heap.pop();\n                top = max_heap.top();\n            }\n            res.push_back(top);\n            if (hash.find(nums[i-k]) != hash.end())\n            {\n                hash[nums[i-k]]++;\n            }\n            else\n            {\n                hash.insert({nums[i-k], 1});\n            }\n            max_heap.push(nums[i]);\n        }\n        int top = max_heap.top();\n        while (hash.find(top) != hash.end() &amp;&amp; hash[top] &gt; 0)\n        {\n            hash[top]--;\n            max_heap.pop();\n            top = max_heap.top();\n        }\n        res.push_back(top);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_275","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        int n = nums.size();\n        deque&lt;int&gt; q;\n        for (int i = 0; i &lt; k; ++i) {\n            while (!q.empty() &amp;&amp; nums[i] &gt;= nums[q.back()]) {\n                q.pop_back();\n            }\n            q.push_back(i);\n        }\n\n        vector&lt;int&gt; ans = {nums[q.front()]};\n        for (int i = k; i &lt; n; ++i) {\n            while (!q.empty() &amp;&amp; nums[i] &gt;= nums[q.back()]) {\n                q.pop_back();\n            }\n            q.push_back(i);\n            while (q.front() &lt;= i - k) {\n                q.pop_front();\n            }\n            ans.push_back(nums[q.front()]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_276","title":"\u611f\u60f3","text":"<p>\u5355\u8c03\u961f\u5217\u662f\u4e2a\u5f88\u806a\u660e\u7684\u65b9\u6cd5, \u4f46\u662f\u4e0d\u5bb9\u6613\u60f3\u5230, \u76f8\u53cd\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u5806\u5c31\u662f\u5f88\u81ea\u7136\u7684\u60f3\u6cd5, \u8981\u6ce8\u610fstl\u7684priority_queue\u662f\u6ca1\u6709\u5220\u9664\u6307\u5b9a\u5143\u7d20\u7684\u64cd\u4f5c\u7684, \u53ef\u4ee5\u7528\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u4fe1\u606f\u6765\u5224\u65ad\u5f53\u524dtop\u662f\u5426\u662f\u4e0d\u5728\u7a97\u53e3\u5185\u7684, \u5982\u679c\u4e0d\u5728\u5219pop\u51fa\u53bb</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#240-iimedium","title":"240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II(medium)","text":"<p>2023/9/6</p> <p>00 : 27 : 17</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_277","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 <code>*m* x *n*</code> \u77e9\u9635 <code>matrix</code> \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code> \u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a</p> <ul> <li>\u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002</li> <li>\u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amatrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amatrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= n, m &lt;= 300</code></li> <li><code>-109 &lt;= matrix[i][j] &lt;= 109</code></li> <li>\u6bcf\u884c\u7684\u6240\u6709\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217</li> <li>\u6bcf\u5217\u7684\u6240\u6709\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217</li> <li><code>-109 &lt;= target &lt;= 109</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_278","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool search(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target, int x1, int y1, int x2, int y2)\n    {\n        if (x1 &gt; x2 || y1 &gt; y2)\n        {\n            return false;\n        }\n        if (target == matrix[x1][y1] || target == matrix[x2][y2])\n        {\n            return true;\n        }\n        else if (target &lt; matrix[x1][y1] || target &gt; matrix[x2][y2] || x1==x2&amp;&amp;y1==y2)\n        {\n            return false;\n        }\n\n        int xm = x1 + (x2-x1) / 2, ym = y1 + (y2-y1) / 2;\n        return  search(matrix, target, x1, y1, xm, ym) ||\n                search(matrix, target, xm+1, ym+1, x2, y2) ||\n                search(matrix, target, xm+1, y1, x2, ym) ||\n                search(matrix, target, x1, ym+1, xm, y2);\n    }\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        return search(matrix, target, 0, 0, m-1, n-1);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_279","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        for (const auto&amp; row: matrix) {\n            auto it = lower_bound(row.begin(), row.end(), target);\n            if (it != row.end() &amp;&amp; *it == target) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_280","title":"\u611f\u60f3","text":"<p>\u72ec\u521b\u7684\u56db\u5206\u67e5\u627e(bushi), \u611f\u89c9\u4e0d\u5982\u9010\u884c\u4e8c\u5206</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#279-medium","title":"279. \u5b8c\u5168\u5e73\u65b9\u6570(medium)","text":"<p>2023/9/6</p> <p>00 : 27 : 46</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_281","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>n</code> \uff0c\u8fd4\u56de \u548c\u4e3a <code>n</code> \u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c11\u6570\u91cf \u3002</p> <p>\u5b8c\u5168\u5e73\u65b9\u6570 \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u503c\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6574\u6570\u7684\u5e73\u65b9\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u503c\u7b49\u4e8e\u4e00\u4e2a\u6574\u6570\u81ea\u4e58\u7684\u79ef\u3002\u4f8b\u5982\uff0c<code>1</code>\u3001<code>4</code>\u3001<code>9</code> \u548c <code>16</code> \u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u800c <code>3</code> \u548c <code>11</code> \u4e0d\u662f\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 12\n\u8f93\u51fa\uff1a3 \n\u89e3\u91ca\uff1a12 = 4 + 4 + 4\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 13\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a13 = 4 + 9\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_282","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int numSquares(int n) {\n        int min = n;\n        for (int i = 1; i*i &lt;= n; ++i)\n        {\n            int tmp = n / (i*i) + numSquares(n%(i*i));\n            min = min &lt; tmp ? min : tmp;\n        }\n        return min;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_283","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int numSquares(int n) {\n        vector&lt;int&gt; f(n + 1);\n        for (int i = 1; i &lt;= n; i++) {\n            int minn = INT_MAX;\n            for (int j = 1; j * j &lt;= i; j++) {\n                minn = min(minn, f[i - j * j]);\n            }\n            f[i] = minn + 1;\n        }\n        return f[n];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_284","title":"\u611f\u60f3","text":"<p>\u786e\u5b9e\u8be5\u7528dp\u7684, \u9012\u5f52\u591a\u4e86\u5f88\u591a\u6b21\u91cd\u590d</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#283-easy","title":"283. \u79fb\u52a8\u96f6(easy)","text":"<p>2023/9/7</p> <p>00 : 02 : 38</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_285","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code>\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 <code>0</code> \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p> <p>\u8bf7\u6ce8\u610f \uff0c\u5fc5\u987b\u5728\u4e0d\u590d\u5236\u6570\u7ec4\u7684\u60c5\u51b5\u4e0b\u539f\u5730\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: nums = [0,1,0,3,12]\n\u8f93\u51fa: [1,3,12,0,0]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: nums = [0]\n\u8f93\u51fa: [0]\n</code></pre> <p>\u63d0\u793a:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5c3d\u91cf\u51cf\u5c11\u5b8c\u6210\u7684\u64cd\u4f5c\u6b21\u6570\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_286","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int cnt = 0;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (nums[i] != 0)\n            {\n                swap(nums[i], nums[cnt++]);\n            }\n        }\n\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_287","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size(), left = 0, right = 0;\n        while (right &lt; n) {\n            if (nums[right]) {\n                swap(nums[left], nums[right]);\n                left++;\n            }\n            right++;\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_288","title":"\u611f\u60f3","text":"<p>\u5f88\u7b80\u5355, \u53cc\u6307\u9488\u4ea4\u6362\u5373\u53ef</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#287-medium","title":"287. \u5bfb\u627e\u91cd\u590d\u6570(medium)","text":"<p>2023/9/7</p> <p>00 : 52 : 22</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_289","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b <code>n + 1</code> \u4e2a\u6574\u6570\u7684\u6570\u7ec4 <code>nums</code> \uff0c\u5176\u6570\u5b57\u90fd\u5728 <code>[1, n]</code> \u8303\u56f4\u5185\uff08\u5305\u62ec <code>1</code> \u548c <code>n</code>\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002</p> <p>\u5047\u8bbe <code>nums</code> \u53ea\u6709 \u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570 \uff0c\u8fd4\u56de \u8fd9\u4e2a\u91cd\u590d\u7684\u6570 \u3002</p> <p>\u4f60\u8bbe\u8ba1\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b \u4e0d\u4fee\u6539 \u6570\u7ec4 <code>nums</code> \u4e14\u53ea\u7528\u5e38\u91cf\u7ea7 <code>O(1)</code> \u7684\u989d\u5916\u7a7a\u95f4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,3,4,2,2]\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,1,3,4,2]\n\u8f93\u51fa\uff1a3\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 105</code></li> <li><code>nums.length == n + 1</code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> <li><code>nums</code> \u4e2d \u53ea\u6709\u4e00\u4e2a\u6574\u6570 \u51fa\u73b0 \u4e24\u6b21\u6216\u591a\u6b21 \uff0c\u5176\u4f59\u6574\u6570\u5747\u53ea\u51fa\u73b0 \u4e00\u6b21</li> </ul> <p>\u8fdb\u9636\uff1a</p> <ul> <li>\u5982\u4f55\u8bc1\u660e <code>nums</code> \u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57?</li> <li>\u4f60\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a\u7ebf\u6027\u7ea7\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n)</code> \u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_290","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findDuplicate(vector&lt;int&gt;&amp; nums) {\n        int slow = 0, fast = 0;\n        do\n        {\n            slow = nums[slow];\n            fast = nums[nums[fast]];\n        }while (slow != fast);\n        slow = 0;\n        while (slow != fast)\n        {\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n        return slow;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_291","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findDuplicate(vector&lt;int&gt;&amp; nums) {\n        int slow = 0, fast = 0;\n        do\n        {\n            slow = nums[slow];\n            fast = nums[nums[fast]];\n        }while (slow != fast);\n        slow = 0;\n        while (slow != fast)\n        {\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n        return slow;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_292","title":"\u611f\u60f3","text":"<p>\u60f3\u4e0d\u5230O(n)+O(1)\u7684\u7b97\u6cd5, \u770b\u4e86\u9898\u89e3\u518d\u5199\u7684</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#297-hard","title":"297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316(hard)","text":"<p>2023/9/7</p> <p>00 : 25 : 36</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_293","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002</p> <p>\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002</p> <p>\u63d0\u793a: \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u4e0e LeetCode \u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605 LeetCode \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u683c\u5f0f\u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u91c7\u7528\u5176\u4ed6\u7684\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [1,2,3,null,null,4,5]\n\u8f93\u51fa\uff1a[1,2,3,null,null,4,5]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1]\n\u8f93\u51fa\uff1a[1]\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1,2]\n\u8f93\u51fa\uff1a[1,2]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u7ed3\u70b9\u6570\u5728\u8303\u56f4 <code>[0, 104]</code> \u5185</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_294","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n    void rserialize(TreeNode* root, string&amp; str) {\n        if (root == nullptr)\n        {\n            str += \"None,\";\n        }\n        else\n        {\n            str += to_string(root-&gt;val)+',';\n            rserialize(root-&gt;left, str);\n            rserialize(root-&gt;right, str);\n        }\n\n    }\n\n    TreeNode* rdeserialize(list&lt;string&gt;&amp; data) {\n        if (data.front() == \"None\")\n        {\n            data.erase(data.begin());\n            return nullptr;\n        }\n        TreeNode* root = new TreeNode(stoi(data.front()));\n        data.erase(data.begin());\n        root-&gt;left = rdeserialize(data);\n        root-&gt;right = rdeserialize(data);\n        return root;\n    }\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string str;\n        rserialize(root, str);\n        return str;\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        list&lt;string&gt; dataArray;\n        string str;\n        for (auto &amp;ch : data)\n        {\n            if (ch == ',')\n            {\n                dataArray.push_back(str);\n                str.clear();\n            }\n            else\n            {\n                str += ch;\n            }\n        }\n        return rdeserialize(dataArray);\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_295","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Codec {\npublic:\n    void rserialize(TreeNode* root, string&amp; str) {\n        if (root == nullptr) {\n            str += \"None,\";\n        } else {\n            str += to_string(root-&gt;val) + \",\";\n            rserialize(root-&gt;left, str);\n            rserialize(root-&gt;right, str);\n        }\n    }\n\n    string serialize(TreeNode* root) {\n        string ret;\n        rserialize(root, ret);\n        return ret;\n    }\n\n    TreeNode* rdeserialize(list&lt;string&gt;&amp; dataArray) {\n        if (dataArray.front() == \"None\") {\n            dataArray.erase(dataArray.begin());\n            return nullptr;\n        }\n\n        TreeNode* root = new TreeNode(stoi(dataArray.front()));\n        dataArray.erase(dataArray.begin());\n        root-&gt;left = rdeserialize(dataArray);\n        root-&gt;right = rdeserialize(dataArray);\n        return root;\n    }\n\n    TreeNode* deserialize(string data) {\n        list&lt;string&gt; dataArray;\n        string str;\n        for (auto&amp; ch : data) {\n            if (ch == ',') {\n                dataArray.push_back(str);\n                str.clear();\n            } else {\n                str.push_back(ch);\n            }\n        }\n        if (!str.empty()) {\n            dataArray.push_back(str);\n            str.clear();\n        }\n        return rdeserialize(dataArray);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_296","title":"\u611f\u60f3","text":"<p>\u4e5f\u662f\u51e0\u4e4e\u5bf9\u7740\u7b54\u6848\u5199\u7684, \u60f3\u590d\u6742\u4e86\u611f\u89c9, \u800c\u4e14\u4e5f\u4e0d\u592a\u719f\u6089to_string\u548cstoi\u8fd9\u4fe9\u51fd\u6570</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#300-medium","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217(medium)","text":"<p>2023/9/7</p> <p>01 : 06 : 25</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_297","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u5b50\u5e8f\u5217 \u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c<code>[3,6,2,7]</code> \u662f\u6570\u7ec4 <code>[0,3,1,6,2,2,7]</code> \u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [10,9,2,5,3,7,101,18]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u56e0\u6b64\u957f\u5ea6\u4e3a 4 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [0,1,0,3,2,3]\n\u8f93\u51fa\uff1a4\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [7,7,7,7,7,7,7]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2500</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul> <p>\u8fdb\u9636\uff1a</p> <ul> <li>\u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 <code>O(n log(n))</code> \u5417?</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_298","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; res;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            auto p = lower_bound(res.begin(), res.end(), nums[i]);\n            if (p == res.end())\n            {\n                res.push_back(nums[i]);\n            }\n            else\n            {\n                swap(*p, nums[i]);\n            }\n        }\n        return res.size();\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_299","title":"\u53c2\u8003\u7b54\u6848","text":"<p>\u7565</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_300","title":"\u611f\u60f3","text":"<p>\u5f88\u795e\u5947\u7684\u7b97\u6cd5, \u770b\u7740\u7b54\u6848\u5199\u7684\u4e5f\u662f, \u5bf9\u7740\u4ee3\u7801\u7406\u89e3\u662f\u6700\u5bb9\u6613\u7406\u89e3\u7684\u4e86()</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#301-hard","title":"301. \u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7(hard)","text":"<p>2023/9/7</p> <p>00 : 46 : 33</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_301","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u82e5\u5e72\u62ec\u53f7\u548c\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u5220\u9664\u6700\u5c0f\u6570\u91cf\u7684\u65e0\u6548\u62ec\u53f7\uff0c\u4f7f\u5f97\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6709\u6548\u3002</p> <p>\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"()())()\"\n\u8f93\u51fa\uff1a[\"(())()\",\"()()()\"]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"(a)())()\"\n\u8f93\u51fa\uff1a[\"(a())()\",\"(a)()()\"]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \")(\"\n\u8f93\u51fa\uff1a[\"\"]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 25</code></li> <li><code>s</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u4ee5\u53ca\u62ec\u53f7 <code>'('</code> \u548c <code>')'</code> \u7ec4\u6210</li> <li><code>s</code> \u4e2d\u81f3\u591a\u542b <code>20</code> \u4e2a\u62ec\u53f7</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_302","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int max = 0;\n    void backTrace(string s, vector&lt;string&gt;&amp; ret, int state, string str)\n    {\n        if (state &lt; 0 || s.size() &lt; state || s.size() + str.size() &lt; max)\n        {\n            return;\n        }\n        if (s.size() == 0)\n        {\n            if (state == 0)\n            {\n                if (max &lt; str.size())\n                {\n                    ret = vector&lt;string&gt;(1, str);\n                    max = str.size();\n                }\n                else if (max == str.size() &amp;&amp; find(ret.begin(), ret.end(), str) == ret.end())\n                {\n                    ret.push_back(str);\n                }\n            }\n            return;\n        }\n        if (s[0] == '(')\n        {\n            backTrace(s.substr(1), ret, state+1, str+'(');\n            backTrace(s.substr(1), ret, state, str);\n        }\n        else if (s[0] == ')')\n        {\n            backTrace(s.substr(1), ret, state-1, str+')');\n            backTrace(s.substr(1), ret, state, str);\n        }\n        else\n        {\n            backTrace(s.substr(1), ret, state, str+s[0]);\n        }\n    }\n    vector&lt;string&gt; removeInvalidParentheses(string s) {\n        vector&lt;string&gt; ret;\n        backTrace(s, ret, 0, \"\");\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_303","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; res;\n    vector&lt;string&gt; removeInvalidParentheses(string s) {\n        int lremove = 0;\n        int rremove = 0;\n\n        for (char c : s) {\n            if (c == '(') {\n                lremove++;\n            } else if (c == ')') {\n                if (lremove == 0) {\n                    rremove++;\n                } else {\n                    lremove--;\n                }\n            }\n        }\n        helper(s, 0, lremove, rremove);\n        return res;\n    }\n\n    void helper(string str, int start, int lremove, int rremove) {\n        if (lremove == 0 &amp;&amp; rremove == 0) {\n            if (isValid(str)) {\n                res.push_back(str);\n            }\n            return;\n        }\n        for (int i = start; i &lt; str.size(); i++) {\n            if (i != start &amp;&amp; str[i] == str[i - 1]) {\n                continue;\n            }\n            // \u5982\u679c\u5269\u4f59\u7684\u5b57\u7b26\u65e0\u6cd5\u6ee1\u8db3\u53bb\u6389\u7684\u6570\u91cf\u8981\u6c42\uff0c\u76f4\u63a5\u8fd4\u56de\n            if (lremove + rremove &gt; str.size() - i) {\n                return;\n            } \n            // \u5c1d\u8bd5\u53bb\u6389\u4e00\u4e2a\u5de6\u62ec\u53f7\n            if (lremove &gt; 0 &amp;&amp; str[i] == '(') {\n                helper(str.substr(0, i) + str.substr(i + 1), i, lremove - 1, rremove);\n            }\n            // \u5c1d\u8bd5\u53bb\u6389\u4e00\u4e2a\u53f3\u62ec\u53f7\n            if (rremove &gt; 0 &amp;&amp; str[i] == ')') {\n                helper(str.substr(0, i) + str.substr(i + 1), i, lremove, rremove - 1);\n            }\n        }\n    }\n\n    inline bool isValid(const string &amp; str) {\n        int cnt = 0;\n\n        for (int i = 0; i &lt; str.size(); i++) {\n            if (str[i] == '(') {\n                cnt++;\n            } else if (str[i] == ')') {\n                cnt--;\n                if (cnt &lt; 0) {\n                    return false;\n                }\n            }\n        }\n\n        return cnt == 0;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_304","title":"\u611f\u60f3","text":"<p>\u56de\u6eaf\u8bf4\u5f97\u597d\u542c, \u5176\u5b9e\u5c31\u662f\u66b4\u529b\u7834\u89e3, \u52a0\u5165\u4e86\u4e00\u70b9\u526a\u679d\u800c\u5df2, \u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8, \u4f46\u662f\u770b\u9898\u89e3\u7684\u51e0\u4e2a\u65b9\u6cd5\u90fd\u662f\\(O(n\\times 2^n)\\)\u7684\u590d\u6742\u5ea6, \u6240\u4ee5\u6211\u9009\u62e9\u6700\u81ea\u7136\u7684\u56de\u6eaf\u526a\u679d\u7b97\u6cd5\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#309-medium","title":"309. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u51b7\u51bb\u671f(medium)","text":"<p>2023/9/8</p> <p>00 : 46 : 47</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_305","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4<code>prices</code>\uff0c\u5176\u4e2d\u7b2c <code>prices[i]</code> \u8868\u793a\u7b2c <code>*i*</code> \u5929\u7684\u80a1\u7968\u4ef7\u683c \u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09:</p> <ul> <li>\u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: prices = [1,2,3,0,2]\n\u8f93\u51fa: 3 \n\u89e3\u91ca: \u5bf9\u5e94\u7684\u4ea4\u6613\u72b6\u6001\u4e3a: [\u4e70\u5165, \u5356\u51fa, \u51b7\u51bb\u671f, \u4e70\u5165, \u5356\u51fa]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: prices = [1]\n\u8f93\u51fa: 0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= prices.length &lt;= 5000</code></li> <li><code>0 &lt;= prices[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_306","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int max(int x, int y)\n    {\n        return x &gt; y ? x : y;\n    }\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int n = prices.size();\n        int res = 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(3, 0));\n        // dp[i][0] -&gt; \u7b2ci\u5929\u4e70\u5165\u7684\u6536\u76ca\n        // dp[i][1] -&gt; \u7b2ci\u5929\u51b7\u51bb\u671f\u7684\u6536\u76ca\n        // dp[i][2] -&gt; \u7b2ci\u5929\u5356\u51fa\u7684\u6536\u76ca\n        dp[0][0] = -prices[0];\n        dp[0][1] = 0;\n        dp[0][2] = 0;\n        for (int i = 1; i &lt; n; ++i)\n        {\n            dp[i][0] = dp[i-1][1] - prices[i];\n            dp[i][1] = max(dp[i-1][0], max(dp[i-1][1], dp[i-1][2]));\n            for (int j = 0; j &lt; i; ++j)\n            {\n                dp[i][2] = max(dp[i][2], dp[j][0] + prices[i]);\n            }\n            res = max(res, dp[i][2]);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_307","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>int maxProfit(vector&lt;int&gt;&amp; prices) {\n       if(prices.size()==1)\n           return 0;\n       vector&lt;vector&lt;int&gt;&gt; dp(prices.size(),vector&lt;int&gt;(2));\n       dp[0][0]=-prices[0];\n       dp[1][0]=max(-prices[0],-prices[1]);\n       dp[1][1]=max(0,prices[1]-prices[0]);\n       for(int i=2;i&lt;prices.size();i++){\n           dp[i][0]=max(dp[i-1][0],dp[i-2][1]-prices[i]);\n           dp[i][1]=max(dp[i-1][1],dp[i-1][0]+prices[i]);\n       }\n       return dp[prices.size()-1][1];\n   }\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_308","title":"\u611f\u60f3","text":"<p>\u77e5\u9053\u662fdp, \u4f46\u662f\u60f3\u4e0d\u5230\u8fd9\u4e2adp\u7684\u65b9\u5f0f, \u8fd8\u662f\u8981\u591a\u505a</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#312-hard","title":"312. \u6233\u6c14\u7403(hard)","text":"<p>2023/9/8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_309","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 <code>n</code> \u4e2a\u6c14\u7403\uff0c\u7f16\u53f7\u4e3a<code>0</code> \u5230 <code>n - 1</code>\uff0c\u6bcf\u4e2a\u6c14\u7403\u4e0a\u90fd\u6807\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u5b58\u5728\u6570\u7ec4 <code>nums</code> \u4e2d\u3002</p> <p>\u73b0\u5728\u8981\u6c42\u4f60\u6233\u7834\u6240\u6709\u7684\u6c14\u7403\u3002\u6233\u7834\u7b2c <code>i</code> \u4e2a\u6c14\u7403\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97 <code>nums[i - 1] * nums[i] * nums[i + 1]</code> \u679a\u786c\u5e01\u3002 \u8fd9\u91cc\u7684 <code>i - 1</code> \u548c <code>i + 1</code> \u4ee3\u8868\u548c <code>i</code> \u76f8\u90bb\u7684\u4e24\u4e2a\u6c14\u7403\u7684\u5e8f\u53f7\u3002\u5982\u679c <code>i - 1</code>\u6216 <code>i + 1</code> \u8d85\u51fa\u4e86\u6570\u7ec4\u7684\u8fb9\u754c\uff0c\u90a3\u4e48\u5c31\u5f53\u5b83\u662f\u4e00\u4e2a\u6570\u5b57\u4e3a <code>1</code> \u7684\u6c14\u7403\u3002</p> <p>\u6c42\u6240\u80fd\u83b7\u5f97\u786c\u5e01\u7684\u6700\u5927\u6570\u91cf\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,1,5,8]\n\u8f93\u51fa\uff1a167\n\u89e3\u91ca\uff1a\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,5]\n\u8f93\u51fa\uff1a10\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_310","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int FindMaxProfit(vector&lt;int&gt; &amp;profits)\n    {\n        int max = profits[0];\n        int index = 0;\n        int n = profits.size();\n        for (int i = 1; i &lt; n; ++i)\n        {\n            if (profits[i] &gt; max)\n            {\n                max = profits[i];\n                index = i;\n            }\n        }\n        return index;\n    }\n    int maxCoins(vector&lt;int&gt; &amp;nums)\n    {\n        int n = nums.size();\n        vector&lt;int&gt; profits(n, 0);\n        if (n == 1)\n        {\n            return nums[0];\n        }\n        else if (n == 0)\n        {\n            return 0;\n        }\n        int res = 0;\n        nums.insert(nums.begin(), 1);\n        nums.insert(nums.begin(), 1);\n        nums.push_back(1);\n        nums.push_back(1);\n\n        for (int i = 0; i &lt; n; ++i)\n        {\n            int j = i;\n            i += 2;\n            profits[j] = nums[i - 1] * nums[i] * nums[i + 1] + nums[i - 2] * nums[i - 1] * (nums[i + 1] - nums[i]) + nums[i + 2] * nums[i + 1] * (nums[i - 1] - nums[i]);\n            i -= 2;\n        }\n        while (!profits.empty())\n        {\n            int index = FindMaxProfit(profits);\n\n            res += nums[index + 1] * nums[index + 2] * nums[index + 3];\n            nums.erase(nums.begin() + index + 2);\n            profits.erase(profits.begin() + index);\n            int i;\n            if (index &gt; 0)\n            {\n                i = index + 1;\n                profits[index - 1] = nums[i - 1] * nums[i] * nums[i + 1] + nums[i - 2] * nums[i - 1] * (nums[i + 1] - nums[i]) + nums[i + 2] * nums[i + 1] * (nums[i - 1] - nums[i]);\n            }\n            if (index &gt; 1)\n            {\n                i = index;\n                profits[index - 2] = nums[i - 1] * nums[i] * nums[i + 1] + nums[i - 2] * nums[i - 1] * (nums[i + 1] - nums[i]) + nums[i + 2] * nums[i + 1] * (nums[i - 1] - nums[i]);\n            }\n            if (index &lt; profits.size())\n            {\n                i = index + 2;\n                profits[index] = nums[i - 1] * nums[i] * nums[i + 1] + nums[i - 2] * nums[i - 1] * (nums[i + 1] - nums[i]) + nums[i + 2] * nums[i + 1] * (nums[i - 1] - nums[i]);\n            }\n            if (index &lt; profits.size() - 1)\n            {\n                i = index + 3;\n                profits[index + 1] = nums[i - 1] * nums[i] * nums[i + 1] + nums[i - 2] * nums[i - 1] * (nums[i + 1] - nums[i]) + nums[i + 2] * nums[i + 1] * (nums[i - 1] - nums[i]);\n            }\n        }\n        return res;\n    }\n};\n\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_311","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; rec;\n    vector&lt;int&gt; val;\n\npublic:\n    int solve(int left, int right) {\n        if (left &gt;= right - 1) {\n            return 0;\n        }\n        if (rec[left][right] != -1) {\n            return rec[left][right];\n        }\n        for (int i = left + 1; i &lt; right; i++) {\n            int sum = val[left] * val[i] * val[right];\n            sum += solve(left, i) + solve(i, right);\n            rec[left][right] = max(rec[left][right], sum);\n        }\n        return rec[left][right];\n    }\n\n    int maxCoins(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        val.resize(n + 2);\n        for (int i = 1; i &lt;= n; i++) {\n            val[i] = nums[i - 1];\n        }\n        val[0] = val[n + 1] = 1;\n        rec.resize(n + 2, vector&lt;int&gt;(n + 2, -1));\n        return solve(0, n + 1);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_312","title":"\u611f\u60f3","text":"<p>\u7528\u7684\u8d2a\u5fc3, \u6ca1\u505a\u51fa\u6765, \u5f88\u597d\u7684\u8bc1\u660e\u4e86\u5c40\u90e8\u6700\u4f18\u4e0d\u662f\u5168\u5c40\u6700\u4f18(), \u8fd9\u9898\u653e\u5f03\u4e86, \u6d45\u6d45\u8bb0\u5f55\u4e00\u4e0b\u601d\u8def: \u4e0d\u8981\u8003\u8651\u5220\u9664, \u800c\u662f\u8003\u8651\u4e00\u4e2a\u4e00\u4e2a\u589e\u52a0, \\(dp[i][j]\\)\u8868\u793a\u4ecei\u5230j\u586b\u6ee1\u80fd\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#322-medium","title":"322. \u96f6\u94b1\u5151\u6362(medium)","text":"<p>2023/9/8</p> <p>01 : 26 : 31</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_313","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>coins</code> \uff0c\u8868\u793a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01\uff1b\u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 <code>amount</code> \uff0c\u8868\u793a\u603b\u91d1\u989d\u3002</p> <p>\u8ba1\u7b97\u5e76\u8fd4\u56de\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684 \u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570 \u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de <code>-1</code> \u3002</p> <p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1acoins = [1, 2, 5], amount = 11\n\u8f93\u51fa\uff1a3 \n\u89e3\u91ca\uff1a11 = 5 + 5 + 1\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1acoins = [2], amount = 3\n\u8f93\u51fa\uff1a-1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1acoins = [1], amount = 0\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= coins.length &lt;= 12</code></li> <li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li> <li><code>0 &lt;= amount &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_314","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int FindMin(vector&lt;int&gt;&amp; coins, vector&lt;int&gt;&amp; dp, int &amp;index)\n    {\n        int min = 0x3f3f3f3f;\n        for (auto &amp; i : coins)\n        {\n            if (index &gt;= i)\n            {\n                min = min &lt; dp[index-i] ? min : dp[index-i];\n            }\n        }\n        return min;\n    }\n    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n        if (amount == 0)\n        {\n            return 0;\n        }\n        vector&lt;int&gt; dp(amount+1, 0x3f3f3f3f);\n        dp[0] = 0;\n        for (int i = 1; i &lt; amount+1; ++i)\n        {\n            int min = FindMin(coins, dp, i);\n            if (min &lt; 0x3f3f3f3f)\n                dp[i] = min + 1;\n        }\n        if (dp[amount] != 0x3f3f3f3f)\n        {\n            return dp[amount];\n        }\n        else\n        {\n            return -1;\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_315","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n        int Max = amount + 1;\n        vector&lt;int&gt; dp(amount + 1, Max);\n        dp[0] = 0;\n        for (int i = 1; i &lt;= amount; ++i) {\n            for (int j = 0; j &lt; (int)coins.size(); ++j) {\n                if (coins[j] &lt;= i) {\n                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);\n                }\n            }\n        }\n        return dp[amount] &gt; amount ? -1 : dp[amount];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_316","title":"\u611f\u60f3","text":"<p>\u8fd9\u4e2adp\u7adf\u7136\u771f\u7684\u662f\u7528\u7684amount\u7684\u5927\u5c0f, \u5176\u5b9e\u6211\u8001\u65e9\u5c31\u60f3\u5230\u8fd9\u4e2a\u65b9\u6cd5\u4e86, \u4f46\u662f\u8111\u6d4b\u53ef\u80fd\u4f1a\u8d85\u65f6\u95f4\u548c\u7a7a\u95f4\u4e8e\u662f\u5c31\u6ca1\u6709\u5199\u4e0b\u53bb, \u5728\u5c1d\u8bd5\u4e86\u5176\u4ed6\u65b9\u6848\u65e0\u679c\u4e4b\u540e\u6700\u7ec8\u8fd8\u662f\u59a5\u534f\u4e86, \u65f6\u95f4\u7adf\u7136\u8fd8\u8d85\u8fc7\u4e8685.12%</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#337-iiimedium","title":"337. \u6253\u5bb6\u52ab\u820d III(medium)","text":"<p>2023/9/8</p> <p>00 : 33 : 22</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_317","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c0f\u5077\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u533a\u3002\u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a <code>root</code> \u3002</p> <p>\u9664\u4e86 <code>root</code> \u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u201c\u7236\u201c\u623f\u5b50\u4e0e\u4e4b\u76f8\u8fde\u3002\u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u7684\u6392\u5217\u7c7b\u4f3c\u4e8e\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c \u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab \uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684 <code>root</code> \u3002\u8fd4\u56de \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b \uff0c\u5c0f\u5077\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d \u3002</p> <p>\u793a\u4f8b 1:</p> <p></p> <pre><code>\u8f93\u5165: root = [3,2,3,null,3,null,1]\n\u8f93\u51fa: 7 \n\u89e3\u91ca: \u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d 3 + 3 + 1 = 7\n</code></pre> <p>\u793a\u4f8b 2:</p> <p></p> <pre><code>\u8f93\u5165: root = [3,4,5,1,3,null,1]\n\u8f93\u51fa: 9\n\u89e3\u91ca: \u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d 4 + 5 = 9\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u7684\u8282\u70b9\u6570\u5728 <code>[1, 104]</code> \u8303\u56f4\u5185</li> <li><code>0 &lt;= Node.val &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_318","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map&lt;TreeNode*, int&gt; notInc;\n    unordered_map&lt;TreeNode*, int&gt; Inc;\n    int Include(TreeNode* root)\n    {\n        if (Inc.find(root) != Inc.end())\n        {\n            return Inc[root];\n        }\n        int tmp = root-&gt;val+NotInclude(root-&gt;left)+NotInclude(root-&gt;right);\n        Inc.insert({root, tmp});\n        return tmp;\n    }\n    int NotInclude(TreeNode* root)\n    {\n        if (root == nullptr)\n        {\n            return 0;\n        }\n        if (notInc.find(root) != notInc.end())\n        {\n            return notInc[root];\n        }\n        int tmp, a = 0, b = 0;\n        if (root-&gt;left != nullptr)\n        {\n            tmp = NotInclude(root-&gt;left);\n            a = Include(root-&gt;left);\n            a = a &gt; tmp ? a : tmp;\n        }\n        if (root-&gt;right != nullptr)\n        {\n            tmp = NotInclude(root-&gt;right);\n            b = Include(root-&gt;right);\n            b = b &gt; tmp ? b : tmp;\n        }\n        notInc.insert({root, a+b});\n        return a + b;\n    }\n    int rob(TreeNode* root) {\n        if (root == nullptr)\n        {\n            return 0;\n        }\n        int a = Include(root);\n        int b = NotInclude(root);\n        return a &gt; b ? a : b;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_319","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    unordered_map &lt;TreeNode*, int&gt; f, g;\n\n    void dfs(TreeNode* node) {\n        if (!node) {\n            return;\n        }\n        dfs(node-&gt;left);\n        dfs(node-&gt;right);\n        f[node] = node-&gt;val + g[node-&gt;left] + g[node-&gt;right];\n        g[node] = max(f[node-&gt;left], g[node-&gt;left]) + max(f[node-&gt;right], g[node-&gt;right]);\n    }\n\n    int rob(TreeNode* root) {\n        dfs(root);\n        return max(f[root], g[root]);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_320","title":"\u611f\u60f3","text":"<p>\u5341\u5206\u949f\u5c31\u53ea\u5dee\u6700\u540e\u4e24\u4e2a\u70b9\u6ca1\u8fc7\u4e86, \u65f6\u95f4\u8d85\u4e86, \u7136\u540e\u4f18\u5316\u4e86\u5f88\u591a\u4ee3\u7801\u8fd8\u662f\u8d85\u4e86, \u7a81\u7136\u60f3\u5230\u6709\u5f88\u591a\u91cd\u590d\u8ba1\u7b97, \u4e8e\u662f\u4f7f\u7528\u4e86\u54c8\u5e0c\u8868, \u6700\u540e\u548c\u6807\u51c6\u7b54\u6848\u5df2\u7ecf\u5dee\u4e0d\u591a\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#338-easy","title":"338. \u6bd4\u7279\u4f4d\u8ba1\u6570(easy)","text":"<p>2023/9/8</p> <p>00 : 06 : 06</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_321","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>n</code> \uff0c\u5bf9\u4e8e <code>0 &lt;= i &lt;= n</code> \u4e2d\u7684\u6bcf\u4e2a <code>i</code> \uff0c\u8ba1\u7b97\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d <code>1</code> \u7684\u4e2a\u6570 \uff0c\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n + 1</code> \u7684\u6570\u7ec4 <code>ans</code> \u4f5c\u4e3a\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 2\n\u8f93\u51fa\uff1a[0,1,1]\n\u89e3\u91ca\uff1a\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 5\n\u8f93\u51fa\uff1a[0,1,1,2,1,2]\n\u89e3\u91ca\uff1a\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= n &lt;= 105</code></li> </ul> <p>\u8fdb\u9636\uff1a</p> <ul> <li>\u5f88\u5bb9\u6613\u5c31\u80fd\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n log n)</code> \u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f60\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6 <code>O(n)</code> \u5185\u7528\u4e00\u8d9f\u626b\u63cf\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f</li> <li>\u4f60\u80fd\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u51fd\u6570\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f\uff08\u5982\uff0cC++ \u4e2d\u7684 <code>__builtin_popcount</code> \uff09</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_322","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int Count(int x)\n    {\n        int cnt = 0;\n        while (x)\n        {\n            cnt += x % 2 ? 1 : 0;\n            x /= 2;\n        }\n        return cnt;\n    }\n    vector&lt;int&gt; countBits(int n) {\n        vector&lt;int&gt; res(n+1, 0);\n        for (int i = 1; i &lt; n+1; ++i)\n        {\n            res[i] = Count(i);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_323","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; countBits(int n) {\n        vector&lt;int&gt; bits(n + 1);\n        for (int i = 1; i &lt;= n; i++) {\n            bits[i] = bits[i &amp; (i - 1)] + 1;\n        }\n        return bits;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_324","title":"\u611f\u60f3","text":"<p>\u9700\u8981\u7406\u89e3\u7684\u662fx&amp;(x-1)\u662fx\u53bb\u6389\u6700\u540e\u4e00\u4f4d1\u4e4b\u540e\u7684\u6570, \u6839\u636e\u8fd9\u4e2a\u7279\u6027\u5c31\u53ef\u4ee5dp\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#347-k-medium","title":"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20(medium)","text":"<p>2023/9/8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_325","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d <code>k</code> \u9ad8\u7684\u5143\u7d20\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: nums = [1,1,1,2,2,3], k = 2\n\u8f93\u51fa: [1,2]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: nums = [1], k = 1\n\u8f93\u51fa: [1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>k</code> \u7684\u53d6\u503c\u8303\u56f4\u662f <code>[1, \u6570\u7ec4\u4e2d\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570]</code></li> <li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u552f\u4e00\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6570\u7ec4\u4e2d\u524d <code>k</code> \u4e2a\u9ad8\u9891\u5143\u7d20\u7684\u96c6\u5408\u662f\u552f\u4e00\u7684</li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u6240\u8bbe\u8ba1\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u5fc5\u987b \u4f18\u4e8e <code>O(n log n)</code> \uff0c\u5176\u4e2d <code>n</code> \u662f\u6570\u7ec4\u5927\u5c0f\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_326","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; map;\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (map.find(nums[i]) != map.end())\n            {\n                map[nums[i]]++;\n            }\n            else\n            {\n                map.insert({nums[i], 1});\n            }\n        }\n        int cnt = 0;\n        vector&lt;int&gt; res(k, 0);\n        auto cmp = [&amp;](int p1, int p2){ return map[p1] &gt; map[p2]; };\n        priority_queue&lt;int, vector&lt;int&gt;, decltype(cmp)&gt; heap(cmp);\n        for (auto &amp; it : map)\n        {\n            if (cnt &lt; k)\n            {\n                heap.push(it.first);\n                cnt++;\n            }\n            else if (it.second &gt; map[heap.top()])\n            {\n                heap.pop();\n                heap.push(it.first);\n            }\n        }\n        for (int i = 0; i &lt; k; ++i)\n        {\n            res[i] = heap.top();\n            heap.pop();\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_327","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    static bool cmp(pair&lt;int, int&gt;&amp; m, pair&lt;int, int&gt;&amp; n) {\n        return m.second &gt; n.second;\n    }\n\n    vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; occurrences;\n        for (auto&amp; v : nums) {\n            occurrences[v]++;\n        }\n\n        // pair \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ee3\u8868\u6570\u7ec4\u7684\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u8be5\u503c\u51fa\u73b0\u7684\u6b21\u6570\n        priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, decltype(&amp;cmp)&gt; q(cmp);\n        for (auto&amp; [num, count] : occurrences) {\n            if (q.size() == k) {\n                if (q.top().second &lt; count) {\n                    q.pop();\n                    q.emplace(num, count);\n                }\n            } else {\n                q.emplace(num, count);\n            }\n        }\n        vector&lt;int&gt; ret;\n        while (!q.empty()) {\n            ret.emplace_back(q.top().first);\n            q.pop();\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_328","title":"\u611f\u60f3","text":"<p>\u5806+\u54c8\u5e0c</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#394-medium","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801(medium)","text":"<p>2023/9/8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_329","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7ecf\u8fc7\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u7f16\u7801\u89c4\u5219\u4e3a: <code>k[encoded_string]</code>\uff0c\u8868\u793a\u5176\u4e2d\u65b9\u62ec\u53f7\u5185\u90e8\u7684 <code>encoded_string</code> \u6b63\u597d\u91cd\u590d <code>k</code> \u6b21\u3002\u6ce8\u610f <code>k</code> \u4fdd\u8bc1\u4e3a\u6b63\u6574\u6570\u3002</p> <p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u603b\u662f\u6709\u6548\u7684\uff1b\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u683c\uff0c\u4e14\u8f93\u5165\u7684\u65b9\u62ec\u53f7\u603b\u662f\u7b26\u5408\u683c\u5f0f\u8981\u6c42\u7684\u3002</p> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u539f\u59cb\u6570\u636e\u4e0d\u5305\u542b\u6570\u5b57\uff0c\u6240\u6709\u7684\u6570\u5b57\u53ea\u8868\u793a\u91cd\u590d\u7684\u6b21\u6570 <code>k</code> \uff0c\u4f8b\u5982\u4e0d\u4f1a\u51fa\u73b0\u50cf <code>3a</code> \u6216 <code>2[4]</code> \u7684\u8f93\u5165\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"3[a]2[bc]\"\n\u8f93\u51fa\uff1a\"aaabcbc\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"3[a2[c]]\"\n\u8f93\u51fa\uff1a\"accaccacc\"\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"2[abc]3[cd]ef\"\n\u8f93\u51fa\uff1a\"abcabccdcdcdef\"\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"abc3[cd]xyz\"\n\u8f93\u51fa\uff1a\"abccdcdcdxyz\"\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 30</code></li> <li><code>s</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u65b9\u62ec\u53f7 <code>'[]'</code> \u7ec4\u6210</li> <li><code>s</code> \u4fdd\u8bc1\u662f\u4e00\u4e2a \u6709\u6548 \u7684\u8f93\u5165\u3002</li> <li><code>s</code> \u4e2d\u6240\u6709\u6574\u6570\u7684\u53d6\u503c\u8303\u56f4\u4e3a <code>[1, 300]</code> </li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_330","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string decodeString(string s) {\n        string result;\n        stack&lt;string&gt; stk;\n        int n = s.length();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (s[i] &gt;= 'a' &amp;&amp; s[i] &lt;= 'z')\n            {\n                if (stk.empty() || stk.top() == \"[\")\n                {\n                    string tmp;\n                    tmp += s[i];\n                    stk.push(tmp);\n                }\n                else\n                {\n                    stk.top() += s[i];\n                }\n            }\n            else if (s[i] == ']')\n            {\n                string tmp = stk.top();\n                string str;\n                stk.pop();\n                stk.pop();\n                int times = stoi(stk.top());\n                stk.pop();\n                for (int j = 0; j &lt; times; ++j)\n                {\n                    str += tmp;\n                }\n                if (!stk.empty() &amp;&amp; stk.top()[0] &gt;= 'a' &amp;&amp; stk.top()[0] &lt;= 'z')\n                {\n                    str = stk.top() + str;\n                    stk.pop();\n                }\n                stk.push(str);\n            }\n            else if (s[i] == '[')\n            {\n                stk.push(\"[\");\n            }\n            else\n            {\n                string tmp;\n                if (!stk.empty() &amp;&amp; stk.top()[0] &gt;= '0' &amp;&amp; stk.top()[0] &lt;= '9')\n                {\n                    tmp = stk.top();\n                    stk.pop();\n                }\n                tmp += s[i];\n                stk.push(tmp);\n            }\n        }\n\n        return stk.top();\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_331","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string getDigits(string &amp;s, size_t &amp;ptr) {\n        string ret = \"\";\n        while (isdigit(s[ptr])) {\n            ret.push_back(s[ptr++]);\n        }\n        return ret;\n    }\n\n    string getString(vector &lt;string&gt; &amp;v) {\n        string ret;\n        for (const auto &amp;s: v) {\n            ret += s;\n        }\n        return ret;\n    }\n\n    string decodeString(string s) {\n        vector &lt;string&gt; stk;\n        size_t ptr = 0;\n\n        while (ptr &lt; s.size()) {\n            char cur = s[ptr];\n            if (isdigit(cur)) {\n                // \u83b7\u53d6\u4e00\u4e2a\u6570\u5b57\u5e76\u8fdb\u6808\n                string digits = getDigits(s, ptr);\n                stk.push_back(digits);\n            } else if (isalpha(cur) || cur == '[') {\n                // \u83b7\u53d6\u4e00\u4e2a\u5b57\u6bcd\u5e76\u8fdb\u6808\n                stk.push_back(string(1, s[ptr++])); \n            } else {\n                ++ptr;\n                vector &lt;string&gt; sub;\n                while (stk.back() != \"[\") {\n                    sub.push_back(stk.back());\n                    stk.pop_back();\n                }\n                reverse(sub.begin(), sub.end());\n                // \u5de6\u62ec\u53f7\u51fa\u6808\n                stk.pop_back();\n                // \u6b64\u65f6\u6808\u9876\u4e3a\u5f53\u524d sub \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u5e94\u8be5\u51fa\u73b0\u7684\u6b21\u6570\n                int repTime = stoi(stk.back()); \n                stk.pop_back();\n                string t, o = getString(sub);\n                // \u6784\u9020\u5b57\u7b26\u4e32\n                while (repTime--) t += o; \n                // \u5c06\u6784\u9020\u597d\u7684\u5b57\u7b26\u4e32\u5165\u6808\n                stk.push_back(t);\n            }\n        }\n\n        return getString(stk);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_332","title":"\u611f\u60f3","text":"<p>\u548c\u9898\u89e3\u5dee\u4e0d\u591a, \u4e5f\u662f\u5229\u7528\u6808</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#399-medium","title":"399. \u9664\u6cd5\u6c42\u503c(medium)","text":"<p>2023/9/9</p> <p>00 : 50 : 24</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_333","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u53d8\u91cf\u5bf9\u6570\u7ec4 <code>equations</code> \u548c\u4e00\u4e2a\u5b9e\u6570\u503c\u6570\u7ec4 <code>values</code> \u4f5c\u4e3a\u5df2\u77e5\u6761\u4ef6\uff0c\u5176\u4e2d <code>equations[i] = [Ai, Bi]</code> \u548c <code>values[i]</code> \u5171\u540c\u8868\u793a\u7b49\u5f0f <code>Ai / Bi = values[i]</code> \u3002\u6bcf\u4e2a <code>Ai</code> \u6216 <code>Bi</code> \u662f\u4e00\u4e2a\u8868\u793a\u5355\u4e2a\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u53e6\u6709\u4e00\u4e9b\u4ee5\u6570\u7ec4 <code>queries</code> \u8868\u793a\u7684\u95ee\u9898\uff0c\u5176\u4e2d <code>queries[j] = [Cj, Dj]</code> \u8868\u793a\u7b2c <code>j</code> \u4e2a\u95ee\u9898\uff0c\u8bf7\u4f60\u6839\u636e\u5df2\u77e5\u6761\u4ef6\u627e\u51fa <code>Cj / Dj = ?</code> \u7684\u7ed3\u679c\u4f5c\u4e3a\u7b54\u6848\u3002</p> <p>\u8fd4\u56de \u6240\u6709\u95ee\u9898\u7684\u7b54\u6848 \u3002\u5982\u679c\u5b58\u5728\u67d0\u4e2a\u65e0\u6cd5\u786e\u5b9a\u7684\u7b54\u6848\uff0c\u5219\u7528 <code>-1.0</code> \u66ff\u4ee3\u8fd9\u4e2a\u7b54\u6848\u3002\u5982\u679c\u95ee\u9898\u4e2d\u51fa\u73b0\u4e86\u7ed9\u5b9a\u7684\u5df2\u77e5\u6761\u4ef6\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u9700\u8981\u7528 <code>-1.0</code> \u66ff\u4ee3\u8fd9\u4e2a\u7b54\u6848\u3002</p> <p>\u6ce8\u610f\uff1a\u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u6cd5\u8fd0\u7b97\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\uff0c\u4e14\u4e0d\u5b58\u5728\u4efb\u4f55\u77db\u76fe\u7684\u7ed3\u679c\u3002</p> <p>\u6ce8\u610f\uff1a\u672a\u5728\u7b49\u5f0f\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u53d8\u91cf\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u786e\u5b9a\u5b83\u4eec\u7684\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aequations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n\u8f93\u51fa\uff1a[6.00000,0.50000,-1.00000,1.00000,-1.00000]\n\u89e3\u91ca\uff1a\n\u6761\u4ef6\uff1aa / b = 2.0, b / c = 3.0\n\u95ee\u9898\uff1aa / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?\n\u7ed3\u679c\uff1a[6.0, 0.5, -1.0, 1.0, -1.0 ]\n\u6ce8\u610f\uff1ax \u662f\u672a\u5b9a\u4e49\u7684 =&gt; -1.0\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aequations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n\u8f93\u51fa\uff1a[3.75000,0.40000,5.00000,0.20000]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aequations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\n\u8f93\u51fa\uff1a[0.50000,2.00000,-1.00000,-1.00000]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= equations.length &lt;= 20</code></li> <li><code>equations[i].length == 2</code></li> <li><code>1 &lt;= Ai.length, Bi.length &lt;= 5</code></li> <li><code>values.length == equations.length</code></li> <li><code>0.0 &lt; values[i] &lt;= 20.0</code></li> <li><code>1 &lt;= queries.length &lt;= 20</code></li> <li><code>queries[i].length == 2</code></li> <li><code>1 &lt;= Cj.length, Dj.length &lt;= 5</code></li> <li><code>Ai, Bi, Cj, Dj</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u4e0e\u6570\u5b57\u7ec4\u6210</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_334","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    struct vertex\n    {\n        string name;\n        unordered_map&lt;vertex*, double&gt; sides;\n        vertex(string n) : name (n) {}\n    };\n    double dfs(string srcName, string destName, unordered_map&lt;string, vertex*&gt;&amp; vertexes, unordered_set&lt;string&gt; passedby)\n    {\n        if (srcName == destName)\n        {\n            return 1;\n        }\n        if (vertexes[srcName]-&gt;sides.find(vertexes[destName]) != vertexes[srcName]-&gt;sides.end())\n        {\n            return vertexes[srcName]-&gt;sides[vertexes[destName]];\n        }\n\n        passedby.insert(srcName);\n        for (auto &amp; side : vertexes[srcName]-&gt;sides)\n        {\n            if (passedby.find(side.first-&gt;name) != passedby.end())\n            {\n                continue;\n            }\n            double tmp = dfs(side.first-&gt;name, destName, vertexes, passedby);\n            if (tmp != -1)\n            {\n                return tmp * side.second;\n            }\n        }\n        return -1;\n    }\n    vector&lt;double&gt; calcEquation(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;double&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries) {\n        int n = equations.size();\n        unordered_map&lt;string, vertex*&gt; vertexes;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            string srcName = equations[i][0];\n            string destName = equations[i][1];\n            if (vertexes.find(srcName) == vertexes.end())\n            {\n                vertexes.insert({srcName, new vertex(srcName)});\n            }\n            if (vertexes.find(destName) == vertexes.end())\n            {\n                vertexes.insert({destName, new vertex(destName)});\n            }\n            vertexes[srcName]-&gt;sides.insert({vertexes[destName], values[i]});\n            vertexes[destName]-&gt;sides.insert({vertexes[srcName], 1/values[i]});\n        }\n\n        int size = queries.size();\n        vector&lt;double&gt; ret(size, -1.0);\n        for (int i = 0; i &lt; size; ++i)\n        {\n            string srcName = queries[i][0];\n            string destName = queries[i][1];\n            if (vertexes.find(srcName) != vertexes.end() &amp;&amp; vertexes.find(destName) != vertexes.end())\n            {\n                unordered_set&lt;string&gt; passedby;\n                ret[i] = dfs(srcName, destName, vertexes, passedby);\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_335","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findf(vector&lt;int&gt;&amp; f, vector&lt;double&gt;&amp; w, int x) {\n        if (f[x] != x) {\n            int father = findf(f, w, f[x]);\n            w[x] = w[x] * w[f[x]];\n            f[x] = father;\n        }\n        return f[x];\n    }\n\n    void merge(vector&lt;int&gt;&amp; f, vector&lt;double&gt;&amp; w, int x, int y, double val) {\n        int fx = findf(f, w, x);\n        int fy = findf(f, w, y);\n        f[fx] = fy;\n        w[fx] = val * w[y] / w[x];\n    }\n\n    vector&lt;double&gt; calcEquation(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;double&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries) {\n        int nvars = 0;\n        unordered_map&lt;string, int&gt; variables;\n\n        int n = equations.size();\n        for (int i = 0; i &lt; n; i++) {\n            if (variables.find(equations[i][0]) == variables.end()) {\n                variables[equations[i][0]] = nvars++;\n            }\n            if (variables.find(equations[i][1]) == variables.end()) {\n                variables[equations[i][1]] = nvars++;\n            }\n        }\n        vector&lt;int&gt; f(nvars);\n        vector&lt;double&gt; w(nvars, 1.0);\n        for (int i = 0; i &lt; nvars; i++) {\n            f[i] = i;\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            int va = variables[equations[i][0]], vb = variables[equations[i][1]];\n            merge(f, w, va, vb, values[i]);\n        }\n        vector&lt;double&gt; ret;\n        for (const auto&amp; q: queries) {\n            double result = -1.0;\n            if (variables.find(q[0]) != variables.end() &amp;&amp; variables.find(q[1]) != variables.end()) {\n                int ia = variables[q[0]], ib = variables[q[1]];\n                int fa = findf(f, w, ia), fb = findf(f, w, ib);\n                if (fa == fb) {\n                    result = w[ia] / w[ib];\n                }\n            }\n            ret.push_back(result);\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_336","title":"\u611f\u60f3","text":"<p>\u8fd9\u9898\u6709\u70b9\u96be, \u6211\u7684\u65b9\u6cd5\u662f\u90bb\u63a5\u8868+dfs, \u6548\u7387\u662f\u4e0d\u5982\u5e76\u67e5\u96c6\u7684, \u4f46\u662f\u5e76\u67e5\u96c6\u6709\u70b9\u4e0d\u77e5\u9053\u600e\u4e48\u5199</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#406-medium","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217(medium)","text":"<p>2023/9/9</p> <p>00 : 30 : 43</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_337","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u6570\u7ec4 <code>people</code> \u8868\u793a\u961f\u5217\u4e2d\u4e00\u4e9b\u4eba\u7684\u5c5e\u6027\uff08\u4e0d\u4e00\u5b9a\u6309\u987a\u5e8f\uff09\u3002\u6bcf\u4e2a <code>people[i] = [hi, ki]</code> \u8868\u793a\u7b2c <code>i</code> \u4e2a\u4eba\u7684\u8eab\u9ad8\u4e3a <code>hi</code> \uff0c\u524d\u9762 \u6b63\u597d \u6709 <code>ki</code> \u4e2a\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8e <code>hi</code> \u7684\u4eba\u3002</p> <p>\u8bf7\u4f60\u91cd\u65b0\u6784\u9020\u5e76\u8fd4\u56de\u8f93\u5165\u6570\u7ec4 <code>people</code> \u6240\u8868\u793a\u7684\u961f\u5217\u3002\u8fd4\u56de\u7684\u961f\u5217\u5e94\u8be5\u683c\u5f0f\u5316\u4e3a\u6570\u7ec4 <code>queue</code> \uff0c\u5176\u4e2d <code>queue[j] = [hj, kj]</code> \u662f\u961f\u5217\u4e2d\u7b2c <code>j</code> \u4e2a\u4eba\u7684\u5c5e\u6027\uff08<code>queue[0]</code> \u662f\u6392\u5728\u961f\u5217\u524d\u9762\u7684\u4eba\uff09\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1apeople = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n\u8f93\u51fa\uff1a[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n\u89e3\u91ca\uff1a\n\u7f16\u53f7\u4e3a 0 \u7684\u4eba\u8eab\u9ad8\u4e3a 5 \uff0c\u6ca1\u6709\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\u3002\n\u7f16\u53f7\u4e3a 1 \u7684\u4eba\u8eab\u9ad8\u4e3a 7 \uff0c\u6ca1\u6709\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\u3002\n\u7f16\u53f7\u4e3a 2 \u7684\u4eba\u8eab\u9ad8\u4e3a 5 \uff0c\u6709 2 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 0 \u548c 1 \u7684\u4eba\u3002\n\u7f16\u53f7\u4e3a 3 \u7684\u4eba\u8eab\u9ad8\u4e3a 6 \uff0c\u6709 1 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 1 \u7684\u4eba\u3002\n\u7f16\u53f7\u4e3a 4 \u7684\u4eba\u8eab\u9ad8\u4e3a 4 \uff0c\u6709 4 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 0\u30011\u30012\u30013 \u7684\u4eba\u3002\n\u7f16\u53f7\u4e3a 5 \u7684\u4eba\u8eab\u9ad8\u4e3a 7 \uff0c\u6709 1 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 1 \u7684\u4eba\u3002\n\u56e0\u6b64 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] \u662f\u91cd\u65b0\u6784\u9020\u540e\u7684\u961f\u5217\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1apeople = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n\u8f93\u51fa\uff1a[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= people.length &lt;= 2000</code></li> <li><code>0 &lt;= hi &lt;= 106</code></li> <li><code>0 &lt;= ki &lt; people.length</code></li> <li>\u9898\u76ee\u6570\u636e\u786e\u4fdd\u961f\u5217\u53ef\u4ee5\u88ab\u91cd\u5efa</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_338","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; reconstructQueue(vector&lt;vector&lt;int&gt;&gt;&amp; people) {\n        auto func = [](vector&lt;int&gt; a, vector&lt;int&gt; b){\n            if (a[0] &gt; b[0])\n            {\n                return true;\n            }\n            else if (a[0] == b[0])\n            {\n                return a[1] &lt; b[1];\n            }\n            else\n            {\n                return false;\n            }\n        };\n        sort(people.begin(), people.end(), func);\n\n        int n = people.size();\n        vector&lt;vector&lt;int&gt;&gt; res;\n        res.push_back(people[0]);\n        for (int i = 1; i &lt; n; ++i)\n        {\n            res.insert(res.begin() + people[i][1], people[i]);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_339","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; reconstructQueue(vector&lt;vector&lt;int&gt;&gt;&amp; people) {\n        sort(people.begin(), people.end(), [](const vector&lt;int&gt;&amp; u, const vector&lt;int&gt;&amp; v) {\n            return u[0] &gt; v[0] || (u[0] == v[0] &amp;&amp; u[1] &lt; v[1]);\n        });\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for (const vector&lt;int&gt;&amp; person: people) {\n            ans.insert(ans.begin() + person[1], person);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_340","title":"\u611f\u60f3","text":"<p>\u4e00\u53e5\u8bdd\u89e3\u91ca\u7b54\u6848\uff1a\u9ad8\u4e2a\u5b50\u7684\u4eba\u662f\u770b\u4e0d\u5230\u4f4e\u4e2a\u5b50\u4eba\u7684</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#416-medium","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6(medium)","text":"<p>2023/9/9</p> <p>00 : 24 : 20</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_341","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u53ea\u5305\u542b\u6b63\u6574\u6570 \u7684 \u975e\u7a7a \u6570\u7ec4 <code>nums</code> \u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,5,11,5]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u6570\u7ec4\u53ef\u4ee5\u5206\u5272\u6210 [1, 5, 5] \u548c [11] \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3,5]\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\u6570\u7ec4\u4e0d\u80fd\u5206\u5272\u6210\u4e24\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u5b50\u96c6\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_342","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int sum = 0;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            sum += nums[i];\n        }\n        if (sum % 2)\n        {\n            return false;\n        }\n        else \n        {\n            sum /= 2;\n        }\n\n        sort(nums.begin(), nums.end());\n        vector&lt;vector&lt;bool&gt;&gt; dp(sum+1, vector&lt;bool&gt;(n+1, false));\n        dp[0][0] = true;\n        for (int i = 1; i &lt;= sum; ++i)\n        {\n            for (int j = 0; j &lt; n &amp;&amp; i &gt;= nums[j]; ++j)\n            {\n                if (dp[i-nums[j]][0] &amp;&amp; dp[i-nums[j]][j+1] == false)\n                {\n                    dp[i] = dp[i-nums[j]];\n                    dp[i][j+1] = true;\n                    break;\n                }\n            }\n        }\n        return dp[sum][0];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_343","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n &lt; 2) {\n            return false;\n        }\n        int sum = accumulate(nums.begin(), nums.end(), 0);\n        int maxNum = *max_element(nums.begin(), nums.end());\n        if (sum &amp; 1) {\n            return false;\n        }\n        int target = sum / 2;\n        if (maxNum &gt; target) {\n            return false;\n        }\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(target + 1, 0));\n        for (int i = 0; i &lt; n; i++) {\n            dp[i][0] = true;\n        }\n        dp[0][nums[0]] = true;\n        for (int i = 1; i &lt; n; i++) {\n            int num = nums[i];\n            for (int j = 1; j &lt;= target; j++) {\n                if (j &gt;= num) {\n                    dp[i][j] = dp[i - 1][j] | dp[i - 1][j - num];\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        return dp[n - 1][target];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_344","title":"\u611f\u60f3","text":"<p>\u6211\u7684dp\u4e5f\u4e0d\u9519, \u65f6\u95f4\u7a7a\u95f4\u90fd\u8fd8\u53ef\u4ee5</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#437-iiimedium","title":"437. \u8def\u5f84\u603b\u548c III(medium)","text":"<p>2023/9/10</p> <p>00 : 8 : 20</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_345","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u548c\u4e00\u4e2a\u6574\u6570 <code>targetSum</code> \uff0c\u6c42\u8be5\u4e8c\u53c9\u6811\u91cc\u8282\u70b9\u503c\u4e4b\u548c\u7b49\u4e8e <code>targetSum</code> \u7684 \u8def\u5f84 \u7684\u6570\u76ee\u3002</p> <p>\u8def\u5f84 \u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\uff08\u53ea\u80fd\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff09\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u548c\u7b49\u4e8e 8 \u7684\u8def\u5f84\u6709 3 \u6761\uff0c\u5982\u56fe\u6240\u793a\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n\u8f93\u51fa\uff1a3\n</code></pre> <p>\u63d0\u793a:</p> <ul> <li>\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u7684\u8303\u56f4\u662f <code>[0,1000]</code></li> <li><code>-109 &lt;= Node.val &lt;= 109</code> </li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code> </li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_346","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void dfs(TreeNode* root, int targetSum, int&amp; res, bool included)\n    {\n        if (root == nullptr || abs(targetSum) &gt; 0x3f3f3f3f)\n        {\n            return;\n        }\n        if (root-&gt;val == targetSum)\n        {\n            res++;\n        }\n        if (!included)\n        {\n            dfs(root-&gt;left, targetSum, res, false);\n            dfs(root-&gt;right, targetSum, res, false);\n\n        }\n        dfs(root-&gt;left, targetSum-root-&gt;val, res, true);\n        dfs(root-&gt;right, targetSum-root-&gt;val, res, true);\n    }\n    int pathSum(TreeNode* root, int targetSum) {\n        int res = 0;\n        dfs(root, targetSum, res, false);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_347","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    unordered_map&lt;long long, int&gt; prefix;\n\n    int dfs(TreeNode *root, long long curr, int targetSum) {\n        if (!root) {\n            return 0;\n        }\n\n        int ret = 0;\n        curr += root-&gt;val;\n        if (prefix.count(curr - targetSum)) {\n            ret = prefix[curr - targetSum];\n        }\n\n        prefix[curr]++;\n        ret += dfs(root-&gt;left, curr, targetSum);\n        ret += dfs(root-&gt;right, curr, targetSum);\n        prefix[curr]--;\n\n        return ret;\n    }\n\n    int pathSum(TreeNode* root, int targetSum) {\n        prefix[0] = 1;\n        return dfs(root, 0, targetSum);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_348","title":"\u611f\u60f3","text":"<p>\u524d\u7f00\u548c\u5f88\u5de7\u5999, \u503c\u5f97\u5b66\u4e60</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#438-medium","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd(medium)","text":"<p>2023/9/10</p> <p>00 : 35 : 12</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_349","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>p</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6240\u6709 <code>p</code> \u7684 \u5f02\u4f4d\u8bcd \u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</p> <p>\u5f02\u4f4d\u8bcd \u6307\u7531\u76f8\u540c\u5b57\u6bcd\u91cd\u6392\u5217\u5f62\u6210\u7684\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff09\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: s = \"cbaebabacd\", p = \"abc\"\n\u8f93\u51fa: [0,6]\n\u89e3\u91ca:\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"cba\", \u5b83\u662f \"abc\" \u7684\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f \"bac\", \u5b83\u662f \"abc\" \u7684\u5f02\u4f4d\u8bcd\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: s = \"abab\", p = \"ab\"\n\u8f93\u51fa: [0,1,2]\n\u89e3\u91ca:\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f \"ba\", \u5b83\u662f \"ab\" \u7684\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f \"ab\", \u5b83\u662f \"ab\" \u7684\u5f02\u4f4d\u8bcd\u3002\n</code></pre> <p>\u63d0\u793a:</p> <ul> <li><code>1 &lt;= s.length, p.length &lt;= 3 * 104</code></li> <li><code>s</code> \u548c <code>p</code> \u4ec5\u5305\u542b\u5c0f\u5199\u5b57\u6bcd</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_350","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool AllZero(unordered_map&lt;char, int&gt;&amp; hash)\n    {\n        for (auto&amp; it : hash)\n        {\n            if (it.second != 0)\n                return false;\n        }\n        return true;\n    }\n    vector&lt;int&gt; findAnagrams(string s, string p) {\n        int windowSize = p.length();\n        int n = s.length();\n        unordered_map&lt;char, int&gt; remain;\n        vector&lt;int&gt; res;\n        unordered_map&lt;char, int&gt; total; \n        for (int i = 0; i &lt; windowSize; ++i)\n        {\n            if (remain.find(p[i]) != remain.end())\n            {\n                remain[p[i]]++;\n                total[p[i]]++;\n            }\n            else\n            {\n                remain.insert({p[i], 1});\n                total.insert({p[i], 1});\n            }\n        }\n        for (int i = 0; i &lt; windowSize; ++i)\n        {\n            if (remain.find(s[i]) != remain.end())\n            {\n                remain[s[i]]--;\n            }\n        }\n        if (AllZero(remain))\n        {\n            res.push_back(0);\n        }\n        for (int i = 0; i &lt; n - windowSize; ++i)\n        {\n            if (total.find(s[i]) != total.end())\n            {\n                remain[s[i]]++;\n            }\n            if (total.find(s[i+windowSize]) != total.end())\n            {\n                remain[s[i+windowSize]]--;\n            }\n            if (remain[s[i]] == 0 &amp;&amp; remain[s[i+windowSize]] == 0 &amp;&amp; AllZero(remain))\n            {\n                res.push_back(i+1);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_351","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findAnagrams(string s, string p) {\n        int sLen = s.size(), pLen = p.size();\n\n        if (sLen &lt; pLen) {\n            return vector&lt;int&gt;();\n        }\n\n        vector&lt;int&gt; ans;\n        vector&lt;int&gt; count(26);\n        for (int i = 0; i &lt; pLen; ++i) {\n            ++count[s[i] - 'a'];\n            --count[p[i] - 'a'];\n        }\n\n        int differ = 0;\n        for (int j = 0; j &lt; 26; ++j) {\n            if (count[j] != 0) {\n                ++differ;\n            }\n        }\n\n        if (differ == 0) {\n            ans.emplace_back(0);\n        }\n\n        for (int i = 0; i &lt; sLen - pLen; ++i) {\n            if (count[s[i] - 'a'] == 1) {  // \u7a97\u53e3\u4e2d\u5b57\u6bcd s[i] \u7684\u6570\u91cf\u4e0e\u5b57\u7b26\u4e32 p \u4e2d\u7684\u6570\u91cf\u4ece\u4e0d\u540c\u53d8\u5f97\u76f8\u540c\n                --differ;\n            } else if (count[s[i] - 'a'] == 0) {  // \u7a97\u53e3\u4e2d\u5b57\u6bcd s[i] \u7684\u6570\u91cf\u4e0e\u5b57\u7b26\u4e32 p \u4e2d\u7684\u6570\u91cf\u4ece\u76f8\u540c\u53d8\u5f97\u4e0d\u540c\n                ++differ;\n            }\n            --count[s[i] - 'a'];\n\n            if (count[s[i + pLen] - 'a'] == -1) {  // \u7a97\u53e3\u4e2d\u5b57\u6bcd s[i+pLen] \u7684\u6570\u91cf\u4e0e\u5b57\u7b26\u4e32 p \u4e2d\u7684\u6570\u91cf\u4ece\u4e0d\u540c\u53d8\u5f97\u76f8\u540c\n                --differ;\n            } else if (count[s[i + pLen] - 'a'] == 0) {  // \u7a97\u53e3\u4e2d\u5b57\u6bcd s[i+pLen] \u7684\u6570\u91cf\u4e0e\u5b57\u7b26\u4e32 p \u4e2d\u7684\u6570\u91cf\u4ece\u76f8\u540c\u53d8\u5f97\u4e0d\u540c\n                ++differ;\n            }\n            ++count[s[i + pLen] - 'a'];\n\n            if (differ == 0) {\n                ans.emplace_back(i + 1);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_352","title":"\u611f\u60f3","text":"<p>\u6ed1\u52a8\u7a97\u53e3\u7ecf\u5178\u9898, \u6ce8\u610f\u7ec6\u8282\u5373\u53ef</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#448-easy","title":"448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57(easy)","text":"<p>2023/9/10</p> <p>00 : 16 : 08</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_353","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u542b <code>n</code> \u4e2a\u6574\u6570\u7684\u6570\u7ec4 <code>nums</code> \uff0c\u5176\u4e2d <code>nums[i]</code> \u5728\u533a\u95f4 <code>[1, n]</code> \u5185\u3002\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u5728 <code>[1, n]</code> \u8303\u56f4\u5185\u4f46\u6ca1\u6709\u51fa\u73b0\u5728 <code>nums</code> \u4e2d\u7684\u6570\u5b57\uff0c\u5e76\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [4,3,2,7,8,2,3,1]\n\u8f93\u51fa\uff1a[5,6]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,1]\n\u8f93\u51fa\uff1a[2]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 105</code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n)</code> \u7684\u60c5\u51b5\u4e0b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_354","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findDisappearedNumbers(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; res;\n        for (int j = 0; j &lt; 4; ++j)\n        {\n            for (int i = 0; i &lt; n; ++i)\n            {\n                if (nums[i] != i+1)\n                {\n                    swap(nums[i], nums[nums[i]-1]);\n                }\n            }\n        }\n\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (nums[i] != i+1)\n            {\n                res.push_back(i+1);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_355","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findDisappearedNumbers(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (auto&amp; num : nums) {\n            int x = (num - 1) % n;\n            nums[x] += n;\n        }\n        vector&lt;int&gt; ret;\n        for (int i = 0; i &lt; n; i++) {\n            if (nums[i] &lt;= n) {\n                ret.push_back(i + 1);\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_356","title":"\u611f\u60f3","text":"<p>\u6211\u7684\u65b9\u6cd5\u662f\u4e00\u4e2a\u53d6\u5de7\u7684\u65b9\u6cd5, \u6211\u6ce8\u610f\u5230\u5f53j\u4e3a2\u65f6\u53ea\u80fd\u901a\u8fc7\u4e8c\u5341\u51e0\u4e2a\u6d4b\u8bd5\u70b9, j\u4e3a3\u65f6\u53ef\u4ee5\u901a\u8fc7\u53ea\u5269\u6700\u540e\u4e24\u4e2a, j\u4e3a4\u5c31\u80fdac, \u65e0\u6cd5\u89e3\u91ca\u5176\u4e2d\u7684\u539f\u7406, \u8fd8\u662f\u770b\u9898\u89e3\u7684\u5427</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#461-easy","title":"461. \u6c49\u660e\u8ddd\u79bb(easy)","text":"<p>2023/9/10</p> <p>00 : 00 : 30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_357","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 <code>x</code> \u548c <code>y</code>\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1ax = 1, y = 4\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\n\u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1ax = 3, y = 1\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= x, y &lt;= 231 - 1</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_358","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int tmp = x ^ y;\n        int cnt = 0;\n        while (tmp)\n        {\n            if (tmp % 2)\n            {\n                cnt++;\n            }\n            tmp /= 2;\n        }\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_359","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        return __builtin_popcount(x ^ y);\n    }\n};\n\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_360","title":"\u611f\u60f3","text":"<p>\u6807\u51c6\u5e93\u7684\u8fd9\u4e2a\u51fd\u6570\u7adf\u7136\u662fO(1)\u590d\u6742\u5ea6</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#494-medium","title":"494. \u76ee\u6807\u548c(medium)","text":"<p>2023/9/10</p> <p>00 : 24 : 20</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_361","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>target</code> \u3002</p> <p>\u5411\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u524d\u6dfb\u52a0 <code>'+'</code> \u6216 <code>'-'</code> \uff0c\u7136\u540e\u4e32\u8054\u8d77\u6240\u6709\u6574\u6570\uff0c\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a \u8868\u8fbe\u5f0f \uff1a</p> <ul> <li>\u4f8b\u5982\uff0c<code>nums = [2, 1]</code> \uff0c\u53ef\u4ee5\u5728 <code>2</code> \u4e4b\u524d\u6dfb\u52a0 <code>'+'</code> \uff0c\u5728 <code>1</code> \u4e4b\u524d\u6dfb\u52a0 <code>'-'</code> \uff0c\u7136\u540e\u4e32\u8054\u8d77\u6765\u5f97\u5230\u8868\u8fbe\u5f0f <code>\"+2-1\"</code> \u3002</li> </ul> <p>\u8fd4\u56de\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u6784\u9020\u7684\u3001\u8fd0\u7b97\u7ed3\u679c\u7b49\u4e8e <code>target</code> \u7684\u4e0d\u540c \u8868\u8fbe\u5f0f \u7684\u6570\u76ee\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,1,1,1,1], target = 3\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\u4e00\u5171\u6709 5 \u79cd\u65b9\u6cd5\u8ba9\u6700\u7ec8\u76ee\u6807\u548c\u4e3a 3 \u3002\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1], target = 1\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 20</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li> <li><code>-1000 &lt;= target &lt;= 1000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_362","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    void dfs(vector&lt;int&gt;&amp; nums, int target, int index, int&amp; res)\n    {\n        if (index == nums.size()-1)\n        {\n            if (nums[index] == target)\n            {\n                res++;\n            }\n            if (nums[index] == -target)\n            {\n                res++;\n            }\n            return;\n        }\n        dfs(nums, target-nums[index], index+1, res);\n        dfs(nums, target+nums[index], index+1, res);\n    }\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n        int res = 0;\n        dfs(nums, target, 0, res);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_363","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n        int sum = 0;\n        for (int&amp; num : nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff &lt; 0 || diff % 2 != 0) {\n            return 0;\n        }\n        int n = nums.size(), neg = diff / 2;\n        vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(neg + 1));\n        dp[0][0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            int num = nums[i - 1];\n            for (int j = 0; j &lt;= neg; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if (j &gt;= num) {\n                    dp[i][j] += dp[i - 1][j - num];\n                }\n            }\n        }\n        return dp[n][neg];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_364","title":"\u611f\u60f3","text":"<p>\u8fd9\u9898\u7528dp\u5f88\u5de7\u5999, \u6bd4\u56de\u6eaf\u8981\u597d</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#538-medium","title":"538. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811(medium)","text":"<p>2023/9/10</p> <p>00 : 16 : 20</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_365","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u4e8c\u53c9 \u641c\u7d22 \u6811\u7684\u6839\u8282\u70b9\uff0c\u8be5\u6811\u7684\u8282\u70b9\u503c\u5404\u4e0d\u76f8\u540c\uff0c\u8bf7\u4f60\u5c06\u5176\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811\uff08Greater Sum Tree\uff09\uff0c\u4f7f\u6bcf\u4e2a\u8282\u70b9 <code>node</code> \u7684\u65b0\u503c\u7b49\u4e8e\u539f\u6811\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e <code>node.val</code> \u7684\u503c\u4e4b\u548c\u3002</p> <p>\u63d0\u9192\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u6ee1\u8db3\u4e0b\u5217\u7ea6\u675f\u6761\u4ef6\uff1a</p> <ul> <li>\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4ec5\u5305\u542b\u952e \u5c0f\u4e8e \u8282\u70b9\u952e\u7684\u8282\u70b9\u3002</li> <li>\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4ec5\u5305\u542b\u952e \u5927\u4e8e \u8282\u70b9\u952e\u7684\u8282\u70b9\u3002</li> <li>\u5de6\u53f3\u5b50\u6811\u4e5f\u5fc5\u987b\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u672c\u9898\u548c 1038: https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/ \u76f8\u540c</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1a[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n\u8f93\u51fa\uff1a[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [0,null,1]\n\u8f93\u51fa\uff1a[1,null,1]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1,0,2]\n\u8f93\u51fa\uff1a[3,3,2]\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [3,2,4,1]\n\u8f93\u51fa\uff1a[7,9,4,10]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u7684\u8282\u70b9\u6570\u4ecb\u4e8e <code>0</code> \u548c <code>104</code> \u4e4b\u95f4\u3002</li> <li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e <code>-104</code> \u548c <code>104</code> \u4e4b\u95f4\u3002</li> <li>\u6811\u4e2d\u7684\u6240\u6709\u503c \u4e92\u4e0d\u76f8\u540c \u3002</li> <li>\u7ed9\u5b9a\u7684\u6811\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_366","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int sum = 0;\n    void dfs(TreeNode* root)\n    {\n        if (root-&gt;right != nullptr)\n        {\n            dfs(root-&gt;right);\n        }\n        root-&gt;val += sum;\n        sum = root-&gt;val;\n        if (root-&gt;left != nullptr)\n        {\n            dfs(root-&gt;left);\n        }\n    }\n    TreeNode* convertBST(TreeNode* root) {\n        if (root == nullptr)\n        {\n            return root;\n        }\n        dfs(root);\n        return root;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_367","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int sum = 0;\n\n    TreeNode* convertBST(TreeNode* root) {\n        if (root != nullptr) {\n            convertBST(root-&gt;right);\n            sum += root-&gt;val;\n            root-&gt;val = sum;\n            convertBST(root-&gt;left);\n        }\n        return root;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_368","title":"\u611f\u60f3","text":"<p>\u53cd\u5e8f\u4e2d\u5e8f\u904d\u5386, \u633a\u597d\u7684</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#543-easy","title":"543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84(easy)","text":"<p>2023/9/10</p> <p>00 : 12 : 28</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_369","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u8be5\u6811\u7684 \u76f4\u5f84 \u3002</p> <p>\u4e8c\u53c9\u6811\u7684 \u76f4\u5f84 \u662f\u6307\u6811\u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6700\u957f\u8def\u5f84\u7684 \u957f\u5ea6 \u3002\u8fd9\u6761\u8def\u5f84\u53ef\u80fd\u7ecf\u8fc7\u4e5f\u53ef\u80fd\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9 <code>root</code> \u3002</p> <p>\u4e24\u8282\u70b9\u4e4b\u95f4\u8def\u5f84\u7684 \u957f\u5ea6 \u7531\u5b83\u4eec\u4e4b\u95f4\u8fb9\u6570\u8868\u793a\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot = [1,2,3,4,5]\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a3 \uff0c\u53d6\u8def\u5f84 [4,2,1,3] \u6216 [5,2,1,3] \u7684\u957f\u5ea6\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot = [1,2]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[1, 104]</code> \u5185</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_370","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int max = 0;\n    int dfs(TreeNode* root)\n    {\n        if (root == nullptr)\n        {\n            return 0;\n        }\n        int left = dfs(root-&gt;left);\n        int right = dfs(root-&gt;right);\n        max = left + right + 1 &gt; max ? left + right + 1 : max;\n        return left &gt; right ? left+1 : right+1;\n    }\n    int diameterOfBinaryTree(TreeNode* root) {\n        int tmp = dfs(root);\n        return max &gt; tmp ? max-1 : tmp-1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_371","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\n    int ans;\n    int depth(TreeNode* rt){\n        if (rt == NULL) {\n            return 0; // \u8bbf\u95ee\u5230\u7a7a\u8282\u70b9\u4e86\uff0c\u8fd4\u56de0\n        }\n        int L = depth(rt-&gt;left); // \u5de6\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6df1\u5ea6\n        int R = depth(rt-&gt;right); // \u53f3\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6df1\u5ea6\n        ans = max(ans, L + R + 1); // \u8ba1\u7b97d_node\u5373L+R+1 \u5e76\u66f4\u65b0ans\n        return max(L, R) + 1; // \u8fd4\u56de\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6df1\u5ea6\n    }\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_372","title":"\u611f\u60f3","text":"<p>\u7b80\u5355\u7684dfs</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#560-k-medium","title":"560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4(medium)","text":"<p>2023/9/10</p> <p>00 : 30 : 19</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_373","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de \u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a <code>k</code> \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u4e2a\u6570 \u3002</p> <p>\u5b50\u6570\u7ec4\u662f\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8fde\u7eed\u975e\u7a7a\u5e8f\u5217\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,1,1], k = 2\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3], k = 3\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>-107 &lt;= k &lt;= 107</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_374","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; prifixSum;\n        int n = nums.size();\n        int sum = 0;\n        int res = 0;\n        prifixSum[0] = 1;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            sum += nums[i];\n            if (prifixSum.find(sum-k) != prifixSum.end())\n            {\n                res += prifixSum[sum-k];\n            }\n            prifixSum[sum]++;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_375","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; mp;\n        mp[0] = 1;\n        int count = 0, pre = 0;\n        for (auto&amp; x:nums) {\n            pre += x;\n            if (mp.find(pre - k) != mp.end()) {\n                count += mp[pre - k];\n            }\n            mp[pre]++;\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_376","title":"\u611f\u60f3","text":"<p>\u5bf9\u4e8e\u8fd9\u9053\u9898\u524d\u7f00\u548c\u5c31\u662f\u795e</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#581-medium","title":"581. \u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4(medium)","text":"<p>2023/9/10</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_377","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u4f60\u9700\u8981\u627e\u51fa\u4e00\u4e2a \u8fde\u7eed\u5b50\u6570\u7ec4 \uff0c\u5982\u679c\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u6570\u7ec4\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002</p> <p>\u8bf7\u4f60\u627e\u51fa\u7b26\u5408\u9898\u610f\u7684 \u6700\u77ed \u5b50\u6570\u7ec4\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,6,4,8,10,9,15]\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\u4f60\u53ea\u9700\u8981\u5bf9 [6, 4, 8, 10, 9] \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u8868\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3,4]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-105 &lt;= nums[i] &lt;= 105</code></li> </ul> <p>\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n)</code> \u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_378","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findUnsortedSubarray(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; tmp = nums;\n        sort(tmp.begin(), tmp.end());\n        int left = 0, right = n-1;\n        while (left &lt; n &amp;&amp; tmp[left] == nums[left])\n        {\n            left++;\n        }\n        if (left == n)\n        {\n            return 0;\n        }\n        while (right &gt;= 0 &amp;&amp; tmp[right] == nums[right])\n        {\n            right--;\n        }\n        return right - left + 1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_379","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findUnsortedSubarray(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int maxn = INT_MIN, right = -1;\n        int minn = INT_MAX, left = -1;\n        for (int i = 0; i &lt; n; i++) {\n            if (maxn &gt; nums[i]) {\n                right = i;\n            } else {\n                maxn = nums[i];\n            }\n            if (minn &lt; nums[n - i - 1]) {\n                left = n - i - 1;\n            } else {\n                minn = nums[n - i - 1];\n            }\n        }\n        return right == -1 ? 0 : right - left + 1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_380","title":"\u611f\u60f3","text":"<p>\u6ca1\u60f3\u51fa\u6765\u8fd9\u4e2a\u4e00\u6b21\u904d\u5386\u7684\u65b9\u6cd5, \u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u5efa\u6570\u7ec4\u4e86 \u4e00\u53e5\u8bdd\u63cf\u8ff0\u9898\u89e3:</p> <p>\u53f3\u8fb9\u754c: \u4ece\u524d\u5f80\u540e\u627e\u6700\u540e\u4e00\u4e2a\u4e0d\u6bd4\u5de6\u8fb9\u6240\u6709\u5143\u7d20\u90fd\u5927\u7684\u5143\u7d20</p> <p>\u5de6\u8fb9\u754c: \u4ece\u540e\u5f80\u524d\u627e\u6700\u540e\u4e00\u4e2a\u4e0d\u6bd4\u53f3\u8fb9\u6240\u6709\u5143\u7d20\u90fd\u5c0f\u7684\u5143\u7d20</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#617-easy","title":"617. \u5408\u5e76\u4e8c\u53c9\u6811(easy)","text":"<p>2023/9/10</p> <p>00 : 01 : 00</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_381","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\uff1a <code>root1</code> \u548c <code>root2</code> \u3002</p> <p>\u60f3\u8c61\u4e00\u4e0b\uff0c\u5f53\u4f60\u5c06\u5176\u4e2d\u4e00\u68f5\u8986\u76d6\u5230\u53e6\u4e00\u68f5\u4e4b\u4e0a\u65f6\uff0c\u4e24\u68f5\u6811\u4e0a\u7684\u4e00\u4e9b\u8282\u70b9\u5c06\u4f1a\u91cd\u53e0\uff08\u800c\u53e6\u4e00\u4e9b\u4e0d\u4f1a\uff09\u3002\u4f60\u9700\u8981\u5c06\u8fd9\u4e24\u68f5\u6811\u5408\u5e76\u6210\u4e00\u68f5\u65b0\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\uff1a\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u5408\u5e76\u540e\u8282\u70b9\u7684\u65b0\u503c\uff1b\u5426\u5219\uff0c\u4e0d\u4e3a null \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002</p> <p>\u8fd4\u56de\u5408\u5e76\u540e\u7684\u4e8c\u53c9\u6811\u3002</p> <p>\u6ce8\u610f: \u5408\u5e76\u8fc7\u7a0b\u5fc5\u987b\u4ece\u4e24\u4e2a\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aroot1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n\u8f93\u51fa\uff1a[3,4,5,5,4,null,7]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aroot1 = [1], root2 = [1,2]\n\u8f93\u51fa\uff1a[2,2]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u4e24\u68f5\u6811\u4e2d\u7684\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[0, 2000]</code> \u5185</li> <li><code>-104 &lt;= Node.val &lt;= 104</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_382","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\n        if (root2 == nullptr)\n        {\n            return root1;\n        }\n        if (root1 == nullptr)\n        {\n            return root2;\n        }\n        TreeNode* tmp = new TreeNode(root1-&gt;val + root2-&gt;val);\n        tmp-&gt;left = mergeTrees(root1-&gt;left, root2-&gt;left);\n        tmp-&gt;right = mergeTrees(root1-&gt;right, root2-&gt;right);\n        return tmp;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_383","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if (t1 == nullptr) {\n            return t2;\n        }\n        if (t2 == nullptr) {\n            return t1;\n        }\n        auto merged = new TreeNode(t1-&gt;val + t2-&gt;val);\n        merged-&gt;left = mergeTrees(t1-&gt;left, t2-&gt;left);\n        merged-&gt;right = mergeTrees(t1-&gt;right, t2-&gt;right);\n        return merged;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_384","title":"\u611f\u60f3","text":"<p>\u7adf\u7136\u548c\u9898\u89e3\u4e00\u6a21\u4e00\u6837, \u4e00\u5206\u949f\u901f\u901a</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#621-medium","title":"621. \u4efb\u52a1\u8c03\u5ea6\u5668(medium)","text":"<p>2023/9/12</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_385","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4 <code>tasks</code> \u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u6bcf\u4e2a\u5b57\u6bcd\u8868\u793a\u4e00\u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002\u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0cCPU \u53ef\u4ee5\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5904\u4e8e\u5f85\u547d\u72b6\u6001\u3002</p> <p>\u7136\u800c\uff0c\u4e24\u4e2a \u76f8\u540c\u79cd\u7c7b \u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a\u6574\u6570 <code>n</code> \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed <code>n</code> \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002</p> <p>\u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684 \u6700\u77ed\u65f6\u95f4 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1atasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n\u8f93\u51fa\uff1a8\n\u89e3\u91ca\uff1aA -&gt; B -&gt; (\u5f85\u547d) -&gt; A -&gt; B -&gt; (\u5f85\u547d) -&gt; A -&gt; B\n     \u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u95f4\u9694\u957f\u5ea6\u4e3a n = 2 \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u800c\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u6240\u4ee5\u4e2d\u95f4\u51fa\u73b0\u4e86\uff08\u5f85\u547d\uff09\u72b6\u6001\u3002 \n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1atasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u5927\u5c0f\u4e3a 6 \u7684\u6392\u5217\u90fd\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\uff0c\u56e0\u4e3a n = 0\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\n\u8bf8\u5982\u6b64\u7c7b\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1atasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\n\u8f93\u51fa\uff1a16\n\u89e3\u91ca\uff1a\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff1a\n     A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; (\u5f85\u547d) -&gt; (\u5f85\u547d) -&gt; A -&gt; (\u5f85\u547d) -&gt; (\u5f85\u547d) -&gt; A\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= task.length &lt;= 104</code></li> <li><code>tasks[i]</code> \u662f\u5927\u5199\u82f1\u6587\u5b57\u6bcd</li> <li><code>n</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a <code>[0, 100]</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_386","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int leastInterval(vector&lt;char&gt;&amp; tasks, int n) {\n        int size = tasks.size();\n        unordered_map&lt;char, int&gt; freq;\n        for (auto &amp; task : tasks)\n        {\n            freq[task]++;\n        }\n        int time = 0;\n        multimap&lt;int, int, greater&lt;int&gt;&gt; todo; // freq, nextTime\n        for (auto &amp; it : freq)\n        {\n            todo.insert({it.second, 0});\n        }\n        int remain = todo.size();\n        while (remain &gt; 0)\n        {\n            auto i = todo.begin();\n            for (; i != todo.end(); ++i)\n            {\n                if (i-&gt;second &lt;= time)\n                {\n                    break;\n                }\n            }\n            if (i == todo.end())\n            {\n                time++;\n                continue;\n            }\n            i-&gt;second = time + n + 1;\n            if (i-&gt;first == 1)\n            {\n                todo.erase(i);\n                remain--;\n            }\n            else\n            {\n                int tmp1 = i-&gt;first;\n                int tmp2 = i-&gt;second;\n                todo.erase(i);\n                todo.insert({tmp1-1, tmp2});\n            }\n            time++;\n        }\n        return time;\n    }  \n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_387","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int leastInterval(vector&lt;char&gt;&amp; tasks, int n) {\n        unordered_map&lt;char, int&gt; freq;\n        for (char ch: tasks) {\n            ++freq[ch];\n        }\n\n        // \u4efb\u52a1\u603b\u6570\n        int m = freq.size();\n        vector&lt;int&gt; nextValid, rest;\n        for (auto [_, v]: freq) {\n            nextValid.push_back(1);\n            rest.push_back(v);\n        }\n\n        int time = 0;\n        for (int i = 0; i &lt; tasks.size(); ++i) {\n            ++time;\n            int minNextValid = INT_MAX;\n            for (int j = 0; j &lt; m; ++j) {\n                if (rest[j]) {\n                    minNextValid = min(minNextValid, nextValid[j]);\n                }\n            }\n            time = max(time, minNextValid);\n            int best = -1;\n            for (int j = 0; j &lt; m; ++j) {\n                if (rest[j] &amp;&amp; nextValid[j] &lt;= time) {\n                    if (best == -1 || rest[j] &gt; rest[best]) {\n                        best = j;\n                    }\n                }\n            }\n            nextValid[best] = time + n + 1;\n            --rest[best];\n        }\n\n        return time;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_388","title":"\u611f\u60f3","text":"<p>\u6ca1\u505a\u51fa\u6765, \u770b\u4e86\u9898\u89e3</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#647-medium","title":"647. \u56de\u6587\u5b50\u4e32(medium)","text":"<p>2023/9/12</p> <p>00 : 04 : 15</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_389","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d \u56de\u6587\u5b50\u4e32 \u7684\u6570\u76ee\u3002</p> <p>\u56de\u6587\u5b57\u7b26\u4e32 \u662f\u6b63\u7740\u8bfb\u548c\u5012\u8fc7\u6765\u8bfb\u4e00\u6837\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5b50\u5b57\u7b26\u4e32 \u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u7531\u8fde\u7eed\u5b57\u7b26\u7ec4\u6210\u7684\u4e00\u4e2a\u5e8f\u5217\u3002</p> <p>\u5177\u6709\u4e0d\u540c\u5f00\u59cb\u4f4d\u7f6e\u6216\u7ed3\u675f\u4f4d\u7f6e\u7684\u5b50\u4e32\uff0c\u5373\u4f7f\u662f\u7531\u76f8\u540c\u7684\u5b57\u7b26\u7ec4\u6210\uff0c\u4e5f\u4f1a\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u5b50\u4e32\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"abc\"\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u4e09\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"b\", \"c\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"aaa\"\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a6\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_390","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int countSubstrings(string s) {\n        int n = s.length();\n        vector&lt;vector&lt;bool&gt;&gt; dp;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            dp.push_back(vector&lt;bool&gt;(n-i, false));\n        }\n        // dp[i][j] = (j &lt; 2 || dp[i+1][j-2]) &amp;&amp; s[i] == s[i+j]\n        int res = 0;\n        for (int i = n-1; i &gt;= 0; --i)\n        {\n            for (int j = 0; j &lt; n-i; ++j)\n            {\n                dp[i][j] = (j &lt; 2 || dp[i+1][j-2]) &amp;&amp; s[i] == s[i+j];\n                res += dp[i][j] ? 1 : 0;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_391","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int countSubstrings(string s) {\n        int n = s.size(), ans = 0;\n        for (int i = 0; i &lt; 2 * n - 1; ++i) {\n            int l = i / 2, r = i / 2 + i % 2;\n            while (l &gt;= 0 &amp;&amp; r &lt; n &amp;&amp; s[l] == s[r]) {\n                --l;\n                ++r;\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_392","title":"\u611f\u60f3","text":"<p>\u548c\u4e2d\u5fc3\u6269\u5c55\u672c\u8d28\u4e00\u6837\u7684, \u4f46\u662fdp\u4f1a\u591a\u6d6a\u8d39\u8bb8\u591a\u7a7a\u95f4</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#739-medium","title":"739. \u6bcf\u65e5\u6e29\u5ea6(medium)","text":"<p>2023/9/12</p> <p>00 : 02 : 38</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_393","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>temperatures</code> \uff0c\u8868\u793a\u6bcf\u5929\u7684\u6e29\u5ea6\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 <code>answer</code> \uff0c\u5176\u4e2d <code>answer[i]</code> \u662f\u6307\u5bf9\u4e8e\u7b2c <code>i</code> \u5929\uff0c\u4e0b\u4e00\u4e2a\u66f4\u9ad8\u6e29\u5ea6\u51fa\u73b0\u5728\u51e0\u5929\u540e\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 <code>0</code> \u6765\u4ee3\u66ff\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: temperatures = [73,74,75,71,69,72,76,73]\n\u8f93\u51fa: [1,1,4,2,1,1,0,0]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: temperatures = [30,40,50,60]\n\u8f93\u51fa: [1,1,1,0]\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: temperatures = [30,60,90]\n\u8f93\u51fa: [1,1,0]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= temperatures.length &lt;= 105</code></li> <li><code>30 &lt;= temperatures[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_394","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) {\n        int n = temperatures.size();\n        stack&lt;int&gt; stk;\n        vector&lt;int&gt; ans(n, 0);\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (stk.empty() || temperatures[stk.top()] &gt;= temperatures[i])\n            {\n                stk.push(i);\n            }\n            else\n            {\n                while (!stk.empty() &amp;&amp; temperatures[stk.top()] &lt; temperatures[i])\n                {\n                    int top = stk.top();\n                    ans[top] = i - top;\n                    stk.pop();\n                }\n                stk.push(i);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_395","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) {\n        int n = temperatures.size();\n        vector&lt;int&gt; ans(n);\n        stack&lt;int&gt; s;\n        for (int i = 0; i &lt; n; ++i) {\n            while (!s.empty() &amp;&amp; temperatures[i] &gt; temperatures[s.top()]) {\n                int previousIndex = s.top();\n                ans[previousIndex] = i - previousIndex;\n                s.pop();\n            }\n            s.push(i);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/Hot100/#_396","title":"\u611f\u60f3","text":"<p>\u7ecf\u5178\u5355\u8c03\u6808</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/","title":"\u5251\u6307 Offer 05. \u66ff\u6362\u7a7a\u683c(easy)","text":"<p>2023/9/13</p> <p>00 : 05 : 14</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 <code>s</code> \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"We are happy.\"\n\u8f93\u51fa\uff1a\"We%20are%20happy.\"\n</code></pre> <p>\u9650\u5236\uff1a</p> <pre><code>0 &lt;= s \u7684\u957f\u5ea6 &lt;= 10000\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_2","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string replaceSpace(string s) {\n        int n = s.length();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (s[i] == ' ')\n            {\n                s[i] = '%';\n                s.insert(i+1, \"20\");\n                i += 2;\n                n += 2;\n            }\n        }\n        return s;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_3","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_4","title":"\u611f\u60f3","text":"<p>\u5f88\u7b80\u5355, \u518d\u65b0\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e5f\u884c, \u53cd\u6b63\u90fd\u662f\u904d\u5386</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-06-easy","title":"\u5251\u6307 Offer 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868(easy)","text":"<p>2023/9/15</p> <p>00 : 03 : 17</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_5","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [1,3,2]\n\u8f93\u51fa\uff1a[2,3,1]\n</code></pre> <p>\u9650\u5236\uff1a</p> <pre><code>0 &lt;= \u94fe\u8868\u957f\u5ea6 &lt;= 10000\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_6","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; reversePrint(ListNode* head) {\n        vector&lt;int&gt; res;\n        ListNode *p = head;\n        while (p != nullptr)\n        {\n            res.insert(res.begin(), p-&gt;val);\n            p = p-&gt;next;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_7","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_8","title":"\u611f\u60f3","text":"<p>\u65b9\u6cd5\u5f88\u591a, \u7b80\u5355</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-09-easy","title":"\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217(easy)","text":"<p>2023/9/19</p> <p>00 : 02 : 27</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_9","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002\u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b\uff0c\u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 <code>appendTail</code> \u548c <code>deleteHead</code> \uff0c\u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u6574\u6570\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u6574\u6570\u7684\u529f\u80fd\u3002(\u82e5\u961f\u5217\u4e2d\u6ca1\u6709\u5143\u7d20\uff0c<code>deleteHead</code> \u64cd\u4f5c\u8fd4\u56de -1 )</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[],[]]\n\u8f93\u51fa\uff1a[null,null,3,-1,-1]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1a\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n\u8f93\u51fa\uff1a[null,-1,null,null,5,2]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= values &lt;= 10000</code></li> <li>\u6700\u591a\u4f1a\u5bf9<code>appendTail\u3001deleteHead</code>\u8fdb\u884c<code>10000</code> \u6b21\u8c03\u7528</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_10","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class CQueue {\npublic:\n    CQueue() {\n\n    }\n\n    void appendTail(int value) {\n        instk.push(value);\n    }\n\n    int deleteHead() {\n        if (outstk.empty())\n        {\n            if (instk.empty())\n            {\n                return -1;\n            }\n            else\n            {\n                while (!instk.empty())\n                {\n                    int tmp = instk.top();\n                    outstk.push(tmp);\n                    instk.pop();\n                }\n            }\n        }\n        int tmp = outstk.top();\n        outstk.pop();\n        return tmp;\n    }\n    stack&lt;int&gt; instk;\n    stack&lt;int&gt; outstk;\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_11","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class CQueue {\nprivate:\n    stack&lt;int&gt; inStack, outStack;\n\n    void in2out() {\n        while (!inStack.empty()) {\n            outStack.push(inStack.top());\n            inStack.pop();\n        }\n    }\n\npublic:\n    CQueue() {}\n\n    void appendTail(int value) {\n        inStack.push(value);\n    }\n\n    int deleteHead() {\n        if (outStack.empty()) {\n            if (inStack.empty()) {\n                return -1;\n            }\n            in2out();\n        }\n        int value = outStack.top();\n        outStack.pop();\n        return value;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_12","title":"\u611f\u60f3","text":"<p>\u4e00\u4e2a\u8f93\u5165\u6808\u4e00\u4e2a\u8f93\u51fa\u6808</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-18-easy","title":"\u5251\u6307 Offer 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9(easy)","text":"<p>2023/9/16</p> <p>00 : 03 : 14</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_13","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u548c\u4e00\u4e2a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5220\u9664\u8be5\u8282\u70b9\u3002</p> <p>\u8fd4\u56de\u5220\u9664\u540e\u7684\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002</p> <p>\u6ce8\u610f\uff1a\u6b64\u9898\u5bf9\u6bd4\u539f\u9898\u6709\u6539\u52a8</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: head = [4,5,1,9], val = 5\n\u8f93\u51fa: [4,1,9]\n\u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 1 -&gt; 9.\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: head = [4,5,1,9], val = 1\n\u8f93\u51fa: [4,5,9]\n\u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 5 -&gt; 9.\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <ul> <li>\u9898\u76ee\u4fdd\u8bc1\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c</li> <li>\u82e5\u4f7f\u7528 C \u6216 C++ \u8bed\u8a00\uff0c\u4f60\u4e0d\u9700\u8981 <code>free</code> \u6216 <code>delete</code> \u88ab\u5220\u9664\u7684\u8282\u70b9</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_14","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* deleteNode(ListNode* head, int val) {\n        ListNode *curr = head;\n        ListNode *prev = nullptr;\n        while (curr != nullptr)\n        {\n            if (curr-&gt;val == val)\n            {\n                if (prev == nullptr)\n                {\n                    return head-&gt;next;\n                }\n                else\n                {\n                    prev-&gt;next = curr-&gt;next;\n                    return head;\n                }\n            }\n            prev = curr;\n            curr = curr-&gt;next;\n        }\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_15","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_16","title":"\u611f\u60f3","text":"<p>\u65b9\u6cd5\u5f88\u591a, \u7b80\u5355</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-20-medium","title":"\u5251\u6307 Offer 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32(medium)","text":"<p>2023/9/13</p> <p>00 : 54 : 27</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_17","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002</p> <p>\u6570\u503c\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <ol> <li>\u82e5\u5e72\u7a7a\u683c</li> <li>\u4e00\u4e2a \u5c0f\u6570 \u6216\u8005 \u6574\u6570</li> <li>\uff08\u53ef\u9009\uff09\u4e00\u4e2a <code>'e'</code> \u6216 <code>'E'</code> \uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a \u6574\u6570</li> <li>\u82e5\u5e72\u7a7a\u683c</li> </ol> <p>\u5c0f\u6570\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <ol> <li>\uff08\u53ef\u9009\uff09\u4e00\u4e2a\u7b26\u53f7\u5b57\u7b26\uff08<code>'+'</code> \u6216 <code>'-'</code>\uff09</li> <li>\u4e0b\u8ff0\u683c\u5f0f\u4e4b\u4e00\uff1a</li> <li>\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u70b9 <code>'.'</code></li> <li>\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u70b9 <code>'.'</code> \uff0c\u540e\u9762\u518d\u8ddf\u7740\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57</li> <li>\u4e00\u4e2a\u70b9 <code>'.'</code> \uff0c\u540e\u9762\u8ddf\u7740\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57</li> </ol> <p>\u6574\u6570\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <ol> <li>\uff08\u53ef\u9009\uff09\u4e00\u4e2a\u7b26\u53f7\u5b57\u7b26\uff08<code>'+'</code> \u6216 <code>'-'</code>\uff09</li> <li>\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57</li> </ol> <p>\u90e8\u5206\u6570\u503c\u5217\u4e3e\u5982\u4e0b\uff1a</p> <ul> <li><code>[\"+100\", \"5e2\", \"-123\", \"3.1416\", \"-1E-16\", \"0123\"]</code></li> </ul> <p>\u90e8\u5206\u975e\u6570\u503c\u5217\u4e3e\u5982\u4e0b\uff1a</p> <ul> <li><code>[\"12e\", \"1a3.14\", \"1.2.3\", \"+-5\", \"12e+5.4\"]</code></li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"0\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"e\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \".\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"    .1  \"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>s</code> \u4ec5\u542b\u82f1\u6587\u5b57\u6bcd\uff08\u5927\u5199\u548c\u5c0f\u5199\uff09\uff0c\u6570\u5b57\uff08<code>0-9</code>\uff09\uff0c\u52a0\u53f7 <code>'+'</code> \uff0c\u51cf\u53f7 <code>'-'</code> \uff0c\u7a7a\u683c <code>' '</code> \u6216\u8005\u70b9 <code>'.'</code> \u3002</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_18","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool checkInt(string s)\n    {\n        int n = s.length();\n        if (s[0] == '+' || s[0] == '-')\n        {\n            if (n == 1)\n                return false;\n        }\n        else if (s[0] &lt; '0' || s[0] &gt; '9')\n        {\n            return false;\n        }\n        for (int i = 1; i &lt; n; ++i)\n        {\n            if (s[i] &lt; '0' || s[i] &gt; '9')\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    bool checkFloat(string s, int dotIndex)\n    {\n        int n = s.length();\n        if (dotIndex &gt;= n)\n        {\n            return false;\n        }\n        if (dotIndex == 0 &amp;&amp; n == 1)\n        {\n            return false;\n        }\n        int i = 0;\n        if (s[i] == '+' || s[i] == '-')\n        {\n            i++;\n        }\n        for (; i &lt; n; ++i)\n        {\n            if (s[i] == '.')\n            {\n                if (i == n-1)\n                {\n                    if (n == 1 || s[i-1] &lt; '0' || s[i-1] &gt; '9')\n                    {\n                        return false;\n                    }\n                }\n                else if (s[i+1] &lt; '0' || s[i+1] &gt; '9' || i != dotIndex)\n                {\n                    return false;\n                }\n            }\n            else if (s[i] &lt; '0' || s[i] &gt; '9')\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    bool isNumber(string s) {\n        int n = s.length();\n        int left = 0;\n        int dotIndex = -1;\n        int EIndex = -1;\n        while (left &lt; n &amp;&amp; s[left] == ' ')\n        {\n            ++left;\n        }\n        if (left == n)\n        {\n            return false;\n        }\n        int right = left;\n        while (right &lt; n &amp;&amp; s[right] != ' ')\n        {\n            if (s[right] == '.')\n            {\n                dotIndex = right;\n            }\n            else if (s[right] == 'e' || s[right] == 'E')\n            {\n                EIndex = right;\n            }\n            ++right;\n        }\n        for (int i = right; i &lt; n; ++i)\n        {\n            if (s[i] != ' ')\n            {\n                return false;\n            }\n        }\n        s = s.substr(left, right-left);\n        if (dotIndex != -1)\n        {\n           dotIndex -= left;\n        }\n        if (EIndex != -1)\n        {\n            EIndex -= left;\n        }\n        // 123\n        if (dotIndex == -1 &amp;&amp; EIndex == -1)\n        {\n            return checkInt(s);\n        }\n        // 1E3\n        else if(dotIndex == -1)\n        {\n            return checkInt(s.substr(0, EIndex)) &amp;&amp; checkInt(s.substr(EIndex+1));\n        }\n        // 1.23\n        else if(EIndex == -1)\n        {\n            return checkFloat(s, dotIndex);\n        }\n        // 1.2E3\n        else\n        {\n            return checkFloat(s.substr(0, EIndex), dotIndex) &amp;&amp; checkInt(s.substr(EIndex+1));\n        }\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_19","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    enum State {\n        STATE_INITIAL,\n        STATE_INT_SIGN,\n        STATE_INTEGER,\n        STATE_POINT,\n        STATE_POINT_WITHOUT_INT,\n        STATE_FRACTION,\n        STATE_EXP,\n        STATE_EXP_SIGN,\n        STATE_EXP_NUMBER,\n        STATE_END\n    };\n\n    enum CharType {\n        CHAR_NUMBER,\n        CHAR_EXP,\n        CHAR_POINT,\n        CHAR_SIGN,\n        CHAR_SPACE,\n        CHAR_ILLEGAL\n    };\n\n    CharType toCharType(char ch) {\n        if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {\n            return CHAR_NUMBER;\n        } else if (ch == 'e' || ch == 'E') {\n            return CHAR_EXP;\n        } else if (ch == '.') {\n            return CHAR_POINT;\n        } else if (ch == '+' || ch == '-') {\n            return CHAR_SIGN;\n        } else if (ch == ' ') {\n            return CHAR_SPACE;\n        } else {\n            return CHAR_ILLEGAL;\n        }\n    }\n\n    bool isNumber(string s) {\n        unordered_map&lt;State, unordered_map&lt;CharType, State&gt;&gt; transfer{\n            {\n                STATE_INITIAL, {\n                    {CHAR_SPACE, STATE_INITIAL},\n                    {CHAR_NUMBER, STATE_INTEGER},\n                    {CHAR_POINT, STATE_POINT_WITHOUT_INT},\n                    {CHAR_SIGN, STATE_INT_SIGN}\n                }\n            }, {\n                STATE_INT_SIGN, {\n                    {CHAR_NUMBER, STATE_INTEGER},\n                    {CHAR_POINT, STATE_POINT_WITHOUT_INT}\n                }\n            }, {\n                STATE_INTEGER, {\n                    {CHAR_NUMBER, STATE_INTEGER},\n                    {CHAR_EXP, STATE_EXP},\n                    {CHAR_POINT, STATE_POINT},\n                    {CHAR_SPACE, STATE_END}\n                }\n            }, {\n                STATE_POINT, {\n                    {CHAR_NUMBER, STATE_FRACTION},\n                    {CHAR_EXP, STATE_EXP},\n                    {CHAR_SPACE, STATE_END}\n                }\n            }, {\n                STATE_POINT_WITHOUT_INT, {\n                    {CHAR_NUMBER, STATE_FRACTION}\n                }\n            }, {\n                STATE_FRACTION,\n                {\n                    {CHAR_NUMBER, STATE_FRACTION},\n                    {CHAR_EXP, STATE_EXP},\n                    {CHAR_SPACE, STATE_END}\n                }\n            }, {\n                STATE_EXP,\n                {\n                    {CHAR_NUMBER, STATE_EXP_NUMBER},\n                    {CHAR_SIGN, STATE_EXP_SIGN}\n                }\n            }, {\n                STATE_EXP_SIGN, {\n                    {CHAR_NUMBER, STATE_EXP_NUMBER}\n                }\n            }, {\n                STATE_EXP_NUMBER, {\n                    {CHAR_NUMBER, STATE_EXP_NUMBER},\n                    {CHAR_SPACE, STATE_END}\n                }\n            }, {\n                STATE_END, {\n                    {CHAR_SPACE, STATE_END}\n                }\n            }\n        };\n\n        int len = s.length();\n        State st = STATE_INITIAL;\n\n        for (int i = 0; i &lt; len; i++) {\n            CharType typ = toCharType(s[i]);\n            if (transfer[st].find(typ) == transfer[st].end()) {\n                return false;\n            } else {\n                st = transfer[st][typ];\n            }\n        }\n        return st == STATE_INTEGER || st == STATE_POINT || st == STATE_FRACTION || st == STATE_EXP_NUMBER || st == STATE_END;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_20","title":"\u611f\u60f3","text":"<p>\u8fd9\u9898\u76ee\u5f88\u9ebb\u70e6, \u9898\u89e3\u7684\u72b6\u6001\u673a\u7684\u505a\u6cd5\u5176\u5b9e\u4e5f\u5f88\u9ebb\u70e6, \u6682\u65f6\u6ca1\u60f3\u5230\u4ec0\u4e48\u597d\u7684</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-21-easy","title":"\u5251\u6307 Offer 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762(easy)","text":"<p>2023/9/18</p> <p>00 : 03 : 16</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_21","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u5947\u6570\u5728\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u5076\u6570\u5728\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3,4]\n\u8f93\u51fa\uff1a[1,3,2,4] \n\u6ce8\uff1a[3,1,2,4] \u4e5f\u662f\u6b63\u786e\u7684\u7b54\u6848\u4e4b\u4e00\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ol> <li><code>0 &lt;= nums.length &lt;= 50000</code></li> <li><code>0 &lt;= nums[i] &lt;= 10000</code></li> </ol>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_22","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; exchange(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int left = 0, right = n-1;\n        while (left &lt; right)\n        {\n            while (left &lt; right &amp;&amp; nums[left] &amp; 1)\n            {\n                ++left;\n            }\n            while (left &lt; right &amp;&amp; (nums[right]+1) &amp; 1)\n            {\n                --right;\n            }\n            swap(nums[left], nums[right]);\n        }\n        return nums;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_23","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; exchange(vector&lt;int&gt;&amp; nums) {\n        int left = 0, right = nums.size() - 1;\n        while (left &lt; right) {\n            while (left &lt; right and nums[left] % 2 == 1) {\n                left++;\n            }\n            while (left &lt; right and nums[right] % 2 == 0) {\n                right--;\n            }\n            if (left &lt; right) {\n                swap(nums[left++], nums[right--]);\n            }\n        }\n        return nums;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_24","title":"\u611f\u60f3","text":"<p>\u5feb\u6392\u7684\u601d\u60f3</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-22-keasy","title":"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9(easy)","text":"<p>2023/9/16</p> <p>00 : 03 : 34</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_25","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u3002\u4e3a\u4e86\u7b26\u5408\u5927\u591a\u6570\u4eba\u7684\u4e60\u60ef\uff0c\u672c\u9898\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u5373\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u662f\u5012\u6570\u7b2c1\u4e2a\u8282\u70b9\u3002</p> <p>\u4f8b\u5982\uff0c\u4e00\u4e2a\u94fe\u8868\u6709 <code>6</code> \u4e2a\u8282\u70b9\uff0c\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u5b83\u4eec\u7684\u503c\u4f9d\u6b21\u662f <code>1\u30012\u30013\u30014\u30015\u30016</code>\u3002\u8fd9\u4e2a\u94fe\u8868\u7684\u5012\u6570\u7b2c <code>3</code> \u4e2a\u8282\u70b9\u662f\u503c\u4e3a <code>4</code> \u7684\u8282\u70b9\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1-&gt;2-&gt;3-&gt;4-&gt;5, \u548c k = 2.\n\n\u8fd4\u56de\u94fe\u8868 4-&gt;5.\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_26","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* getKthFromEnd(ListNode* head, int k) {\n        ListNode *left = head, *right = head;\n        for (int i = 0; i &lt; k-1; ++i)\n        {\n            right = right-&gt;next;\n        }\n        while (right-&gt;next != nullptr)\n        {\n            left = left-&gt;next;\n            right = right-&gt;next;\n        }\n        return left;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_27","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_28","title":"\u611f\u60f3","text":"<p>\u770b\u5230\u6807\u7b7e\u662f\u53cc\u6307\u9488\u5c31\u7acb\u9a6c\u80fd\u60f3\u5230\u8fd9\u4e2a\u6bd4\u8f83\u5de7\u5999\u7684\u4e00\u6b21\u904d\u5386\u7684\u65b9\u6cd5\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-24-easy","title":"\u5251\u6307 Offer 24. \u53cd\u8f6c\u94fe\u8868(easy)","text":"<p>2023/9/15</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_29","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n\u8f93\u51fa: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL\n</code></pre> <p>\u9650\u5236\uff1a</p> <pre><code>0 &lt;= \u8282\u70b9\u4e2a\u6570 &lt;= 5000\n</code></pre> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 206 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/reverse-linked-list/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_30","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* res = head;\n        if (head == nullptr)\n        {\n            return nullptr;\n        }\n        head = head-&gt;next;\n        res-&gt;next = nullptr;\n        while (head != nullptr)\n        {\n            ListNode *tmp = res;\n            res = head;\n            head = head-&gt;next;\n            res-&gt;next = tmp;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_31","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr-&gt;next;\n            curr-&gt;next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_32","title":"\u611f\u60f3","text":"<p>\u7b80\u5355\u9898\u79d2\u6740</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-25-easy","title":"\u5251\u6307 Offer 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868(easy)","text":"<p>2023/9/17</p> <p>00 : 05 : 28</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_33","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e24\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u94fe\u8868\uff0c\u5408\u5e76\u8fd9\u4e24\u4e2a\u94fe\u8868\u5e76\u4f7f\u65b0\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u4ecd\u7136\u662f\u9012\u589e\u6392\u5e8f\u7684\u3002</p> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165\uff1a1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n\u8f93\u51fa\uff1a1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n</code></pre> <p>\u9650\u5236\uff1a</p> <pre><code>0 &lt;= \u94fe\u8868\u957f\u5ea6 &lt;= 1000\n</code></pre> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 21 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/merge-two-sorted-lists/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_34","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode *head = new ListNode(-1);\n        ListNode *tail = head;\n        while (l1 != nullptr &amp;&amp; l2 != nullptr)\n        {\n            if (l1-&gt;val &gt; l2-&gt;val)\n            {\n                tail-&gt;next = l2;\n                l2 = l2-&gt;next;\n            }\n            else\n            {\n                tail-&gt;next = l1;\n                l1 = l1-&gt;next;\n            }\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = l1 == nullptr ? l2 : l1;\n\n        return head-&gt;next;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_35","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_36","title":"\u611f\u60f3","text":"<p>\u8981\u5b66\u4e60\u54e8\u5175\u7684\u8fd9\u4e2a\u601d\u60f3</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-30-mineasy","title":"\u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808(easy)","text":"<p>2023/9/19</p> <p>00 : 12 : 51</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_37","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u7684\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\u5728\u8be5\u6808\u4e2d\uff0c\u8c03\u7528 min\u3001push \u53ca pop \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --&gt; \u8fd4\u56de -3.\nminStack.pop();\nminStack.top();      --&gt; \u8fd4\u56de 0.\nminStack.min();   --&gt; \u8fd4\u56de -2.\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_38","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class MinStack {\npublic:\n    /** initialize your data structure here. */\n    MinStack() {\n    }\n\n    void push(int x) {\n        if (stk.empty())\n        {\n            minEle = x;\n        }\n        stk.push(x - minEle);\n        minEle = minEle &lt; x ? minEle : x;\n    }\n\n    void pop() {\n        if (stk.top() &lt; 0)\n        {\n            minEle -= stk.top();\n        }\n        stk.pop();\n    }\n\n    int top() {\n        return stk.top() &lt; 0 ? minEle : stk.top() + minEle;\n    }\n\n    int min() {\n        return minEle;\n    }\n    stack&lt;long&gt; stk;\n    long minEle;\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_39","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class MinStack {\npublic:\n    /** initialize your data structure here. */\n    long long num_min;\n    stack&lt;long long&gt; stack_diff;\n    MinStack() {\n    }\n\n    void push(int x) {\n        if(stack_diff.empty())\n        {\n            num_min = x;\n            stack_diff.push(0);\n            return;\n        }\n        stack_diff.push((long long)x-num_min);\n        if(x &lt; num_min)\n        {\n            num_min = x;\n        }\n    }\n\n    void pop() {\n        if(stack_diff.top() &lt; 0)\n        {\n            num_min -= stack_diff.top();\n        }\n        stack_diff.pop();\n    }\n\n    int top() {\n        if(stack_diff.top() &gt;= 0)\n        {\n            return stack_diff.top()+num_min;\n        }\n        else\n        {\n            return num_min;\n        }\n    }\n\n    int min() {\n        return num_min;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_40","title":"\u611f\u60f3","text":"<p>\u6700\u597d\u7684\u505a\u6cd5\u5c31\u662f\u4e0d\u7528\u8f85\u52a9\u6808, \u76f4\u63a5\u8bb0\u5f55\u4e00\u4e2a\u6700\u5c0f\u503c\u548c\u6bcf\u4e2a\u5143\u7d20\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u5373\u53ef</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-35-medium","title":"\u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236(medium)","text":"<p>2023/9/16</p> <p>00 : 09 : 30</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_41","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u5b9e\u73b0 <code>copyRandomList</code> \u51fd\u6570\uff0c\u590d\u5236\u4e00\u4e2a\u590d\u6742\u94fe\u8868\u3002\u5728\u590d\u6742\u94fe\u8868\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u9664\u4e86\u6709\u4e00\u4e2a <code>next</code> \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd8\u6709\u4e00\u4e2a <code>random</code> \u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u8282\u70b9\u6216\u8005 <code>null</code>\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\u8f93\u51fa\uff1a[[7,null],[13,0],[11,4],[10,2],[1,0]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [[1,1],[2,1]]\n\u8f93\u51fa\uff1a[[1,1],[2,1]]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [[3,null],[3,0],[3,null]]\n\u8f93\u51fa\uff1a[[3,null],[3,0],[3,null]]\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = []\n\u8f93\u51fa\uff1a[]\n\u89e3\u91ca\uff1a\u7ed9\u5b9a\u7684\u94fe\u8868\u4e3a\u7a7a\uff08\u7a7a\u6307\u9488\uff09\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>-10000 &lt;= Node.val &lt;= 10000</code></li> <li><code>Node.random</code> \u4e3a\u7a7a\uff08null\uff09\u6216\u6307\u5411\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u3002</li> <li>\u8282\u70b9\u6570\u76ee\u4e0d\u8d85\u8fc7 1000 \u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 138 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/copy-list-with-random-pointer/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_42","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        unordered_map&lt;Node*, Node*&gt; Aft;\n        Node *p = head;\n        while (p != nullptr)\n        {\n            Aft[p] = new Node(p-&gt;val);\n            p = p-&gt;next;\n        }\n        p = head;\n        while (p != nullptr)\n        {\n            Aft[p]-&gt;next = Aft[p-&gt;next];\n            Aft[p]-&gt;random = Aft[p-&gt;random];\n            p = p-&gt;next;\n        }\n        return Aft[head];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_43","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    unordered_map&lt;Node*, Node*&gt; cachedNode;\n\n    Node* copyRandomList(Node* head) {\n        if (head == nullptr) {\n            return nullptr;\n        }\n        if (!cachedNode.count(head)) {\n            Node* headNew = new Node(head-&gt;val);\n            cachedNode[head] = headNew;\n            headNew-&gt;next = copyRandomList(head-&gt;next);\n            headNew-&gt;random = copyRandomList(head-&gt;random);\n        }\n        return cachedNode[head];\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_44","title":"\u611f\u60f3","text":"<p>\u56de\u6eaf, \u770b\u8d77\u6765\u6bd4\u4e24\u904d\u904d\u5386\u8981\u597d</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-52-easy","title":"\u5251\u6307 Offer 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9(easy)","text":"<p>2023/9/17</p> <p>00 : 05 : 35</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_45","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9\u3002</p> <p>\u5982\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868\uff1a</p> <p></p> <p>\u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aintersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n\u8f93\u51fa\uff1aReference of the node with value = 8\n\u8f93\u5165\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 8 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [4,1,8,4,5]\uff0c\u94fe\u8868 B \u4e3a [5,0,1,8,4,5]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 2 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aintersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n\u8f93\u51fa\uff1aReference of the node with value = 2\n\u8f93\u5165\u89e3\u91ca\uff1a\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 2 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [0,9,1,2,4]\uff0c\u94fe\u8868 B \u4e3a [3,2,4]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 1 \u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aintersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n\u8f93\u51fa\uff1anull\n\u8f93\u5165\u89e3\u91ca\uff1a\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [2,6,4]\uff0c\u94fe\u8868 B \u4e3a [1,5]\u3002\u7531\u4e8e\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5 intersectVal \u5fc5\u987b\u4e3a 0\uff0c\u800c skipA \u548c skipB \u53ef\u4ee5\u662f\u4efb\u610f\u503c\u3002\n\u89e3\u91ca\uff1a\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002\n</code></pre> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de <code>null</code>.</li> <li>\u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002</li> <li>\u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002</li> <li>\u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O(1) \u5185\u5b58\u3002</li> <li>\u672c\u9898\u4e0e\u4e3b\u7ad9 160 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/intersection-of-two-linked-lists/</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_46","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr)\n        {\n            return nullptr;\n        }\n        ListNode *p1 = headA, *p2 = headB, *last = nullptr;\n        while (p1 != p2)\n        {\n            if (p1-&gt;next == nullptr)\n            {\n                if (last == nullptr)\n                {\n                    last = p1;\n                }\n                else if (p1 != last)\n                {\n                    return nullptr;\n                }\n                p1 = headB;\n            }\n            else\n            {\n                p1 = p1-&gt;next;\n            }\n            if (p2-&gt;next == nullptr)\n            {\n                if (last == nullptr)\n                {\n                    last = p2;\n                }\n                else if (p2 != last)\n                {\n                    return nullptr;\n                }\n                p2 = headA;\n            }\n            else\n            {\n                p2 = p2-&gt;next;\n            }\n        }\n        return p1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_47","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr) {\n            return nullptr;\n        }\n        ListNode *pA = headA, *pB = headB;\n        while (pA != pB) {\n            pA = pA == nullptr ? headB : pA-&gt;next;\n            pB = pB == nullptr ? headA : pB-&gt;next;\n        }\n        return pA;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_48","title":"\u611f\u60f3","text":"<p>\u9898\u89e3\u66f4\u52a0\u4f18\u96c5, \u4e0d\u76f8\u4ea4\u53ef\u4ee5\u7406\u89e3\u6210\u76f8\u4ea4\u5728nullptr</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-57-seasy","title":"\u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57(easy)","text":"<p>2023/9/18</p> <p>00 : 03 : 57</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_49","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57s\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u6b63\u597d\u662fs\u3002\u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8es\uff0c\u5219\u8f93\u51fa\u4efb\u610f\u4e00\u5bf9\u5373\u53ef\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,7,11,15], target = 9\n\u8f93\u51fa\uff1a[2,7] \u6216\u8005 [7,2]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [10,26,30,31,47,60], target = 40\n\u8f93\u51fa\uff1a[10,30] \u6216\u8005 [30,10]\n</code></pre> <p>\u9650\u5236\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> <li><code>1 &lt;= nums[i] &lt;= 10^6</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_50","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_set&lt;int&gt; visited;\n        for (auto &amp; num : nums)\n        {\n            if (visited.find(target - num) != visited.end())\n                return vector&lt;int&gt;({num, target - num});\n            if (visited.find(num) == visited.end())\n                visited.insert({num});\n        }\n        return vector&lt;int&gt;();\n    } \n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_51","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_52","title":"\u611f\u60f3","text":"<p>\u6ca1\u6ce8\u610f\u770b\u662f\u6709\u5e8f\u6570\u7ec4, \u6709\u5e8f\u7684\u8bdd\u80af\u5b9a\u662f\u53cc\u6307\u9488\u800c\u4e0d\u662f\u7528\u54c8\u5e0c\u8868\u4e86</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-58-i-easy","title":"\u5251\u6307 Offer 58 - I. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f(easy)","text":"<p>2023/9/18</p> <p>00 : 12 : 52</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_53","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8f93\u5165\u4e00\u4e2a\u82f1\u6587\u53e5\u5b50\uff0c\u7ffb\u8f6c\u53e5\u5b50\u4e2d\u5355\u8bcd\u7684\u987a\u5e8f\uff0c\u4f46\u5355\u8bcd\u5185\u5b57\u7b26\u7684\u987a\u5e8f\u4e0d\u53d8\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6807\u70b9\u7b26\u53f7\u548c\u666e\u901a\u5b57\u6bcd\u4e00\u6837\u5904\u7406\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32\"I am a student. \"\uff0c\u5219\u8f93\u51fa\"student. a am I\"\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165: \"the sky is blue\"\n\u8f93\u51fa: \"blue is sky the\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: \"  hello world!  \"\n\u8f93\u51fa: \"world! hello\"\n\u89e3\u91ca: \u8f93\u5165\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u524d\u9762\u6216\u8005\u540e\u9762\u5305\u542b\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u4f46\u662f\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e0d\u80fd\u5305\u62ec\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165: \"a good   example\"\n\u8f93\u51fa: \"example good a\"\n\u89e3\u91ca: \u5982\u679c\u4e24\u4e2a\u5355\u8bcd\u95f4\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u5c06\u53cd\u8f6c\u540e\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u51cf\u5c11\u5230\u53ea\u542b\u4e00\u4e2a\u3002\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <ul> <li>\u65e0\u7a7a\u683c\u5b57\u7b26\u6784\u6210\u4e00\u4e2a\u5355\u8bcd\u3002</li> <li>\u8f93\u5165\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u524d\u9762\u6216\u8005\u540e\u9762\u5305\u542b\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u4f46\u662f\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e0d\u80fd\u5305\u62ec\u3002</li> <li>\u5982\u679c\u4e24\u4e2a\u5355\u8bcd\u95f4\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u5c06\u53cd\u8f6c\u540e\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u51cf\u5c11\u5230\u53ea\u542b\u4e00\u4e2a\u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 151 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/reverse-words-in-a-string/</p> <p>\u6ce8\u610f\uff1a\u6b64\u9898\u5bf9\u6bd4\u539f\u9898\u6709\u6539\u52a8</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_54","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string reverseWords(string s) {\n        int n = s.length();\n        int left = 0, right = 0;\n        string res;\n        while (left &lt; n &amp;&amp; s[left] == ' ')\n            left++;\n        right = left;\n        while (right &lt; n &amp;&amp; s[right] != ' ')\n            right++;\n        res = s.substr(left, right - left);\n        left = ++right;\n\n        while (left &lt; n)\n        {\n            while (left &lt; n &amp;&amp; s[left] == ' ')\n                left++;\n            right = left;\n            while (right &lt; n &amp;&amp; s[right] != ' ')\n                right++;\n            if (right &gt; left)\n                res = s.substr(left, right - left) + \" \" + res;\n            left = ++right;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_55","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string reverseWords(string s) {\n        int left = 0, right = s.size() - 1;\n        // \u53bb\u6389\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u7a7a\u767d\u5b57\u7b26\n        while (left &lt;= right &amp;&amp; s[left] == ' ') ++left;\n\n        // \u53bb\u6389\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\n        while (left &lt;= right &amp;&amp; s[right] == ' ') --right;\n\n        deque&lt;string&gt; d;\n        string word;\n\n        while (left &lt;= right) {\n            char c = s[left];\n            if (word.size() &amp;&amp; c == ' ') {\n                // \u5c06\u5355\u8bcd push \u5230\u961f\u5217\u7684\u5934\u90e8\n                d.push_front(move(word));\n                word = \"\";\n            }\n            else if (c != ' ') {\n                word += c;\n            }\n            ++left;\n        }\n        d.push_front(move(word));\n\n        string ans;\n        while (!d.empty()) {\n            ans += d.front();\n            d.pop_front();\n            if (!d.empty()) ans += ' ';\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_56","title":"\u611f\u60f3","text":"<p>\u4e5f\u53ef\u4ee5\u5148\u6574\u4e2a\u53cd\u8f6c, \u5728\u5c40\u90e8\u53cd\u8f6c</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-58-ii-easy","title":"\u5251\u6307 Offer 58 - II. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32(easy)","text":"<p>2023/9/13</p> <p>00 : 01 : 26</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_57","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b57\u7b26\u4e32\u7684\u5de6\u65cb\u8f6c\u64cd\u4f5c\u662f\u628a\u5b57\u7b26\u4e32\u524d\u9762\u7684\u82e5\u5e72\u4e2a\u5b57\u7b26\u8f6c\u79fb\u5230\u5b57\u7b26\u4e32\u7684\u5c3e\u90e8\u3002\u8bf7\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u5b57\u7b26\u4e32\u5de6\u65cb\u8f6c\u64cd\u4f5c\u7684\u529f\u80fd\u3002\u6bd4\u5982\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\"abcdefg\"\u548c\u6570\u5b572\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u5de6\u65cb\u8f6c\u4e24\u4f4d\u5f97\u5230\u7684\u7ed3\u679c\"cdefgab\"\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165: s = \"abcdefg\", k = 2\n\u8f93\u51fa: \"cdefgab\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: s = \"lrloseumgh\", k = 6\n\u8f93\u51fa: \"umghlrlose\"\n</code></pre> <p>\u9650\u5236\uff1a</p> <ul> <li><code>1 &lt;= k &lt; s.length &lt;= 10000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_58","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    string reverseLeftWords(string s, int n) {\n        string res = s.substr(n);\n        res += s.substr(0, n);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_59","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_60","title":"\u611f\u60f3","text":"<p>\u7b80\u5355</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-59-i-hard","title":"\u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c(hard)","text":"<p>2023/9/20</p> <p>00 : 19 : 58</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_61","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code> \u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f <code>k</code>\uff0c\u8bf7\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u7684\u6700\u5927\u503c\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: nums = [1,3,-1,-3,5,3,6,7], \u548c k = 3\n\u8f93\u51fa: [3,3,5,5,6,7] \n\u89e3\u91ca: \n\n  \u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e                \u6700\u5927\u503c\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre> <p>\u63d0\u793a\uff1a</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u5728\u8f93\u5165\u6570\u7ec4 \u4e0d\u4e3a\u7a7a \u7684\u60c5\u51b5\u4e0b\uff0c<code>1 \u2264 k \u2264 nums.length</code>\u3002</p> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 239 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/sliding-window-maximum/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_62","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        deque&lt;int&gt; q;\n        int n = nums.size();\n        vector&lt;int&gt; res;\n        for (int i = 0; i &lt; k; ++i)\n        {\n            while (!q.empty() &amp;&amp; nums[i] &gt;= nums[q.back()])\n            {\n                q.pop_back();\n            }\n            q.push_back(i);\n        }\n        res.push_back(nums[q.front()]);\n        for (int i = k; i &lt; n; ++i)\n        {\n            while (!q.empty() &amp;&amp; nums[i] &gt;= nums[q.back()])\n            {\n                q.pop_back();\n            }\n            q.push_back(i);\n            while (q.front() &lt;= i - k)\n            {\n                q.pop_front();\n            }\n            res.push_back(nums[q.front()]);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_63","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        int n = nums.size();\n        deque&lt;int&gt; q;\n        for (int i = 0; i &lt; k; ++i) {\n            while (!q.empty() &amp;&amp; nums[i] &gt;= nums[q.back()]) {\n                q.pop_back();\n            }\n            q.push_back(i);\n        }\n\n        vector&lt;int&gt; ans = {nums[q.front()]};\n        for (int i = k; i &lt; n; ++i) {\n            while (!q.empty() &amp;&amp; nums[i] &gt;= nums[q.back()]) {\n                q.pop_back();\n            }\n            q.push_back(i);\n            while (q.front() &lt;= i - k) {\n                q.pop_front();\n            }\n            ans.push_back(nums[q.front()]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_64","title":"\u611f\u60f3","text":"<p>\u505a\u8fc7, \u4f46\u662f\u53ea\u8bb0\u5f97\u7528\u5806\u4e86, \u5370\u8c61\u4e2d\u8fd8\u6709\u66f4\u597d\u7684\u7b97\u6cd5, \u770b\u4e86\u773c\u7b14\u8bb0\u77e5\u9053\u662f\u5355\u8c03\u961f\u5217\u518d\u5199\u7684</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-59-ii-medium","title":"\u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c(medium)","text":"<p>2023/9/20</p> <p>00 : 18 : 21</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_65","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u5b9a\u4e49\u4e00\u4e2a\u961f\u5217\u5e76\u5b9e\u73b0\u51fd\u6570 <code>max_value</code> \u5f97\u5230\u961f\u5217\u91cc\u7684\u6700\u5927\u503c\uff0c\u8981\u6c42\u51fd\u6570<code>max_value</code>\u3001<code>push_back</code> \u548c <code>pop_front</code> \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u3002</p> <p>\u82e5\u961f\u5217\u4e3a\u7a7a\uff0c<code>pop_front</code> \u548c <code>max_value</code> \u9700\u8981\u8fd4\u56de -1</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165: \n[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]\n[[],[1],[2],[],[],[]]\n\u8f93\u51fa: [null,null,null,2,1,2]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: \n[\"MaxQueue\",\"pop_front\",\"max_value\"]\n[[],[],[]]\n\u8f93\u51fa: [null,-1,-1]\n</code></pre> <p>\u9650\u5236\uff1a</p> <ul> <li><code>1 &lt;= push_back,pop_front,max_value\u7684\u603b\u64cd\u4f5c\u6570 &lt;= 10000</code></li> <li><code>1 &lt;= value &lt;= 10^5</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_66","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class MaxQueue {\npublic:\n    MaxQueue() {\n\n    }\n\n    int max_value() {\n        if (assist.empty()) return -1;\n        return assist.front();\n    }\n\n    void push_back(int value) {\n        q.push(value);\n        while (!assist.empty() &amp;&amp; value &gt; assist.back())\n        {\n            assist.pop_back();\n        }\n        assist.push_back(value);\n    }\n\n    int pop_front() {\n        if (assist.empty()) return -1;\n        int tmp = q.front();\n        q.pop();\n        if (tmp == assist.front())\n        {\n            assist.pop_front();\n        }\n        return tmp;\n    }\n    deque&lt;int&gt; assist;\n    queue&lt;int&gt; q;\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_67","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class MaxQueue {\n    queue&lt;int&gt; q;\n    deque&lt;int&gt; d;\npublic:\n    MaxQueue() {\n    }\n\n    int max_value() {\n        if (d.empty())\n            return -1;\n        return d.front();\n    }\n\n    void push_back(int value) {\n        while (!d.empty() &amp;&amp; d.back() &lt; value) {\n            d.pop_back();\n        }\n        d.push_back(value);\n        q.push(value);\n    }\n\n    int pop_front() {\n        if (q.empty())\n            return -1;\n        int ans = q.front();\n        if (ans == d.front()) {\n            d.pop_front();\n        }\n        q.pop();\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_68","title":"\u611f\u60f3","text":"<p>\u548c\u4e0a\u4e00\u9898\u662f\u8fde\u7740\u5199\u7684, \u6b63\u597d\u518d\u5e94\u7528\u4e86\u4e00\u6b21\u5355\u8c03\u961f\u5217</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#offer-67-medium","title":"\u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570(medium)","text":"<p>2023/9/14</p> <p>00 : 20 : 48</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_69","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5199\u4e00\u4e2a\u51fd\u6570 StrToInt\uff0c\u5b9e\u73b0\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u8fd9\u4e2a\u529f\u80fd\u3002\u4e0d\u80fd\u4f7f\u7528 atoi \u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\u3002</p> <p>\u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002</p> <p>\u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002</p> <p>\u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002</p> <p>\u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002</p> <p>\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002</p> <p>\u8bf4\u660e\uff1a</p> <p>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u2212231, 231 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u8bf7\u8fd4\u56de  INT_MAX (231 \u2212 1) \u6216 INT_MIN (\u2212231) \u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: \"42\"\n\u8f93\u51fa: 42\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: \"   -42\"\n\u8f93\u51fa: -42\n\u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002\n     \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: \"4193 with words\"\n\u8f93\u51fa: 4193\n\u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002\n</code></pre> <p>\u793a\u4f8b 4:</p> <pre><code>\u8f93\u5165: \"words and 987\"\n\u8f93\u51fa: 0\n\u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002\n     \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002\n</code></pre> <p>\u793a\u4f8b 5:</p> <pre><code>\u8f93\u5165: \"-91283472332\"\n\u8f93\u51fa: -2147483648\n\u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \n     \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002\n</code></pre> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 8 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/string-to-integer-atoi/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_70","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int strToInt(string str) {\n        int n = str.length();\n        int i = 0, sign = 1;\n        unsigned long max = 2147483647, res = 0;\n        while (str[i] == ' ')\n        {\n            i++;\n        }\n        str = str.substr(i);\n        n = str.size();\n        if (str[0] &lt;= '9' &amp;&amp; str[0] &gt;= '0')\n        {\n            res += str[0] - '0';\n        }\n        else if (str[0] == '-' || str[0] == '+')\n        {\n            sign = str[0] == '-' ? -1 : 1;\n            max = sign == 1 ? max : max + 1;\n        }\n        else \n        {\n            return 0;\n        }\n        if (n == 1 || str[1] &lt; '0' || str[1] &gt; '9') return res * sign;\n        else\n        {\n            res = 10 * res + str[1] - '0';\n        }\n        for (i = 2; i &lt; n; ++i)\n        {\n            if (str[i] &gt;= '0' &amp;&amp; str[i] &lt;= '9')\n            {\n                if(10 * res + str[i] - '0' &gt; max)\n                {\n                    return max * sign;\n                }\n                else\n                {\n                    res = 10 * res + str[i] - '0'; \n                }\n            }\n            else \n            {\n                break;\n            }\n        }\n        return res * sign;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_71","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Automaton {\n    string state = \"start\";\n    unordered_map&lt;string, vector&lt;string&gt;&gt; table = {\n        {\"start\", {\"start\", \"signed\", \"in_number\", \"end\"}},\n        {\"signed\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"in_number\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"end\", {\"end\", \"end\", \"end\", \"end\"}}\n    };\n\n    int get_col(char c) {\n        if (isspace(c)) return 0;\n        if (c == '+' or c == '-') return 1;\n        if (isdigit(c)) return 2;\n        return 3;\n    }\npublic:\n    int sign = 1;\n    long long ans = 0;\n\n    void get(char c) {\n        state = table[state][get_col(c)];\n        if (state == \"in_number\") {\n            ans = ans * 10 + c - '0';\n            ans = sign == 1 ? min(ans, (long long)INT_MAX) : min(ans, -(long long)INT_MIN);\n        }\n        else if (state == \"signed\")\n            sign = c == '+' ? 1 : -1;\n    }\n};\n\nclass Solution {\npublic:\n    int strToInt(string str) {\n        Automaton automaton;\n        for (char c : str)\n            automaton.get(c);\n        return automaton.sign * automaton.ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_72","title":"\u611f\u60f3","text":"<p>\u53c8\u662f\u72b6\u6001\u673a, \u6211\u4e0d\u559c\u6b22, \u53ef\u80fd\u662f\u6211\u6c34\u5e73\u8fd8\u6ca1\u5230\u5427</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#lcr-120-easy","title":"LCR 120. \u5bfb\u627e\u6587\u4ef6\u526f\u672c(easy)","text":"<p>2023/9/22</p> <p>00 : 01: 56</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_73","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bbe\u5907\u4e2d\u5b58\u6709 <code>n</code> \u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6 <code>id</code> \u8bb0\u4e8e\u6570\u7ec4 <code>documents</code>\u3002\u82e5\u6587\u4ef6 <code>id</code> \u76f8\u540c\uff0c\u5219\u5b9a\u4e49\u4e3a\u8be5\u6587\u4ef6\u5b58\u5728\u526f\u672c\u3002\u8bf7\u8fd4\u56de\u4efb\u4e00\u5b58\u5728\u526f\u672c\u7684\u6587\u4ef6 <code>id</code>\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1adocuments = [2, 5, 3, 0, 5, 0]\n\u8f93\u51fa\uff1a0 \u6216 5\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 \u2264 documents[i] \u2264 n-1</code></li> <li><code>2 &lt;= n &lt;= 100000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_74","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findRepeatDocument(vector&lt;int&gt;&amp; documents) {\n        int n = documents.size();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (i == documents[i])\n            {\n                continue;\n            }\n            else if (documents[documents[i]] == documents[i])\n            {\n                return documents[i];\n            }\n            else\n            {\n                swap(documents[i], documents[documents[i]]);\n                i--;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_75","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int findRepeatNumber(vector&lt;int&gt;&amp; nums) {\n        int i = 0;\n        while(i &lt; nums.size()) {\n            if(nums[i] == i) {\n                i++;\n                continue;\n            }\n            if(nums[nums[i]] == nums[i])\n                return nums[i];\n            swap(nums[i],nums[nums[i]]);\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_76","title":"\u611f\u60f3","text":"<p>\u6700\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5\u662f\u54c8\u5e0c\u8868, \u7528\u539f\u5730\u4ea4\u6362\u7684\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u7701\u5185\u5b58</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#lcr-146-easy","title":"LCR 146. \u87ba\u65cb\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4(easy)","text":"<p>2023/9/21</p> <p>00 : 36 : 48</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_77","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 <code>array</code>\uff0c\u8bf7\u8fd4\u56de\u300c\u87ba\u65cb\u904d\u5386\u300d\u8be5\u6570\u7ec4\u7684\u7ed3\u679c\u3002</p> <p>\u87ba\u65cb\u904d\u5386\uff1a\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u6309\u7167 \u5411\u53f3\u3001\u5411\u4e0b\u3001\u5411\u5de6\u3001\u5411\u4e0a \u7684\u987a\u5e8f \u4f9d\u6b21 \u63d0\u53d6\u5143\u7d20\uff0c\u7136\u540e\u518d\u8fdb\u5165\u5185\u90e8\u4e00\u5c42\u91cd\u590d\u76f8\u540c\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u63d0\u53d6\u5b8c\u6240\u6709\u5143\u7d20\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aarray = [[1,2,3],[8,9,4],[7,6,5]]\n\u8f93\u51fa\uff1a[1,2,3,4,5,6,7,8,9]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aarray  = [[1,2,3,4],[12,13,14,5],[11,16,15,6],[10,9,8,7]]\n\u8f93\u51fa\uff1a[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n</code></pre> <p>\u9650\u5236\uff1a</p> <ul> <li><code>0 &lt;= array.length &lt;= 100</code></li> <li><code>0 &lt;= array[i].length &lt;= 100</code></li> </ul> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 54 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/spiral-matrix/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_78","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int m, n;\n    void next(pair&lt;int, int&gt;&amp; p, vector&lt;vector&lt;bool&gt;&gt; &amp;passedby)\n    {\n        int x = p.first;\n        int y = p.second;\n        passedby[x+1][y+1] = true;\n        if (passedby[x][y+1] &amp;&amp; passedby[x+1][y] &amp;&amp; !passedby[x+1][y+2])\n        {\n            p.second++;\n            return;\n        }\n        if (passedby[x+1][y+2] &amp;&amp; passedby[x][y+1] &amp;&amp; !passedby[x+2][y+1])\n        {\n            p.first++;\n            return;\n        }\n        if (passedby[x+1][y+2] &amp;&amp; passedby[x+2][y+1] &amp;&amp; !passedby[x+1][y])\n        {\n            p.second--;\n            return;\n        }\n        if (passedby[x+2][y+1] &amp;&amp; passedby[x+1][y] &amp;&amp; !passedby[x][y+1])\n        {\n            p.first--;\n            return;\n        }\n    }\n    vector&lt;int&gt; spiralArray(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        m = matrix.size();\n        if (m == 0)\n        {\n            return vector&lt;int&gt;(); \n        }\n        n = matrix[0].size();\n        if (m == 0 || n == 0)\n        {\n            return vector&lt;int&gt;();\n        }\n        vector&lt;vector&lt;bool&gt;&gt; passedby(m+2, vector&lt;bool&gt;(n+2, false));\n        pair&lt;int, int&gt; p;\n        vector&lt;int&gt; ans(m * n);\n        for (int i = 0; i &lt;= m; ++i)\n        {\n            passedby[i][0] = true;\n            passedby[i][n+1] = true;\n        }\n        for (int i = 0; i &lt;= n; ++i)\n        {\n            passedby[0][i] = true;\n            passedby[m+1][i] = true;\n        }\n        for (int i = 0; i &lt; m * n; ++i)\n        {\n            ans[i] = matrix[p.first][p.second];\n            next(p, passedby);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_79","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\nprivate:\n    static constexpr int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\npublic:\n    vector&lt;int&gt; spiralArray(vector&lt;vector&lt;int&gt;&gt;&amp; array) {\n        if (array.size() == 0 || array[0].size() == 0) {\n            return {};\n        }\n\n        int rows = array.size(), columns = array[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited(rows, vector&lt;bool&gt;(columns));\n        int total = rows * columns;\n        vector&lt;int&gt; order(total);\n\n        int row = 0, column = 0;\n        int directionIndex = 0;\n        for (int i = 0; i &lt; total; i++) {\n            order[i] = array[row][column];\n            visited[row][column] = true;\n            int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n            if (nextRow &lt; 0 || nextRow &gt;= rows || nextColumn &lt; 0 || nextColumn &gt;= columns || visited[nextRow][nextColumn]) {\n                directionIndex = (directionIndex + 1) % 4;\n            }\n            row += directions[directionIndex][0];\n            column += directions[directionIndex][1];\n        }\n        return order;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_80","title":"\u611f\u60f3","text":"<p>\u9898\u76ee\u7406\u89e3\u8d77\u6765\u662f\u4e0d\u96be, \u4f46\u662f\u4ee3\u7801\u5199\u8d77\u6765\u5f88\u6076\u5fc3, \u611f\u89c9\u5e94\u8be5\u662fmedium\u96be\u5ea6\u6bd4\u8f83\u5408\u9002</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#lcr-148-medium","title":"LCR 148. \u9a8c\u8bc1\u56fe\u4e66\u53d6\u51fa\u987a\u5e8f(medium)","text":"<p>2023/9/21</p> <p>00 : 08 : 28</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_81","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u73b0\u5728\u56fe\u4e66\u9986\u6709\u4e00\u5806\u56fe\u4e66\u9700\u8981\u653e\u5165\u4e66\u67b6\uff0c\u5e76\u4e14\u56fe\u4e66\u9986\u7684\u4e66\u67b6\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ea\u80fd\u6309\u7167 \u4e00\u5b9a \u7684\u987a\u5e8f \u653e\u5165 \u548c \u62ff\u53d6 \u4e66\u7c4d\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u56fe\u4e66\u653e\u5165\u987a\u5e8f\u7684\u6574\u6570\u5e8f\u5217 <code>putIn</code>\uff0c\u8bf7\u5224\u65ad\u5e8f\u5217 <code>takeOut</code> \u662f\u5426\u4e3a\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u62ff\u53d6\u4e66\u7c4d\u7684\u64cd\u4f5c\u5e8f\u5217\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u653e\u5165\u4e66\u67b6\u7684\u6240\u6709\u4e66\u7c4d\u7f16\u53f7\u90fd\u4e0d\u76f8\u540c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aputIn = [6,7,8,9,10,11], takeOut = [9,11,10,8,7,6]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u64cd\u4f5c\u653e\u5165\u5e76\u62ff\u53d6\u4e66\u7c4d\uff1a\npush(6), push(7), push(8), push(9), pop() -&gt; 9,\npush(11), push(10),pop() -&gt; 11,pop() -&gt; 10, pop() -&gt; 8, pop() -&gt; 7, pop() -&gt; 6\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aputIn = [6,7,8,9,10,11], takeOut = [11,9,8,10,6,7]\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a6 \u4e0d\u80fd\u5728 7 \u4e4b\u524d\u53d6\u51fa\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= putIn.length == takeOut.length &lt;= 1000</code></li> <li><code>0 &lt;= putIn[i], takeOut &lt; 1000</code></li> <li><code>putIn</code> \u662f <code>takeOut</code> \u7684\u6392\u5217\u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 946 \u9898\u76f8\u540c\uff1ahttps://leetcode-cn.com/problems/validate-stack-sequences/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_82","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool validateBookSequences(vector&lt;int&gt;&amp; putIn, vector&lt;int&gt;&amp; takeOut) {\n        stack&lt;int&gt; stk;\n        int n = putIn.size();\n        int remain = n;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (putIn[i] != takeOut[n - remain])\n            {\n                stk.push(putIn[i]);\n            }\n            else\n            {\n                remain--;\n                while (!stk.empty() &amp;&amp; stk.top() == takeOut[n - remain])\n                {\n                    remain--;\n                    stk.pop();\n                }\n            }\n        }\n        return remain == 0;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_83","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool validateBookSequences(vector&lt;int&gt;&amp; putIn, vector&lt;int&gt;&amp; takeOut) {\n        stack&lt;int&gt; stk;\n        int n = putIn.size();\n        int remain = n;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            stk.push(putIn[i]);\n            while (!stk.empty() &amp;&amp; stk.top() == takeOut[n - remain])\n            {\n                remain--;\n                stk.pop();\n            }\n        }\n        return remain == 0;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_84","title":"\u611f\u60f3","text":"<p>\u8fd9\u9898\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86, \u5e94\u8be5\u4e3aeasy</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#lcr-172-easy","title":"LCR 172. \u7edf\u8ba1\u76ee\u6807\u6210\u7ee9\u7684\u51fa\u73b0\u6b21\u6570(easy)","text":"<p>2023/9/22</p> <p>00 : 01 : 06</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_85","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u67d0\u73ed\u7ea7\u8003\u8bd5\u6210\u7ee9\u6309\u975e\u4e25\u683c\u9012\u589e\u987a\u5e8f\u8bb0\u5f55\u4e8e\u6574\u6570\u6570\u7ec4 <code>scores</code>\uff0c\u8bf7\u8fd4\u56de\u76ee\u6807\u6210\u7ee9 <code>target</code> \u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165: scores = [2, 2, 3, 4, 4, 4, 5, 6, 6, 8], target = 4\n\u8f93\u51fa: 3\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: scores = [1, 2, 3, 5, 7, 9], target = 6\n\u8f93\u51fa: 0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>0 &lt;= scores.length &lt;= 105</code></li> <li><code>-109 &lt;= scores[i] &lt;= 109</code></li> <li><code>scores</code> \u662f\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u7ec4</li> <li><code>-109 &lt;= target &lt;= 109</code></li> </ul> <p>\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 34 \u9898\u76f8\u540c\uff08\u4ec5\u8fd4\u56de\u503c\u4e0d\u540c\uff09\uff1ahttps://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_86","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int binarySearchLeft(vector&lt;int&gt;&amp; scores, int &amp;target, int left, int right)\n    {\n        if (left == right)\n        {\n            return scores[left] == target ? left : -1;\n        }\n        int mid = (left + right) / 2;\n        if (scores[mid] &lt; target)\n        {\n            return binarySearchLeft(scores, target, mid + 1, right);\n        }\n        else\n        {\n            return binarySearchLeft(scores, target, left, mid);\n        }\n    }\n    int binarySearchRight(vector&lt;int&gt;&amp; scores, int &amp;target, int left, int right)\n    {\n        if (left == right)\n        {\n            return scores[left] == target ? left : -1;\n        }\n        int mid = (left + right + 1) / 2;\n        if (scores[mid] &lt;= target)\n        {\n            return binarySearchRight(scores, target, mid, right);\n        }\n        else\n        {\n            return binarySearchRight(scores, target, left, mid -1);\n        }\n    }\n    int countTarget(vector&lt;int&gt;&amp; scores, int target) {\n        if (scores.size() == 0)\n        {\n            return 0;\n        }\n        int left = binarySearchLeft(scores, target, 0, scores.size()-1);\n        int right = binarySearchRight(scores, target, 0, scores.size()-1);\n        return right != -1 ? right - left + 1 : 0;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_87","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        return upper_bound(begin(nums), end(nums), target) - lower_bound(begin(nums), end(nums), target);\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer/#_88","title":"\u611f\u60f3","text":"<p>\u4e00\u5f00\u59cb\u6ca1\u6709\u770b\u5230\u662f\u9012\u589e\u7684\u5e8f\u5217, \u76f4\u63a5O(n)\u904d\u5386\u4e86, \u8fd8\u5728\u60f3\u600e\u4e48\u8fd9\u4e48\u65e0\u8111, \u770b\u4e86\u9898\u89e3\u624d\u53d1\u73b0\u662f\u9012\u589e\u5e8f\u5217, \u53c8\u518d\u5199\u4e86\u4e00\u904d\u4e8c\u5206\u7684\u7248\u672c, \u4e0d\u5f97\u4e0d\u8bf4\u4e8c\u5206\u7684\u8fb9\u754c\u786e\u5b9e\u4e0d\u597d\u5224\u65ad</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/","title":"2596. \u68c0\u67e5\u9a91\u58eb\u5de1\u89c6\u65b9\u6848(medium)","text":"<p>2023/9/13</p> <p>00 : 20 : 58</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9a91\u58eb\u5728\u4e00\u5f20 <code>n x n</code> \u7684\u68cb\u76d8\u4e0a\u5de1\u89c6\u3002\u5728\u6709\u6548\u7684\u5de1\u89c6\u65b9\u6848\u4e2d\uff0c\u9a91\u58eb\u4f1a\u4ece\u68cb\u76d8\u7684 \u5de6\u4e0a\u89d2 \u51fa\u53d1\uff0c\u5e76\u4e14\u8bbf\u95ee\u68cb\u76d8\u4e0a\u7684\u6bcf\u4e2a\u683c\u5b50 \u6070\u597d\u4e00\u6b21 \u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a <code>n x n</code> \u7684\u6574\u6570\u77e9\u9635 <code>grid</code> \uff0c\u7531\u8303\u56f4 <code>[0, n * n - 1]</code> \u5185\u7684\u4e0d\u540c\u6574\u6570\u7ec4\u6210\uff0c\u5176\u4e2d <code>grid[row][col]</code> \u8868\u793a\u5355\u5143\u683c <code>(row, col)</code> \u662f\u9a91\u58eb\u8bbf\u95ee\u7684\u7b2c <code>grid[row][col]</code> \u4e2a\u5355\u5143\u683c\u3002\u9a91\u58eb\u7684\u884c\u52a8\u662f\u4ece\u4e0b\u6807 0 \u5f00\u59cb\u7684\u3002</p> <p>\u5982\u679c <code>grid</code> \u8868\u793a\u4e86\u9a91\u58eb\u7684\u6709\u6548\u5de1\u89c6\u65b9\u6848\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p> <p>\u6ce8\u610f\uff0c\u9a91\u58eb\u884c\u52a8\u65f6\u53ef\u4ee5\u5782\u76f4\u79fb\u52a8\u4e24\u4e2a\u683c\u5b50\u4e14\u6c34\u5e73\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\uff0c\u6216\u6c34\u5e73\u79fb\u52a8\u4e24\u4e2a\u683c\u5b50\u4e14\u5782\u76f4\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u9a91\u58eb\u4ece\u67d0\u4e2a\u683c\u5b50\u51fa\u53d1\u53ef\u80fd\u7684\u516b\u79cd\u884c\u52a8\u8def\u7ebf\u3002 </p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1agrid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1agrid \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5de1\u89c6\u65b9\u6848\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1agrid = [[0,3,6],[5,8,1],[2,7,4]]\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1agrid \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8003\u8651\u5230\u9a91\u58eb\u7b2c 7 \u6b21\u884c\u52a8\u540e\u7684\u4f4d\u7f6e\uff0c\u7b2c 8 \u6b21\u884c\u52a8\u662f\u65e0\u6548\u7684\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>3 &lt;= n &lt;= 7</code></li> <li><code>0 &lt;= grid[row][col] &lt; n * n</code></li> <li><code>grid</code> \u4e2d\u7684\u6240\u6709\u6574\u6570 \u4e92\u4e0d\u76f8\u540c</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_2","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool check(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int&amp; posX, int&amp; posY, int&amp; x)\n    {\n        int n = grid.size();\n        // 1\n        if (posX &gt; 1 &amp;&amp; posY &gt; 0 &amp;&amp; grid[posX-2][posY-1] == x+1)\n        {\n            x++;\n            posX -= 2;\n            posY -= 1;\n            return true;\n        }\n        // 2\n        if (posX &gt; 0 &amp;&amp; posY &gt; 1 &amp;&amp; grid[posX-1][posY-2] == x+1)\n        {\n            x++;\n            posX -= 1;\n            posY -= 2;\n            return true;\n        }\n        // 3\n        if (posX &lt; n-1 &amp;&amp; posY &gt; 1 &amp;&amp; grid[posX+1][posY-2] == x+1)\n        {\n            x++;\n            posX += 1;\n            posY -= 2;\n            return true;\n        }\n        // 4\n        if (posX &lt; n-2 &amp;&amp; posY &gt; 0 &amp;&amp; grid[posX+2][posY-1] == x+1)\n        {\n            x++;\n            posX += 2;\n            posY -= 1;\n            return true;\n        }\n        // 5\n        if (posX &gt; 1 &amp;&amp; posY &lt; n-1 &amp;&amp; grid[posX-2][posY+1] == x+1)\n        {\n            x++;\n            posX -= 2;\n            posY += 1;\n            return true;\n        }\n        // 6\n        if (posX &gt; 0 &amp;&amp; posY &lt; n-2 &amp;&amp; grid[posX-1][posY+2] == x+1)\n        {\n            x++;\n            posX -= 1;\n            posY += 2;\n            return true;\n        }\n        // 7\n        if (posX &lt; n-1 &amp;&amp; posY &lt; n-2 &amp;&amp; grid[posX+1][posY+2] == x+1)\n        {\n            x++;\n            posX += 1;\n            posY += 2;\n            return true;\n        }\n        // 8\n        if (posX &lt; n-2 &amp;&amp; posY &lt; n-1 &amp;&amp; grid[posX+2][posY+1] == x+1)\n        {\n            x++;\n            posX += 2;\n            posY += 1;\n            return true;\n        }\n        return false;\n\n    }\n    bool checkValidGrid(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        int x = 0;\n        int n = grid.size();\n        int posX = 0, posY = 0;\n        if (grid[0][0] != 0)\n        {\n            return false;\n        }\n        while (x &lt; n*n - 1)\n        {\n            if (!check(grid, posX, posY, x))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_3","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    bool checkValidGrid(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        if (grid[0][0] != 0) {\n            return false;\n        }\n        int n = grid.size();\n        vector&lt;array&lt;int, 2&gt;&gt; indices(n * n);\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                indices[grid[i][j]] = {i, j};\n            }\n        }\n        for (int i = 1; i &lt; indices.size(); i++) {\n            int dx = abs(indices[i][0] - indices[i - 1][0]);\n            int dy = abs(indices[i][1] - indices[i - 1][1]);\n            if (dx * dy != 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_4","title":"\u611f\u60f3","text":"<p>\u53ef\u4ee5\u9884\u5148\u5b58\u653eindices\u6570\u7ec4\u4e3a\u9a91\u58eb\u4f9d\u6b21\u8d70\u8fc7\u7684\u4f4d\u7f6e, \u518d\u8fdb\u884c\u4e00\u4e2a\u7edd\u5bf9\u503c\u7684\u4e58\u79ef\u7684\u5224\u65ad\u5373\u53ef</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#1222-medium","title":"1222. \u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e(medium)","text":"<p>2023/9/14</p> <p>00 : 16 : 58</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_5","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u4e00\u4e2a 8x8 \u7684\u68cb\u76d8\u4e0a\uff0c\u653e\u7f6e\u7740\u82e5\u5e72\u300c\u9ed1\u7687\u540e\u300d\u548c\u4e00\u4e2a\u300c\u767d\u56fd\u738b\u300d\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u5750\u6807\u7ec4\u6210\u7684\u6570\u7ec4 <code>queens</code> \uff0c\u8868\u793a\u9ed1\u7687\u540e\u7684\u4f4d\u7f6e\uff1b\u4ee5\u53ca\u4e00\u5bf9\u5750\u6807 <code>king</code> \uff0c\u8868\u793a\u767d\u56fd\u738b\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u4ee5\u653b\u51fb\u56fd\u738b\u7684\u7687\u540e\u7684\u5750\u6807(\u4efb\u610f\u987a\u5e8f)\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aqueens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\n\u8f93\u51fa\uff1a[[0,1],[1,0],[3,3]]\n\u89e3\u91ca\uff1a \n[0,1] \u7684\u7687\u540e\u53ef\u4ee5\u653b\u51fb\u5230\u56fd\u738b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u540c\u4e00\u884c\u4e0a\u3002 \n[1,0] \u7684\u7687\u540e\u53ef\u4ee5\u653b\u51fb\u5230\u56fd\u738b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u540c\u4e00\u5217\u4e0a\u3002 \n[3,3] \u7684\u7687\u540e\u53ef\u4ee5\u653b\u51fb\u5230\u56fd\u738b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5728\u540c\u4e00\u6761\u5bf9\u89d2\u7ebf\u4e0a\u3002 \n[0,4] \u7684\u7687\u540e\u65e0\u6cd5\u653b\u51fb\u5230\u56fd\u738b\uff0c\u56e0\u4e3a\u5979\u88ab\u4f4d\u4e8e [0,1] \u7684\u7687\u540e\u6321\u4f4f\u4e86\u3002 \n[4,0] \u7684\u7687\u540e\u65e0\u6cd5\u653b\u51fb\u5230\u56fd\u738b\uff0c\u56e0\u4e3a\u5979\u88ab\u4f4d\u4e8e [1,0] \u7684\u7687\u540e\u6321\u4f4f\u4e86\u3002 \n[2,4] \u7684\u7687\u540e\u65e0\u6cd5\u653b\u51fb\u5230\u56fd\u738b\uff0c\u56e0\u4e3a\u5979\u548c\u56fd\u738b\u4e0d\u5728\u540c\u4e00\u884c/\u5217/\u5bf9\u89d2\u7ebf\u4e0a\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aqueens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\n\u8f93\u51fa\uff1a[[2,2],[3,4],[4,4]]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1aqueens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]\n\u8f93\u51fa\uff1a[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= queens.length &lt;= 63</code></li> <li><code>queens[i].length == 2</code></li> <li><code>0 &lt;= queens[i][j] &lt; 8</code></li> <li><code>king.length == 2</code></li> <li><code>0 &lt;= king[0], king[1] &lt; 8</code></li> <li>\u4e00\u4e2a\u68cb\u76d8\u683c\u4e0a\u6700\u591a\u53ea\u80fd\u653e\u7f6e\u4e00\u679a\u68cb\u5b50\u3002</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_6","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int distance(vector&lt;int&gt; queen, vector&lt;int&gt; king)\n    {\n        int differX = queen[0] - king[0];\n        int differY = queen[1] - king[1];\n        return differX * differX + differY * differY;\n    }\n    vector&lt;vector&lt;int&gt;&gt; queensAttacktheKing(vector&lt;vector&lt;int&gt;&gt;&amp; queens, vector&lt;int&gt;&amp; king) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        // 0 1 2\n        // 3   4\n        // 5 6 7\n        unordered_map&lt;int, vector&lt;int&gt;&gt; canAtt;\n        for (auto &amp; queen : queens)\n        {\n            int differX = queen[0] - king[0];\n            int differY = queen[1] - king[1];\n            int flag;\n            if (differX == 0)\n            {\n                flag = differY &gt; 0 ? 4 : 3;\n            }\n            else if (differY == 0)\n            {\n                flag = differX &gt; 0 ? 6 : 1;\n            }\n            else if (differX == differY)\n            {\n                flag = differX &gt; 0 ? 7 : 0;\n            }\n            else if (differX == -differY)\n            {\n                flag = differX &gt; 0 ? 5 : 2;\n            }\n            else\n            {\n                continue;\n            }\n            if (canAtt.find(flag) == canAtt.end())\n            {\n                canAtt[flag] = queen;\n            }\n            else if (distance(queen, king) &lt; distance(canAtt[flag], king))\n            {\n                canAtt[flag] = queen;\n            }\n        }\n        for (auto &amp; it : canAtt)\n        {\n            res.push_back(it.second);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_7","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; queensAttacktheKing(vector&lt;vector&lt;int&gt;&gt;&amp; queens, vector&lt;int&gt;&amp; king) {\n        unordered_set&lt;int&gt; queen_pos;\n        for (const auto&amp; queen: queens) {\n            int x = queen[0], y = queen[1];\n            queen_pos.insert(x * 8 + y);\n        }\n\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for (int dx = -1; dx &lt;= 1; ++dx) {\n            for (int dy = -1; dy &lt;= 1; ++dy) {\n                if (dx == 0 &amp;&amp; dy == 0) {\n                    continue;\n                }\n                int kx = king[0] + dx, ky = king[1] + dy;\n                while (kx &gt;= 0 &amp;&amp; kx &lt; 8 &amp;&amp; ky &gt;= 0 &amp;&amp; ky &lt; 8) {\n                    int pos = kx * 8 + ky;\n                    if (queen_pos.count(pos)) {\n                        ans.push_back({kx, ky});\n                        break;\n                    }\n                    kx += dx;\n                    ky += dy;\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_8","title":"\u611f\u60f3","text":"<p>\u4ece\u56fd\u738b\u51fa\u53d1, \u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u54c8\u5e0c\u8868</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#lcp-50-easy","title":"LCP 50. \u5b9d\u77f3\u8865\u7ed9(easy)","text":"<p>2023/9/15</p> <p>00 : 02 : 31</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_9","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6b22\u8fce\u5404\u4f4d\u52c7\u8005\u6765\u5230\u529b\u6263\u65b0\u624b\u6751\uff0c\u5728\u5f00\u59cb\u8bd5\u70bc\u4e4b\u524d\uff0c\u8bf7\u5404\u4f4d\u52c7\u8005\u5148\u8fdb\u884c\u300c\u5b9d\u77f3\u8865\u7ed9\u300d\u3002</p> <p>\u6bcf\u4f4d\u52c7\u8005\u521d\u59cb\u90fd\u62e5\u6709\u4e00\u4e9b\u80fd\u91cf\u5b9d\u77f3\uff0c <code>gem[i]</code> \u8868\u793a\u7b2c <code>i</code> \u4f4d\u52c7\u8005\u7684\u5b9d\u77f3\u6570\u91cf\u3002\u73b0\u5728\u8fd9\u4e9b\u52c7\u8005\u4eec\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u7684\u8d60\u9001\uff0c<code>operations[j] = [x, y]</code> \u8868\u793a\u5728\u7b2c <code>j</code> \u6b21\u7684\u8d60\u9001\u4e2d \u7b2c <code>x</code> \u4f4d\u52c7\u8005\u5c06\u81ea\u5df1\u4e00\u534a\u7684\u5b9d\u77f3\uff08\u9700\u5411\u4e0b\u53d6\u6574\uff09\u8d60\u9001\u7ed9\u7b2c <code>y</code> \u4f4d\u52c7\u8005\u3002</p> <p>\u5728\u5b8c\u6210\u6240\u6709\u7684\u8d60\u9001\u540e\uff0c\u8bf7\u627e\u5230\u62e5\u6709\u6700\u591a\u5b9d\u77f3\u7684\u52c7\u8005\u548c\u62e5\u6709\u6700\u5c11\u5b9d\u77f3\u7684\u52c7\u8005\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u4e8c\u8005\u7684\u5b9d\u77f3\u6570\u91cf\u4e4b\u5dee\u3002</p> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u8d60\u9001\u5c06\u6309\u987a\u5e8f\u9010\u6b65\u8fdb\u884c\u3002</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1a<code>gem = [3,1,2], operations = [[0,2],[2,1],[2,0]]</code></p> <p>\u8f93\u51fa\uff1a<code>2</code></p> <p>\u89e3\u91ca\uff1a \u7b2c 1 \u6b21\u64cd\u4f5c\uff0c\u52c7\u8005 <code>0</code> \u5c06\u4e00\u534a\u7684\u5b9d\u77f3\u8d60\u9001\u7ed9\u52c7\u8005 <code>2</code>\uff0c <code>gem = [2,1,3]</code> \u7b2c 2 \u6b21\u64cd\u4f5c\uff0c\u52c7\u8005 <code>2</code> \u5c06\u4e00\u534a\u7684\u5b9d\u77f3\u8d60\u9001\u7ed9\u52c7\u8005 <code>1</code>\uff0c <code>gem = [2,2,2]</code> \u7b2c 3 \u6b21\u64cd\u4f5c\uff0c\u52c7\u8005 <code>2</code> \u5c06\u4e00\u534a\u7684\u5b9d\u77f3\u8d60\u9001\u7ed9\u52c7\u8005 <code>0</code>\uff0c <code>gem = [3,2,1]</code> \u8fd4\u56de 3 - 1 = 2</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1a<code>gem = [100,0,50,100], operations = [[0,2],[0,1],[3,0],[3,0]]</code></p> <p>\u8f93\u51fa\uff1a<code>75</code></p> <p>\u89e3\u91ca\uff1a \u7b2c 1 \u6b21\u64cd\u4f5c\uff0c\u52c7\u8005 <code>0</code> \u5c06\u4e00\u534a\u7684\u5b9d\u77f3\u8d60\u9001\u7ed9\u52c7\u8005 <code>2</code>\uff0c <code>gem = [50,0,100,100]</code> \u7b2c 2 \u6b21\u64cd\u4f5c\uff0c\u52c7\u8005 <code>0</code> \u5c06\u4e00\u534a\u7684\u5b9d\u77f3\u8d60\u9001\u7ed9\u52c7\u8005 <code>1</code>\uff0c <code>gem = [25,25,100,100]</code> \u7b2c 3 \u6b21\u64cd\u4f5c\uff0c\u52c7\u8005 <code>3</code> \u5c06\u4e00\u534a\u7684\u5b9d\u77f3\u8d60\u9001\u7ed9\u52c7\u8005 <code>0</code>\uff0c <code>gem = [75,25,100,50]</code> \u7b2c 4 \u6b21\u64cd\u4f5c\uff0c\u52c7\u8005 <code>3</code> \u5c06\u4e00\u534a\u7684\u5b9d\u77f3\u8d60\u9001\u7ed9\u52c7\u8005 <code>0</code>\uff0c <code>gem = [100,25,100,25]</code> \u8fd4\u56de 100 - 25 = 75</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1a<code>gem = [0,0,0,0], operations = [[1,2],[3,1],[1,2]]</code></p> <p>\u8f93\u51fa\uff1a<code>0</code></p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>2 &lt;= gem.length &lt;= 10^3</code></li> <li><code>0 &lt;= gem[i] &lt;= 10^3</code></li> <li><code>0 &lt;= operations.length &lt;= 10^4</code></li> <li><code>operations[i].length == 2</code></li> <li><code>0 &lt;= operations[i][0], operations[i][1] &lt; gem.length</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_10","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int giveGem(vector&lt;int&gt;&amp; gem, vector&lt;vector&lt;int&gt;&gt;&amp; operations) {\n        for (auto &amp; op : operations)\n        {\n            int tmp = gem[op[0]] / 2;\n            gem[op[0]] -= tmp;\n            gem[op[1]] += tmp;\n        }\n        int max = 0, min = 1000;\n        for (auto &amp; it : gem)\n        {\n            max = it &gt; max ? it : max;\n            min = it &lt; min ? it : min;\n        }\n        return max - min;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_11","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int giveGem(vector&lt;int&gt;&amp; gem, vector&lt;vector&lt;int&gt;&gt;&amp; operations) {\n        for (auto &amp;operation : operations) {\n            int x = operation[0], y = operation[1];\n            int number = gem[x] / 2;\n            gem[x] -= number;\n            gem[y] += number;\n        }\n        int mn = *min_element(gem.begin(), gem.end());\n        int mx = *max_element(gem.begin(), gem.end());\n        return mx - mn;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_12","title":"\u611f\u60f3","text":"<p>\u81ea\u7136\u4e14\u7b80\u5355</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#213-iimedium","title":"213. \u6253\u5bb6\u52ab\u820d II(medium)","text":"<p>2023/9/17</p> <p>00 : 25 : 01</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_13","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\uff0c\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u8fd9\u4e2a\u5730\u65b9\u6240\u6709\u7684\u623f\u5c4b\u90fd \u56f4\u6210\u4e00\u5708 \uff0c\u8fd9\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u623f\u5c4b\u548c\u6700\u540e\u4e00\u4e2a\u623f\u5c4b\u662f\u7d27\u6328\u7740\u7684\u3002\u540c\u65f6\uff0c\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66 \u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4eca\u665a\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,3,2]\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u4f60\u4e0d\u80fd\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09, \u56e0\u4e3a\u4ed6\u4eec\u662f\u76f8\u90bb\u7684\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3,1]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u4f60\u53ef\u4ee5\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 1\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 3\uff09\u3002\n     \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1,2,3]\n\u8f93\u51fa\uff1a3\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_14","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n &lt; 4)\n        {\n            return *max_element(nums.begin(), nums.end());\n        }\n        vector&lt;int&gt; Inc(n, 0); // include 1\n        vector&lt;int&gt; nInc(n, 0); // not include 1\n        Inc[0] = nums[0]; nInc[0] = 0;\n        Inc[1] = 0; nInc[1] = nums[1];\n        Inc[2] = nums[0] + nums[2]; nInc[2] = nums[2];\n        int res = Inc[2];\n        for (int i = 3; i &lt; n-1; ++i)\n        {\n            Inc[i] = max(Inc[i-2], Inc[i-3]) + nums[i];\n            nInc[i] = max(nInc[i-2], nInc[i-3]) + nums[i];\n            res = max(res, max(Inc[i], nInc[i]));\n        }\n        nInc[n-1] = max(nInc[n-3], nInc[n-4]) + nums[n-1];\n        res = max(res, nInc[n-1]);\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_15","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\n    // 198. \u6253\u5bb6\u52ab\u820d\n    int rob1(vector&lt;int&gt; &amp;nums, int start, int end) { // [start,end) \u5de6\u95ed\u53f3\u5f00\n        int f0 = 0, f1 = 0;\n        for (int i = start; i &lt; end; ++i) {\n            int new_f = max(f1, f0 + nums[i]);\n            f0 = f1;\n            f1 = new_f;\n        }\n        return f1;\n    }\n\npublic:\n    int rob(vector&lt;int&gt; &amp;nums) {\n        int n = nums.size();\n        return max(nums[0] + rob1(nums, 2, n - 1), rob1(nums, 1, n));\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_16","title":"\u611f\u60f3","text":"<p>\u5206\u6210\u4e24\u6bb5\u6765\u6267\u884c\u6253\u5bb6\u52ab\u820d1\u7684\u64cd\u4f5c\u5f88\u597d</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#2560-ivmedium","title":"2560. \u6253\u5bb6\u52ab\u820d IV(medium)","text":"<p>2023/9/19</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_17","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6cbf\u8857\u6709\u4e00\u6392\u8fde\u7eed\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5c4b\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u73b0\u5728\u6709\u4e00\u4f4d\u5c0f\u5077\u8ba1\u5212\u4ece\u8fd9\u4e9b\u623f\u5c4b\u4e2d\u7a83\u53d6\u73b0\u91d1\u3002</p> <p>\u7531\u4e8e\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u6240\u4ee5\u5c0f\u5077 \u4e0d\u4f1a\u7a83\u53d6\u76f8\u90bb\u7684\u623f\u5c4b \u3002</p> <p>\u5c0f\u5077\u7684 \u7a83\u53d6\u80fd\u529b \u5b9a\u4e49\u4e3a\u4ed6\u5728\u7a83\u53d6\u8fc7\u7a0b\u4e2d\u80fd\u4ece\u5355\u95f4\u623f\u5c4b\u4e2d\u7a83\u53d6\u7684 \u6700\u5927\u91d1\u989d \u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u8868\u793a\u6bcf\u95f4\u623f\u5c4b\u5b58\u653e\u7684\u73b0\u91d1\u91d1\u989d\u3002\u5f62\u5f0f\u4e0a\uff0c\u4ece\u5de6\u8d77\u7b2c <code>i</code> \u95f4\u623f\u5c4b\u4e2d\u653e\u6709 <code>nums[i]</code> \u7f8e\u5143\u3002</p> <p>\u53e6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c\u8868\u793a\u7a83\u8d3c\u5c06\u4f1a\u7a83\u53d6\u7684 \u6700\u5c11 \u623f\u5c4b\u6570\u3002\u5c0f\u5077\u603b\u80fd\u7a83\u53d6\u81f3\u5c11 <code>k</code> \u95f4\u623f\u5c4b\u3002</p> <p>\u8fd4\u56de\u5c0f\u5077\u7684 \u6700\u5c0f \u7a83\u53d6\u80fd\u529b\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,3,5,9], k = 2\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\n\u5c0f\u5077\u7a83\u53d6\u81f3\u5c11 2 \u95f4\u623f\u5c4b\uff0c\u5171\u6709 3 \u79cd\u65b9\u5f0f\uff1a\n- \u7a83\u53d6\u4e0b\u6807 0 \u548c 2 \u5904\u7684\u623f\u5c4b\uff0c\u7a83\u53d6\u80fd\u529b\u4e3a max(nums[0], nums[2]) = 5 \u3002\n- \u7a83\u53d6\u4e0b\u6807 0 \u548c 3 \u5904\u7684\u623f\u5c4b\uff0c\u7a83\u53d6\u80fd\u529b\u4e3a max(nums[0], nums[3]) = 9 \u3002\n- \u7a83\u53d6\u4e0b\u6807 1 \u548c 3 \u5904\u7684\u623f\u5c4b\uff0c\u7a83\u53d6\u80fd\u529b\u4e3a max(nums[1], nums[3]) = 9 \u3002\n\u56e0\u6b64\uff0c\u8fd4\u56de min(5, 9, 9) = 5 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [2,7,9,3,1], k = 2\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u5171\u6709 7 \u79cd\u7a83\u53d6\u65b9\u5f0f\u3002\u7a83\u53d6\u80fd\u529b\u6700\u5c0f\u7684\u60c5\u51b5\u6240\u5bf9\u5e94\u7684\u65b9\u5f0f\u662f\u7a83\u53d6\u4e0b\u6807 0 \u548c 4 \u5904\u7684\u623f\u5c4b\u3002\u8fd4\u56de max(nums[0], nums[4]) = 2 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>1 &lt;= nums[i] &lt;= 109</code></li> <li><code>1 &lt;= k &lt;= (nums.length + 1)/2</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_18","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int minCapability(vector&lt;int&gt;&amp; nums, int k) {\n        int lower = *min_element(nums.begin(), nums.end());\n        int upper = *max_element(nums.begin(), nums.end());\n        while (lower &lt;= upper)\n        {\n            int mid = (lower + upper) / 2;\n            int cnt = 0;\n            bool passed = false;\n            for (auto &amp; num : nums)\n            {\n                if (passed)\n                {\n                    passed = false;\n                    continue;\n                }\n                if (num &lt;= mid)\n                {\n                    cnt++;\n                    passed = true;\n                }\n            }\n            if (cnt &lt; k)\n                lower = mid + 1;\n            else\n                upper = mid - 1;\n        }\n        return lower;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_19","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int minCapability(vector&lt;int&gt;&amp; nums, int k) {\n        int lower = *min_element(nums.begin(), nums.end());\n        int upper = *max_element(nums.begin(), nums.end());\n        while (lower &lt;= upper) {\n            int middle = (lower + upper) / 2;\n            int count = 0;\n            bool visited = false;\n            for (int x : nums) {\n                if (x &lt;= middle &amp;&amp; !visited) {\n                    count++;\n                    visited = true;\n                } else {\n                    visited = false;\n                }\n            }\n            if (count &gt;= k) {\n                upper = middle - 1;\n            } else {\n                lower = middle + 1;\n            }\n        }\n        return lower;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_20","title":"\u611f\u60f3","text":"<p>\u4e0d\u662fdp\u4e86, \u662f\u4e8c\u5206\u67e5\u627e</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#lcp-06-easy","title":"LCP 06. \u62ff\u786c\u5e01(easy)","text":"<p>2023/9/20</p> <p>00 : 01 : 21</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_21","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u684c\u4e0a\u6709 <code>n</code> \u5806\u529b\u6263\u5e01\uff0c\u6bcf\u5806\u7684\u6570\u91cf\u4fdd\u5b58\u5728\u6570\u7ec4 <code>coins</code> \u4e2d\u3002\u6211\u4eec\u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u5806\uff0c\u62ff\u8d70\u5176\u4e2d\u7684\u4e00\u679a\u6216\u8005\u4e24\u679a\uff0c\u6c42\u62ff\u5b8c\u6240\u6709\u529b\u6263\u5e01\u7684\u6700\u5c11\u6b21\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1a<code>[4,2,1]</code></p> <p>\u8f93\u51fa\uff1a<code>4</code></p> <p>\u89e3\u91ca\uff1a\u7b2c\u4e00\u5806\u529b\u6263\u5e01\u6700\u5c11\u9700\u8981\u62ff 2 \u6b21\uff0c\u7b2c\u4e8c\u5806\u6700\u5c11\u9700\u8981\u62ff 1 \u6b21\uff0c\u7b2c\u4e09\u5806\u6700\u5c11\u9700\u8981\u62ff 1 \u6b21\uff0c\u603b\u5171 4 \u6b21\u5373\u53ef\u62ff\u5b8c\u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1a<code>[2,3,10]</code></p> <p>\u8f93\u51fa\uff1a<code>8</code></p> <p>\u9650\u5236\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 4</code></li> <li><code>1 &lt;= coins[i] &lt;= 10</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_22","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int minCount(vector&lt;int&gt;&amp; coins) {\n        int res = 0;\n        for (auto &amp; coin : coins)\n        {\n            res += (coin + 1) / 2;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_23","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_24","title":"\u611f\u60f3","text":"<p>\u6700\u7b80\u5355\u7684\u4e00\u9898, \u5c0f\u5b66\u751f\u90fd\u4f1a\u505a</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#2603-hard","title":"2603. \u6536\u96c6\u6811\u4e2d\u91d1\u5e01(hard)","text":"<p>2023/9/21</p> <p>00 : 29 : 47</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_25","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a <code>n</code> \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u65e0\u6839\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4ece <code>0</code> \u5230 <code>n - 1</code> \u3002\u7ed9\u4f60\u6574\u6570 <code>n</code> \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n - 1</code> \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 <code>edges</code> \uff0c\u5176\u4e2d <code>edges[i] = [ai, bi]</code> \u8868\u793a\u6811\u4e2d\u8282\u70b9 <code>ai</code> \u548c <code>bi</code> \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002\u518d\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6570\u7ec4 <code>coins</code> \uff0c\u5176\u4e2d <code>coins[i]</code> \u53ef\u80fd\u4e3a <code>0</code> \u4e5f\u53ef\u80fd\u4e3a <code>1</code> \uff0c<code>1</code> \u8868\u793a\u8282\u70b9 <code>i</code> \u5904\u6709\u4e00\u4e2a\u91d1\u5e01\u3002</p> <p>\u4e00\u5f00\u59cb\uff0c\u4f60\u9700\u8981\u9009\u62e9\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u3002\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\u4efb\u610f\u6b21\uff1a</p> <ul> <li>\u6536\u96c6\u8ddd\u79bb\u5f53\u524d\u8282\u70b9\u8ddd\u79bb\u4e3a <code>2</code> \u4ee5\u5185\u7684\u6240\u6709\u91d1\u5e01\uff0c\u6216\u8005</li> <li>\u79fb\u52a8\u5230\u6811\u4e2d\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u3002</li> </ul> <p>\u4f60\u9700\u8981\u6536\u96c6\u6811\u4e2d\u6240\u6709\u7684\u91d1\u5e01\uff0c\u5e76\u4e14\u56de\u5230\u51fa\u53d1\u8282\u70b9\uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u5c11\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002</p> <p>\u5982\u679c\u4f60\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\uff0c\u6bcf\u4e00\u6b21\u7ecf\u8fc7\u90fd\u4f1a\u7ed9\u7b54\u6848\u52a0\u4e00\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1acoins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u4ece\u8282\u70b9 2 \u51fa\u53d1\uff0c\u6536\u96c6\u8282\u70b9 0 \u5904\u7684\u91d1\u5e01\uff0c\u79fb\u52a8\u5230\u8282\u70b9 3 \uff0c\u6536\u96c6\u8282\u70b9 5 \u5904\u7684\u91d1\u5e01\uff0c\u7136\u540e\u79fb\u52a8\u56de\u8282\u70b9 2 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1acoins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u4ece\u8282\u70b9 0 \u51fa\u53d1\uff0c\u6536\u96c6\u8282\u70b9 4 \u548c 3 \u5904\u7684\u91d1\u5e01\uff0c\u79fb\u52a8\u5230\u8282\u70b9 2 \u5904\uff0c\u6536\u96c6\u8282\u70b9 7 \u5904\u7684\u91d1\u5e01\uff0c\u79fb\u52a8\u56de\u8282\u70b9 0 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>n == coins.length</code></li> <li><code>1 &lt;= n &lt;= 3 * 104</code></li> <li><code>0 &lt;= coins[i] &lt;= 1</code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= ai, bi &lt; n</code></li> <li><code>ai != bi</code></li> <li><code>edges</code> \u8868\u793a\u4e00\u68f5\u5408\u6cd5\u7684\u6811\u3002</li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_26","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int collectTheCoins(vector&lt;int&gt;&amp; coins, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        int n = coins.size();\n        int remain = n;\n        vector&lt;vector&lt;int&gt;&gt; graph(n);\n        vector&lt;int&gt; degree(n, 0);\n        for (auto &amp; edge : edges)\n        {\n            graph[edge[0]].push_back(edge[1]);\n            graph[edge[1]].push_back(edge[0]);\n            degree[edge[0]]++;\n            degree[edge[1]]++;\n        }\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (degree[i] == 1 &amp;&amp; !coins[i])\n            {\n                q.push(i);\n            }\n        }\n        while (!q.empty())\n        {\n            int toDel = q.front();\n            degree[toDel]--;\n            remain--;\n            q.pop();\n            for (auto &amp; it : graph[toDel])\n            {\n                degree[it]--;\n                if (degree[it] == 1 &amp;&amp; !coins[it])\n                {\n                    q.push(it);\n                }\n            }\n        }\n\n        for (int _ = 0; _ &lt; 2; ++_)\n        {\n            for (int i = 0; i &lt; n; ++i)\n            {\n                if (degree[i] == 1)\n                {\n                    q.push(i);\n                }\n            }\n            while (!q.empty())\n            {\n                int toDel = q.front();\n                degree[toDel]--;\n                remain--;\n                q.pop();\n                for (auto &amp; it : graph[toDel])\n                {\n                    degree[it]--;\n                }\n            }\n        }\n        return remain &lt;= 1 ? 0 : (remain - 1) * 2;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_27","title":"\u53c2\u8003\u7b54\u6848","text":""},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_28","title":"\u611f\u60f3","text":"<p>\u5b8c\u5168\u6ca1\u6709\u601d\u8def, \u4e09\u5206\u949f\u5c31\u770b\u7b54\u6848\u53bb\u4e86, \u611f\u89c9\u786e\u5b9e\u60f3\u4e0d\u5230, \u4e0b\u6b21\u518d\u4e0d\u4f1a\u7ee7\u7eed\u770b\u9898\u89e3()</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#2591-easy","title":"2591. \u5c06\u94b1\u5206\u7ed9\u6700\u591a\u7684\u513f\u7ae5(easy)","text":"<p>2023/9/22</p> <p>00 : 13 : 31</p>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_29","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>money</code> \uff0c\u8868\u793a\u4f60\u603b\u5171\u6709\u7684\u94b1\u6570\uff08\u5355\u4f4d\u4e3a\u7f8e\u5143\uff09\u548c\u53e6\u4e00\u4e2a\u6574\u6570 <code>children</code> \uff0c\u8868\u793a\u4f60\u8981\u5c06\u94b1\u5206\u914d\u7ed9\u591a\u5c11\u4e2a\u513f\u7ae5\u3002</p> <p>\u4f60\u9700\u8981\u6309\u7167\u5982\u4e0b\u89c4\u5219\u5206\u914d\uff1a</p> <ul> <li>\u6240\u6709\u7684\u94b1\u90fd\u5fc5\u987b\u88ab\u5206\u914d\u3002</li> <li>\u6bcf\u4e2a\u513f\u7ae5\u81f3\u5c11\u83b7\u5f97 <code>1</code> \u7f8e\u5143\u3002</li> <li>\u6ca1\u6709\u4eba\u83b7\u5f97 <code>4</code> \u7f8e\u5143\u3002</li> </ul> <p>\u8bf7\u4f60\u6309\u7167\u4e0a\u8ff0\u89c4\u5219\u5206\u914d\u91d1\u94b1\uff0c\u5e76\u8fd4\u56de \u6700\u591a \u6709\u591a\u5c11\u4e2a\u513f\u7ae5\u83b7\u5f97 \u6070\u597d <code>8</code> \u7f8e\u5143\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5206\u914d\u65b9\u6848\uff0c\u8fd4\u56de <code>-1</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1amoney = 20, children = 3\n\u8f93\u51fa\uff1a1\n\u89e3\u91ca\uff1a\n\u6700\u591a\u83b7\u5f97 8 \u7f8e\u5143\u7684\u513f\u7ae5\u6570\u4e3a 1 \u3002\u4e00\u79cd\u5206\u914d\u65b9\u6848\u4e3a\uff1a\n- \u7ed9\u7b2c\u4e00\u4e2a\u513f\u7ae5\u5206\u914d 8 \u7f8e\u5143\u3002\n- \u7ed9\u7b2c\u4e8c\u4e2a\u513f\u7ae5\u5206\u914d 9 \u7f8e\u5143\u3002\n- \u7ed9\u7b2c\u4e09\u4e2a\u513f\u7ae5\u5206\u914d 3 \u7f8e\u5143\u3002\n\u6ca1\u6709\u5206\u914d\u65b9\u6848\u80fd\u8ba9\u83b7\u5f97 8 \u7f8e\u5143\u7684\u513f\u7ae5\u6570\u8d85\u8fc7 1 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1amoney = 16, children = 2\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u6bcf\u4e2a\u513f\u7ae5\u90fd\u53ef\u4ee5\u83b7\u5f97 8 \u7f8e\u5143\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= money &lt;= 200</code></li> <li><code>2 &lt;= children &lt;= 30</code></li> </ul>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_30","title":"\u6211\u7684\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int distMoney(int money, int children) {\n        money -= children;\n        if (money &lt; 0)  return -1;\n        int ans = money / 7;\n        if (ans &gt; children)\n        {\n            return children - 1;\n        }\n        else if (ans == children  &amp;&amp; money % 7 &gt; 0)\n        {\n            ans--;\n        }\n        else if (ans == children - 1 &amp;&amp; money % 7 == 3)\n        {\n            ans--;\n        }\n        return ans;\n\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_31","title":"\u53c2\u8003\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int distMoney(int money, int children) {\n        if (money &lt; children) {\n            return -1;\n        }\n        money -= children;\n        int cnt = min(money / 7, children);\n        money -= cnt * 7;\n        children -= cnt;\n        if ((children == 0 &amp;&amp; money &gt; 0) || (children == 1 &amp;&amp; money == 3)) {\n            cnt--;\n        }\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#_32","title":"\u611f\u60f3","text":"<p>\u8d2a\u5fc3, \u4f46\u662f\u611f\u89c9\u66f4\u50cf\u662f</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/","title":"\u9762\u5411\u671f\u672b\u8003\u8bd5\u7684DB\u590d\u4e60","text":"<p>\u7531\u4e8e\u8bfe\u6539\uff0c\u8be5\u590d\u4e60\u6846\u67b6\u5df2\u7ecf\u8fc7\u65f6\uff0c\u4f46\u5efa\u7acb\u4e4b\u521d\u5e76\u6ca1\u8003\u8651\u8bfe\u6539\u4e4b\u540e\u7684\u60c5\u51b5\uff0c\u6709\u90e8\u5206\u5185\u5bb9\u4e0e\u5927\u6807\u9898\u65e0\u5173\u6216\u8005\u5173\u8054\u8f83\u5c0f\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#problem1-relational-model-and-sql","title":"Problem1: Relational Model and SQL","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_1","title":"\u5173\u7cfb\u4ee3\u6570","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_2","title":"\u96c6\u5408\u8fd0\u7b97\u7b26","text":"<p>\u5e76\u5dee\u4ea4, \u7b1b\u5361\u5c14\u79ef</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_3","title":"\u5173\u7cfb\u8fd0\u7b97\u7b26","text":"<ul> <li>\u9009\u62e9: \\(\\sigma_{\u6761\u4ef6}(\u8868\u540d)\\)</li> <li>\u6295\u5f71: \\(\\Pi_{\u5217\u540d}(\u8868\u540d)\\), \u6295\u5f71\u540e\u8981\u53bb\u9664\u91cd\u590d\u884c</li> <li>\u8fde\u63a5: \u5e38\u7528\u7684\u6709\u81ea\u7136\u8fde\u63a5\\(\\bowtie\\)</li> <li>\u9664: \\(\\div\\) \u7b1b\u5361\u5c14\u79ef\u9006\u8fd0\u7b97</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_4","title":"\u5173\u7cfb\u4ee3\u6570\u89e3\u9898\u65b9\u6cd5","text":"<ul> <li>\u5e38\u7528\u683c\u5f0f \\(\\Pi_{??}(\\sigma_{??}(\u8868\\bowtie\u8868))\\)</li> <li>\u5982\u679c\u9898\u76ee\u4e2d\u63d0\u5230\u4e86\"\u5168\u90e8\"\u7684\u5b57\u773c, \u5219\u8981\u8003\u8651\u662f\u5426\u4e3a\u9664\u8fd0\u7b97 </li> <li>\u5076\u5c14\u53ef\u4ee5\u4f7f\u7528\u5dee\u8fd0\u7b97\u7b80\u5316\u8868\u8fbe\u5f0f</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#sql","title":"SQL\u8bed\u6cd5","text":"<pre><code>create table student(\n    id int,\n    name varchar(10)\n    primary key(id),\n    foreign key(name) references table2(name)\n);\n\nalter table student add score int;\nalter table student add unique(name);\nalter table student drop score;\nalter table student alter column score double;\n\ndrop table student;\n\nselect id\nfrom student\nwhere \ngroup by () having\norder by () asc/desc\n\ninsert into student(id, name)\nvalues(1, 'LiHua');\n\nupdate student set name = \"Tom\" where id = 2;\n\ndelete from student where id = 1;\n\ncreate view \u89c6\u56fe\u540d (\u52171, \u52172)\nas \u5b50\u67e5\u8be2\n\ndrop view \u89c6\u56fe\u540d\n</code></pre>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#problem2-e-r-model","title":"Problem2: E-R Model","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#problem3-relational-formalization","title":"Problem3: Relational Formalization","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#function-dependency","title":"\u51fd\u6570\u4f9d\u8d56(function dependency)","text":"<p>\u5b8c\u5168\u51fd\u6570\u4f9d\u8d56(Full functional dependency): x\u63a8\u51fay\u4e14x\u7684\u5b50\u96c6\u65e0\u6cd5\u63a8\u51fay, \u5219\u79f0y\u5b8c\u5168\u4f9d\u8d56x</p> <p>\u90e8\u5206\u51fd\u6570\u4f9d\u8d56(Partial functional dependency): x\u63a8\u51fay\u4e14x\u7684\u5b50\u96c6\u53ef\u4ee5\u63a8\u51fay, \u5219\u79f0y\u90e8\u5206\u4f9d\u8d56x</p> <p>\u4f20\u9012\u51fd\u6570\u4f9d\u8d56(Pass functional dependency): x-&gt;y-&gt;z, \u5219\u79f0z\u4f20\u9012\u4f9d\u8d56x</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#key","title":"\u7801(key)","text":"<p>\u5019\u9009\u7801(candidate key): \u6700\u5c0f\u7684\u53ef\u4ee5\u63a8\u51fa\u6240\u6709\u5c5e\u6027\u7684\u5c5e\u6027\u7ec4</p> <p>For relation schema R(A, B, C, D, E) with functional dependencies set F={A-&gt;B, BC-&gt;D, C-&gt;A}, Find all candidate keys of R</p> <ul> <li>\u89e3\u9898\u6b65\u9aa4:</li> <li>\u627e\u51fa\u4e00\u5b9a\u5c5e\u4e8e\u5019\u9009\u7801\u7684\u5c5e\u6027C, E(\u672a\u51fa\u73b0\u5728\u53f3\u8fb9), \u53ef\u80fd\u5c5e\u4e8e\u5019\u9009\u7801\u7684\u5c5e\u6027AB(\u4e24\u8fb9\u90fd\u51fa\u73b0), \u4e00\u5b9a\u4e0d\u5c5e\u4e8e\u5019\u9009\u7801\u7684\u5c5e\u6027D(\u53ea\u51fa\u73b0\u5728\u53f3\u8fb9)</li> <li>\u4e00\u4e2a\u4e00\u4e2a\u5c06\u53ef\u80fd\u5c5e\u4e8e\u5019\u9009\u7801\u7684\u5c5e\u6027\u52a0\u5165\u5230\u4e00\u5b9a\u5c5e\u4e8e\u5019\u9009\u7801\u7684\u5c5e\u6027\u7684\u5c5e\u6027\u7ec4\u91cc, \u8fdb\u884c\u95ed\u5305\u8fd0\u7b97, \u770b\u662f\u5426\u53ef\u4ee5\u63a8\u51fa\u5168\u90e8\u5c5e\u6027, CE</li> </ul> <p>\u95ed\u5305\u8fd0\u7b97(Compute the Closure of attribute set)</p> <p>For relation schema R(A, B, C, D, E) with functional dependencies set F = {A-&gt;CD, C-&gt;B, B-&gt;D, B-&gt;E}, Compute the Closure of attribute set {B}</p> <ul> <li>\u89e3\u9898\u6b65\u9aa4:</li> <li>\u4ee4X = {B}</li> <li>X(0) = B</li> <li>X(1) = BDE</li> <li>X(2) = BDE</li> <li>\u7531\u4e8eX(2) = X(1), \u6240\u4ee5{B}\u7684\u95ed\u5305\u662f{B,D,E}</li> </ul> <p>\u8d85\u7801(super key): \u53ef\u4ee5\u63a8\u51fa\u6240\u6709\u5c5e\u6027\u7684\u5c5e\u6027\u7ec4, \u5019\u9009\u7801\u662f\u8d85\u7801\u7684\u5b50\u96c6</p> <p>\u4e3b\u7801(primary key): \u4ece\u5019\u9009\u7801\u4e2d\u6311\u51fa\u4e00\u4e2a\u4f5c\u4e3a\u4e3b\u7801, \u4e3b\u7801\u53ef\u4ee5\u7b80\u79f0\u7801</p> <p>\u4e3b\u5c5e\u6027(primary attribute): \u5305\u542b\u5728\u4efb\u4f55\u4e00\u4e2a\u5019\u9009\u7801\u4e2d\u7684\u5c5e\u6027</p> <p>\u975e\u4e3b\u5c5e\u6027(non-primary attribute): \u4e0d\u5305\u542b\u5728\u4efb\u4f55\u4e00\u4e2a\u5019\u9009\u7801\u4e2d\u7684\u5c5e\u6027</p> <p>\u5916\u7801(foreign key): \u5173\u7cfb\u6a21\u5f0f(schema)R\u4e2d, \u82e5\u6709\u4e00\u4e2a\u5c5e\u6027\u6216\u5c5e\u6027\u7ec4\u4e0d\u662fR\u7684\u7801\u4f46\u662f\u662f\u53e6\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0fS\u7684\u7801, \u5219\u79f0x\u662fR\u7684\u5916\u7801</p> <p>\u5168\u7801(all key): \u6574\u4e2a\u5c5e\u6027\u7ec4\u90fd\u662f\u7801, \u5219\u79f0\u4e3a\u5168\u7801</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#normal-form","title":"\u8303\u5f0f(normal form)","text":"<p>1NF: \u6240\u6709\u5c5e\u6027\u4e0d\u53ef\u5206\u5272</p> <p>2NF: \u6d88\u9664\u90e8\u5206\u51fd\u6570\u4f9d\u8d56, \u5373\u770b\u975e\u4e3b\u5c5e\u6027\u662f\u5426\u53ef\u4ee5\u7531\u5b8c\u6574\u7684\u5019\u9009\u7801\u63a8\u51fa\u800c\u4e0d\u662f\u5019\u9009\u7801\u7684\u5b50\u96c6\u63a8\u51fa</p> <p>3NF: \u6d88\u9664\u975e\u4e3b\u5c5e\u6027\u5bf9\u7801\u7684\u4f20\u9012\u51fd\u6570\u4f9d\u8d56, \u5373\u770b\u975e\u4e3b\u5c5e\u6027\u662f\u5426\u7531\u5019\u9009\u7801\u76f4\u63a5\u63a8\u51fa</p> <p>BCNF: \u6d88\u9664\u4efb\u4f55\u5c5e\u6027\u5bf9\u7801\u7684\u4f20\u9012\u51fd\u6570\u4f9d\u8d56, \u5373\u6bcf\u4e00\u4e2a\u4f9d\u8d56\u5173\u7cfb\u5de6\u4fa7\u90fd\u5fc5\u987b\u5305\u542b\u7801</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#canonical-cover","title":"\u6700\u5c0f\u51fd\u6570\u4f9d\u8d56\u96c6(canonical cover)\u4e0e\u6b63\u5219\u8986\u76d6","text":"<p>\u6c42\u6700\u5c0f\u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u65b9\u6cd5:</p> <ul> <li>\u62c6\u5206\u53f3\u4fa7, \u5982\u5c06A-&gt;BC\u62c6\u4e3aA-&gt;B, A-&gt;C</li> <li>\u53bb\u9664\u81ea\u8eab\u6c42\u95ed\u5305, \u5bf9\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u5173\u7cfb\u7684\u5de6\u4fa7\u6c42\u95ed\u5305, \u5982\u679c\u6c42\u51fa\u6765\u7684\u95ed\u5305\u5305\u62ec\u4e86\u8fd9\u4e2a\u4f9d\u8d56, \u8fd9\u5220\u9664\u8fd9\u4e2a\u4f9d\u8d56</li> <li>\u5de6\u4fa7\u6700\u5c0f\u5316</li> </ul> <p>\u6c42\u6b63\u5219\u8986\u76d6\u5219\u662f\u5728\u6700\u5c0f\u51fd\u6570\u4f9d\u8d56\u7684\u57fa\u7840\u4e0a\u5408\u5e76\u51fd\u6570\u4f9d\u8d56\u5373\u53ef</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#decompose","title":"\u6a21\u5f0f\u5206\u89e3(decompose)","text":"<p>\u6a21\u5f0f\u5206\u89e3\u7684\u51c6\u5219: \u65e0\u635f\u8fde\u63a5, \u4fdd\u6301\u51fd\u6570\u4f9d\u8d56</p> <p>\u65e0\u635f\u8fde\u63a5: \u5206\u89e3\u540e\u518d\u6b21\u81ea\u7136\u8fde\u63a5, \u4e0e\u5206\u89e3\u524d\u76f8\u540c</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_5","title":"\u5224\u65ad\u65e0\u635f\u8fde\u63a5\u7684\u65b9\u6cd5","text":"<ul> <li>\u753b\u8868\u683c\u3002\u5217\u8868\u793a\u6240\u6709\u7684\u5c5e\u6027\uff0c\u6709\u591a\u5c11\u5c5e\u6027\u5c31\u753b\u591a\u5c11\u4e2a\u5c5e\u6027\u5217\u3002\u884c\u8868\u793a\u5206\u89e3\u540e\u7684\u5173\u7cfb\uff0c\u6709\u51e0\u4e2a\u5173\u7cfb\u5c31\u753b\u51e0\u4e2a\u5173\u7cfb\u884c\u3002</li> <li>\u6839\u636e\u6bcf\u4e00\u884c\u5173\u7cfb\u8fdb\u884c\u5224\u65ad\u3002\u627e\u5230\u5173\u7cfb\u4e2d\u7684\u6bcf\u4e2a\u5c5e\u6027\u5bf9\u5e94\u7b2c\u51e0\u5217\uff0c\u5e76\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e0a\u6807\u4e3aa \uff0c\u4e0b\u6807j\u662f\u8868\u683c\u91cc\u7684\u5217\u6570\u3002\u5176\u4f59\u5173\u7cfb\u4e2d\u4e0d\u5b58\u5728\u7684\u5c5e\u6027\u5219\u6807\u4e3ab \uff0cij\u662f\u8868\u683c\u5bf9\u5e94\u7684\u884c\u6570\u548c\u5217\u6570\u3002</li> <li>\u4f9d\u6b21\u5bf9\u51fd\u6570\u4f9d\u8d56\u96c6\u91cc\u7684\u5404\u4e2a\u4f9d\u8d56\u5173\u7cfb\u8fdb\u884c\u8003\u5bdf\u3002\u4f8b\u5982\u6709XY Z\u3002\u5728\u5c5e\u6027\u5217\u4e2d\u627e\u5230X\u548cY\uff0c\u89c2\u5bdfX\u548cY\u7684\u884c\u5217\u4e0a\u662f\u5426\u6709\u76f8\u540c\u7684\u6807\u8bb0\uff08b\u7684\u4e0b\u6807\u8981\u76f8\u540c\uff09\u3002\u82e5\u6709\uff0c\u5219\u67e5\u770b\u5b83\u4eec\u5bf9\u5e94\u5728\u5c5e\u6027\u5217Z\u4e0a\u7684\u5404\u4e2a\u6807\u8bb0\u3002\u5176\u4e2d\u82e5\u6709a \uff0c\u5219\u5c06\u5c5e\u6027\u5217\u4e0a\u7684\u8fd9\u4e9b\u6807\u8bb0\u5168\u90e8\u6539\u4e3aa \u3002\u82e5\u6ca1\u6709a \uff0c\u5219\u627e\u5230i\u503c\u6700\u5c0f\u7684b \uff0c\u5c06\u8fd9\u4e9b\u6807\u8bb0\u5168\u90e8\u6539\u4e3ab \u3002</li> <li>\u53cd\u590d\u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u76f4\u5230\u67d0\u4e00\u884c\u5168\u90e8\u53d8\u4e3aa\u4e3a\u6b62\uff0c\u5219\u8868\u660e\u5177\u6709\u65e0\u635f\u8fde\u63a5\u6027\u3002\u5426\u5219\u4e0d\u5177\u6709\u65e0\u635f\u8fde\u63a5\u6027\u3002</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_6","title":"\u6a21\u5f0f\u5206\u89e3\u7684\u65b9\u6cd5","text":"<p>For relation schema R(A, B, C, D, E) with functional dependencies set F={A-&gt;B, BC-&gt;D, C-&gt;A}, Decompose the relation R into a collection of BCDF relations</p> <ul> <li>\u89e3\u9898\u6b65\u9aa4:</li> <li>\u6c42\u51fa\u6700\u5c0f\u51fd\u6570\u4f9d\u8d56\u96c6,Fmin =  {A-&gt;B, C-&gt;D, C-&gt;A}</li> <li>\u89c2\u5bdfU, \u627e\u51fa\u672a\u5728Fmin\u4e2d\u51fa\u73b0\u7684\u5c5e\u6027, \u5c06\u5176\u5206\u4e3a\u4e00\u4e2a\u96c6\u5408{E}</li> <li>\u89c2\u5bdfFmin, \u82e5\u6709\u591a\u4e2a\u4f9d\u8d56\u5173\u7cfb\u7684\u5de6\u4fa7\u76f8\u540c, \u5219\u5747\u5212\u5206\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u53bb, \u82e5\u6ca1\u6709\u76f8\u540c\u7684, \u5219\u4ec5\u5c06\u8be5\u4f9d\u8d56\u5173\u7cfb\u5212\u5206\u5230\u4e00\u4e2a\u96c6\u5408, {A, B}, {A, C, D}</li> <li>\u6c42\u51faFmin\u7684\u5019\u9009\u7801, \u82e5\u5019\u9009\u7801\u4e2d\u672a\u5728\u4e0a\u8ff0\u5206\u7c7b\u4e2d\u51fa\u73b0, \u5219\u5355\u72ec\u5c06\u5019\u9009\u7801\u5206\u4e3a\u4e00\u7c7b{C, E}</li> <li>\u5219\u53ef\u5c06R\u5206\u4e3a{A, B}, {A, C, D}, {C, E}, {E}</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#problem4-b-tree","title":"Problem4: B+ Tree","text":"<p>\u5927\u6982\u4e86\u89e3\uff0c\u4ee5\u540e\u6709\u7a7a\u518d\u5199</p> <p>\u63d2\u5165\uff1a\u8fbe\u5230degree\u5c31\u5206\u88c2\uff0c\u5de6\u5c0f\u53f3\u5927\u4e8e\u7b49\uff0c\u53f6\u5b50\u7531\u94fe\u8868\u8fde\u63a5\uff0c\u5b58\u5b9e\u9645\u6570\u636e(\u7236\u5b50\u53ef\u91cd\u590d)\uff0c\u4e0a\u9762\u90fd\u662f\u7d22\u5f15(\u7236\u5b50\u4e0d\u91cd\u590d)</p> <p>\u5220\u9664\uff1a\u5de6\u8fb9\u4f18\u5148\u4e0d\u80fd\u5c0f\u4e8e\u8be5degree\u8981\u6c42\u7684\u6700\u5c0f\u6570\u636e\u4e2a\u6570</p> <p>block transfer\uff1aio\uff1bseek\uff1a\u5728\u78c1\u76d8\u4e2d\u5b9a\u4f4d\u5230\u9996\u5730\u5740</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#problem5-query-processing","title":"Problem5: Query Processing","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_7","title":"\u5217\u5f0f\u5b58\u50a8","text":"<ul> <li>\u67e5\uff1a\u78c1\u76d8io\u8282\u7701\u5341\u500d\uff0c\u6570\u636e\u538b\u7f29\u8282\u7701\u5341\u500d=\u767e\u500d\u6548\u7387</li> <li>\u589e\uff1a\u591a\u5217\u65cf\u5b58\u50a8</li> <li>\u5220\uff1a\u5217\u65cf\u6807\u8bb0\u5220\u9664</li> <li>\u6539\uff1a\u5217\u65cf\u6807\u8bb0\u66f4\u65b0</li> </ul> <p>\u7f3a\u70b9\uff1a\u5199\u5165\u6b21\u6570\u591a\uff0c\u589e\u5220\u6539\u6548\u7387\u5b58\u5728\u95ee\u9898</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_8","title":"\u7d22\u5f15","text":"<p>\u7d22\u5f15\uff08index\uff09\u662f\u6570\u636e\u5e93\u4e2d\u7528\u4e8e\u63d0\u9ad8\u6570\u636e\u68c0\u7d22\u6027\u80fd\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u53ef\u4ee5\u52a0\u5feb\u67e5\u8be2\u901f\u5ea6\uff0c\u51cf\u5c11\u6570\u636e\u5e93\u7cfb\u7edf\u9700\u8981\u626b\u63cf\u7684\u6570\u636e\u91cf\u3002</p> <p>\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u4e3b\u8981\u6709\u4e24\u79cd\u7d22\u5f15\u7c7b\u578b\uff1a\u4e3b\u7d22\u5f15\uff08primary index\uff09\u548c\u4e8c\u7ea7\u7d22\u5f15\uff08secondary index\uff09\u3002</p> <p>\u4e3b\u7d22\u5f15\u662f\u57fa\u4e8e\u6570\u636e\u8868\u7684\u4e3b\u952e\u6784\u5efa\u7684\u7d22\u5f15\u3002\u4e3b\u952e\u662f\u7528\u4e8e\u552f\u4e00\u6807\u8bc6\u6bcf\u6761\u8bb0\u5f55\u7684\u5217\u6216\u5217\u7ec4\u5408\u3002\u4e3b\u7d22\u5f15\u5c06\u6570\u636e\u6309\u7167\u4e3b\u952e\u7684\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u63d0\u4f9b\u5feb\u901f\u7684\u6309\u7167\u4e3b\u952e\u67e5\u627e\u8bb0\u5f55\u7684\u80fd\u529b\u3002\u4e3b\u7d22\u5f15\u662f\u6570\u636e\u5e93\u8868\u7684\u5173\u952e\u7d22\u5f15\uff0c\u6bcf\u4e2a\u8868\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u7d22\u5f15\u3002</p> <p>\u800c\u4e8c\u7ea7\u7d22\u5f15\u662f\u57fa\u4e8e\u6570\u636e\u8868\u7684\u975e\u4e3b\u952e\u5217\u6784\u5efa\u7684\u7d22\u5f15\u3002\u5b83\u53ef\u4ee5\u52a0\u901f\u6839\u636e\u975e\u4e3b\u952e\u5217\u8fdb\u884c\u67e5\u8be2\u7684\u64cd\u4f5c\u3002\u4e8c\u7ea7\u7d22\u5f15\u7684\u6784\u5efa\u65b9\u5f0f\u4e0e\u4e3b\u7d22\u5f15\u7c7b\u4f3c\uff0c\u5b83\u4f1a\u6309\u7167\u6307\u5b9a\u7684\u975e\u4e3b\u952e\u5217\u7684\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u7d22\u5f15\u7ed3\u6784\uff0c\u7528\u4e8e\u5feb\u901f\u5b9a\u4f4d\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\u8bb0\u5f55\u3002\u4e00\u4e2a\u8868\u53ef\u4ee5\u6709\u591a\u4e2a\u4e8c\u7ea7\u7d22\u5f15\uff0c\u6bcf\u4e2a\u4e8c\u7ea7\u7d22\u5f15\u90fd\u662f\u72ec\u7acb\u7684\u3002</p> <p>\u4f7f\u7528\u4e8c\u7ea7\u7d22\u5f15\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u67e5\u8be2\u65f6\u51cf\u5c11\u6570\u636e\u7684\u626b\u63cf\u91cf\uff0c\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\u3002\u5f53\u4f7f\u7528\u975e\u4e3b\u952e\u5217\u4f5c\u4e3a\u67e5\u8be2\u6761\u4ef6\u65f6\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u53ef\u4ee5\u5148\u6839\u636e\u4e8c\u7ea7\u7d22\u5f15\u5b9a\u4f4d\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u7136\u540e\u518d\u901a\u8fc7\u4e3b\u7d22\u5f15\u6216\u8005\u5176\u4ed6\u65b9\u5f0f\u83b7\u53d6\u5b8c\u6574\u7684\u6570\u636e\u3002</p> <p>\u7136\u800c\uff0c\u76f8\u6bd4\u4e8e\u4e3b\u7d22\u5f15\uff0c\u4e8c\u7ea7\u7d22\u5f15\u4e5f\u5b58\u5728\u4e00\u4e9b\u9650\u5236\u548c\u6027\u80fd\u65b9\u9762\u7684\u8003\u8651\u3002\u9996\u5148\uff0c\u6784\u5efa\u548c\u7ef4\u62a4\u4e8c\u7ea7\u7d22\u5f15\u9700\u8981\u5360\u7528\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u548c\u8ba1\u7b97\u8d44\u6e90\u3002\u5176\u6b21\uff0c\u5f53\u8fdb\u884c\u63d2\u5165\u3001\u66f4\u65b0\u6216\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u6570\u636e\u5e93\u9700\u8981\u540c\u65f6\u66f4\u65b0\u4e3b\u7d22\u5f15\u548c\u76f8\u5173\u7684\u4e8c\u7ea7\u7d22\u5f15\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u5f00\u9500\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1\u6570\u636e\u5e93\u65f6\uff0c\u9700\u8981\u6743\u8861\u4f7f\u7528\u4e8c\u7ea7\u7d22\u5f15\u7684\u5229\u5f0a\uff0c\u5e76\u6839\u636e\u5b9e\u9645\u9700\u6c42\u8fdb\u884c\u9009\u62e9\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#size","title":"\u6c42size\u7684\u9898","text":"<p>n\u662f\u6570\u91cf\uff0cI\u662flength\u957f\u5ea6\uff0cv\u662fvaries\u4e0d\u540c\u9879\u4e2a\u6570</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#bheight","title":"\u6c42b+\u6811height","text":"<ul> <li>\u627e\u5206\u652f\u56e0\u5b50 BL = (\u5757\u5927\u5c0f - \u6307\u9488\u5927\u5c0f) / (\u952e\u503c\u5927\u5c0f + \u6307\u9488\u5927\u5c0f) + 1</li> <li>\u6811\u9ad8 = log\ud835\udc35\ud835\udc3f(\ud835\udc41 + 1), N\u662f\u8868\u4e2d\u7684\u8bb0\u5f55\u6570</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#problem6-concurrency-control","title":"Problem6: Concurrency Control","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_9","title":"\u4e8b\u52a1","text":"<p>\u4e8b\u52a1\u7684\u56db\u4e2a\u7279\u6027: ACID</p> <ul> <li>A: Atomicity \u539f\u5b50\u6027, \u4e00\u4e2a\u4e8b\u52a1\u8981\u4e48\u5168\u505a\u8981\u4e48\u5168\u4e0d\u505a</li> <li>C: Consistency \u4e00\u81f4\u6027, \u4e8b\u52a1\u6267\u884c\u7684\u7ed3\u679c\u5fc5\u987b\u4e00\u81f4, \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u88ab\u8feb\u4e2d\u65ad, \u5373\u4e8b\u52a1\u4e2d\u7684\u4e00\u4e9b\u64cd\u4f5c\u505a\u4e86, \u5269\u4e0b\u7684\u8fd8\u6ca1\u505a, \u4e14\u505a\u4e86\u7684\u5bf9\u6570\u636e\u5e93\u9020\u6210\u7684\u4fee\u6539, \u5df2\u7ecf\u5b58\u5165\u7269\u7406\u6570\u636e\u5e93\u7684\u8bdd, \u5c31\u4f1a\u9020\u6210\u6570\u636e\u5e93\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001, \u56e0\u6b64\u4e8b\u52a1\u8981\u4e48\u5168\u505a\u8981\u4e48\u5168\u4e0d\u505a, \u4e00\u81f4\u6027\u548c\u539f\u5b50\u6027\u662f\u606f\u606f\u76f8\u5173\u7684</li> <li>I: Isolation \u9694\u79bb\u6027, \u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u80fd\u88ab\u5176\u4ed6\u4e8b\u52a1\u5e72\u6270</li> <li>D: Durability \u6301\u7eed\u6027, \u4e00\u4e2a\u4e8b\u52a1\u4e00\u65e6\u63d0\u4ea4, \u5b83\u5bf9\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6539\u53d8\u5e94\u8be5\u662f\u6c38\u4e45\u6027\u7684</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_10","title":"\u4e8b\u52a1\u8c03\u5ea6\u7684\u51c6\u5219","text":"<ul> <li>\u4e00\u7ec4\u4e8b\u52a1\u7684\u8c03\u5ea6\u5fc5\u987b\u4fdd\u8bc1\uff1a\u5305\u542b\u4e86\u6240\u6709\u4e8b\u52a1\u7684\u64cd\u4f5c\u6307\u4ee4\uff1b\u4e00\u4e2a\u4e8b\u52a1\u5185\u90e8\u7684\u6307\u4ee4\u987a\u5e8f\u5fc5\u987b\u4fdd\u6301\u4e0d\u53d8</li> <li>\u5e76\u884c\u4e8b\u52a1\u8c03\u5ea6\u5fc5\u987b\u4fdd\u8bc1\uff1a\u53ef\u4e32\u6027\u5316\uff0c\u5c06\u6240\u6709\u53ef\u80fd\u7684\u4e32\u884c\u8c03\u5ea6\u7ed3\u679c\u63a8\u6f14\u4e00\u904d\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u5177\u4f53\u7684\u5e76\u884c\u8c03\u5ea6\u518d\u6267\u884c\u4e00\u904d\uff0c\u770b\u662f\u5426\u80fd\u4e0e\u67d0\u4e2a\u4e32\u884c\u8c03\u5ea6\u7684\u7ed3\u679c\u76f8\u540c</li> <li>\u5224\u65ad\u53ef\u4e32\u6027\u5316\u7684\u5145\u5206\u6761\u4ef6: \u51b2\u7a81\u53ef\u4e32\u6027\u5316\uff08\u51b2\u7a81\u53ef\u4e32\u6027\u5316\u4e00\u5b9a\u662f\u53ef\u4e32\u6027\u5316\u8c03\u5ea6\uff0c\u4f46\u53ef\u4e32\u6027\u5316\u8c03\u5ea6\u4e0d\u4e00\u5b9a\u662f\u51b2\u7a81\u53ef\u4e32\u6027\u5316\uff09</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_11","title":"\u5c01\u9501","text":"<p>X\u9501:\u5199\u9501, S\u9501:\u8bfb\u9501</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_12","title":"\u5c01\u9501\u534f\u8bae","text":"<ul> <li> <p>\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u5199\u524d\u52a0\u5199\u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\u5199\u9501\uff1b\u53ef\u9632\u6b62\u4e22\u5931\u4fee\u6539</p> </li> <li> <p>\u4e8c\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u5199\u524d\u52a0\u5199\u9501\uff0c\u8bfb\u524d\u52a0\u8bfb\u9501\uff0c\u8bfb\u5b8c\u91ca\u653e\u8bfb\u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\u5199\u9501\uff1b\u53ef\u9632\u6b62\u4e22\u5931\u4fee\u6539\u548c\u8bfb\u810f\u6570\u636e</p> </li> <li> <p>\u4e09\u7ea7\u5c01\u9501\u534f\u8bae\uff08\u5e38\u7528\uff1a\u652f\u6301\u4e00\u81f4\u6027\u7ef4\u62a4\uff09\uff1a\u5199\u524d\u52a0\u5199\u9501\uff0c\u8bfb\u524d\u52a0\u8bfb\u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\u5404\u9501\uff1b\u53ef\u9632\u6b62\u4e22\u5931\u4fee\u6539\u3001\u8bfb\u810f\u6570\u636e\u548c\u4e0d\u53ef\u91cd\u590d\u8bfb</p> </li> </ul> <p>\u603b\u7ed3: \u90fd\u662f\u5199\u524d\u52a0\u5199\u9501, \u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\u5199\u9501, \u533a\u522b\u5728\u4e8e\u4e00\u7ea7\u65e0\u8bfb\u9501, \u4e8c\u7ea7\u8bfb\u5b8c\u91ca\u653e\u8bfb\u9501, \u4e09\u7ea7\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\u8bfb\u9501</p> <ul> <li>\u4e24\u6bb5\u9501\u534f\u8bae(2PL): \u6240\u6709\u7684\u4e8b\u52a1\u5fc5\u987b\u5206\u4e24\u4e2a\u9636\u6bb5\u5bf9\u6570\u636e\u9879\u52a0\u9501\u548c\u89e3\u9501\u3002 \u5373 \u4e8b\u52a1\u5206\u4e24\u4e2a\u9636\u6bb5 \uff0c\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f \u83b7\u5f97\u5c01\u9501 \u3002 \u4e8b\u52a1\u53ef\u4ee5\u83b7\u5f97\u4efb\u4f55\u6570\u636e\u9879\u4e0a\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u9501\uff0c\u4f46\u662f\u4e0d\u80fd\u91ca\u653e\uff1b\u7b2c\u4e8c\u9636\u6bb5\u662f \u91ca\u653e\u5c01\u9501 \uff0c\u4e8b\u52a1\u53ef\u4ee5\u91ca\u653e\u4efb\u4f55\u6570\u636e\u9879\u4e0a\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u9501\uff0c\u4f46\u4e0d\u80fd\u7533\u8bf7\u3002</li> </ul> <p>\u4e09\u7ea7\u5c01\u9501\u534f\u8bae\u53ef\u4ee5\u4fdd\u8bc1\u5e76\u53d1\u64cd\u4f5c\u7684\u6b63\u786e\u6027\uff0c\u4f46\u7531\u4e8e\u5176\u592a\u8fc7\u4e25\u82db\uff0c\u5bf9\u5e76\u53d1\u5ea6\u6709\u8d1f\u9762\u5f71\u54cd\u3002\u4e09\u7ea7\u5c01\u9501\u534f\u8bae\u5b9e\u9645\u662f\u4e24\u6bb5\u9501\u534f\u8bae\u7684\u7279\u4f8b\uff0c\u662f\u66f4\u4e25\u683c\u7684\u4e24\u6bb5\u9501\u534f\u8bae</p> <p>\u4e8b\u52a1\u9075\u5faa\u4e24\u6bb5\u9501\u534f\u8bae\u662f\u53ef\u4e32\u6027\u5316\u7684\u5145\u5206\u6761\u4ef6\uff0c\u9075\u5faa\u4e24\u6bb5\u9501\u534f\u8bae\u662f\u53ef\u80fd\u53d1\u751f\u6b7b\u9501\u7684</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#2pl","title":"\u8bc1\u660e2PL\u4e0d\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u5fc5\u8981\u6761\u4ef6","text":"<p>\u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u4e8b\u52a1T1\u548cT2\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6570\u636e\u9879A\u548cB\uff1a</p> <p>T1\uff1alock(A)\uff0clock(B)\uff0c\u8bfb\u53d6A\u7684\u503c\uff0c\u8bfb\u53d6B\u7684\u503c\uff0cunlock(B)\uff0cunlock(A) T2\uff1alock(B)\uff0clock(A)\uff0c\u8bfb\u53d6B\u7684\u503c\uff0c\u8bfb\u53d6A\u7684\u503c\uff0cunlock(A)\uff0cunlock(B)</p> <p>\u5047\u8bbe\u5728\u67d0\u4e2a\u5e76\u53d1\u8c03\u5ea6\u4e2d\uff0cT1\u548cT2\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\uff1a</p> <p>T1(lock(A)) T2(lock(B)) T1(lock(B)) T2(lock(A)) T1(\u8bfb\u53d6A\u7684\u503c) T2(\u8bfb\u53d6B\u7684\u503c) T1(\u8bfb\u53d6B\u7684\u503c) T2(\u8bfb\u53d6A\u7684\u503c) T2(unlock(A)) T1(unlock(B)) T2(unlock(B)) T1(unlock(A))</p> <p>\u89c2\u5bdf\u4e0a\u8ff0\u8c03\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230T1\u548cT2\u4e4b\u95f4\u6ca1\u6709\u51b2\u7a81\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4eec\u6309\u7167\u4e0d\u540c\u7684\u987a\u5e8f\u9501\u5b9a\u548c\u89e3\u9501\u6570\u636e\u9879\u3002\u7136\u800c\uff0c\u8be5\u8c03\u5ea6\u7684\u7ed3\u679c\u4e0e\u67d0\u4e2a\u4e32\u884c\u6267\u884c\u7684\u7ed3\u679c\u662f\u4e0d\u7b49\u4ef7\u7684\u3002</p> <p>\u8003\u8651\u4ee5\u4e0b\u4e32\u884c\u6267\u884c\u7684\u987a\u5e8f\uff1a</p> <p>T1(lock(A)) T1(\u8bfb\u53d6A\u7684\u503c) T1(lock(B)) T1(\u8bfb\u53d6B\u7684\u503c) T1(unlock(B)) T1(unlock(A))</p> <p>\u5728\u4e0a\u8ff0\u4e32\u884c\u6267\u884c\u4e2d\uff0cT1\u548cT2\u662f\u6309\u7167\u987a\u5e8f\u6267\u884c\u7684\u3002\u7136\u800c\uff0c\u4e0e\u4e4b\u524d\u7684\u5e76\u53d1\u8c03\u5ea6\u76f8\u6bd4\uff0c\u8bfb\u53d6\u64cd\u4f5c\u7684\u987a\u5e8f\u53d1\u751f\u4e86\u6539\u53d8\u3002\u56e0\u6b64\uff0c2PL\u534f\u8bae\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6240\u6709\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u8c03\u5ea6\u7684\u7ed3\u679c\u90fd\u4e0e\u67d0\u4e2a\u4e32\u884c\u6267\u884c\u7684\u7ed3\u679c\u7b49\u4ef7\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#problem7-aries-recovery-method","title":"Problem7: Aries Recovery Method","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#aries","title":"ARIES","text":"<p>\u5229\u7528\u8bed\u4e49\u7684\u6062\u590d\u548c\u9694\u79bb\u7b97\u6cd5(Algorithm for Recovery and Isolation Exploiting Semantics)\u662f\u4e00\u79cd\u57fa\u4e8eWAL\u7684\u6545\u969c\u6062\u590d\u673a\u5236\u3002</p> <p>WAL(Wrie-Ahead Logging) \u534f\u8bae\u8981\u6c42\u66f4\u65b0\u4efb\u610f Page \u90fd\u8981\u8bb0\u5f55 Log\uff0c\u5e76\u4e14</p> <ul> <li>\u5fc5\u987b\u4fdd\u8bc1\u6240\u6709 Page \u5237\u76d8\u4e4b\u524d\u4e0e\u5b83\u6709\u5173\u7684\u6240\u6709 Log \u5df2\u7ecf\u5237\u76d8\u3002</li> <li>\u5fc5\u987b\u4fdd\u8bc1\u4e8b\u52a1\u63d0\u4ea4\u524d\u8be5\u4e8b\u52a1\u7684\u6240\u6709 Log \u5df2\u7ecf\u5237\u76d8\u3002</li> </ul> <p>ARIES \u7684\u6838\u5fc3\u601d\u60f3\u53ef\u4ee5\u603b\u7ed3\u4e3a 4 \u70b9\uff1a</p> <ul> <li> <p>\u5728\u6570\u636e\u843d\u76d8\u4e4b\u524d\uff0c\u6240\u6709\u5199\u64cd\u4f5c\u90fd\u5fc5\u987b\u8bb0\u5f55\u5728\u65e5\u5fd7\u4e2d\u5e76\u843d\u76d8</p> </li> <li> <p>\u5fc5\u987b\u4f7f\u7528 Steal + No-Force \u7f13\u5b58\u7ba1\u7406\u7b56\u7565</p> </li> </ul> <ul> <li> <p>Steal: \u5141\u8bb8\u5c06\u672a\u63d0\u4ea4\u4e8b\u52a1\u7684\u6539\u52a8\u5237\u76d8\u3002</p> </li> <li> <p>No-Force: \u4e0d\u5fc5\u5728\u4e8b\u52a1\u63d0\u4ea4\u65f6\u628a\u8be5\u4e8b\u52a1\u7684\u6240\u6709\u6539\u52a8\u5237\u76d8\u3002</p> </li> </ul> <p>\u663e\u7136\uff0cWAL \u534f\u8bae\u5b8c\u7f8e\u517c\u5bb9 STEAL/NO-FORCE \u7684\u7b56\u7565\u3002\u6211\u4eec\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u66f4\u65b0\u64cd\u4f5c\u8bb0\u5f55\u4e00\u6761 Redo Log \u7528\u6765\u6307\u793a\u6211\u4eec\u5728 Recovery \u671f\u95f4\u5982\u4f55 Redo \u8fd9\u4e2a\u66f4\u65b0\u64cd\u4f5c\uff1b\u8bb0\u5f55\u4e00\u6761 Undo Log \u7528\u6765\u6307\u793a\u6211\u4eec\u5728\uff08Rumtime \u6216\u8005 Recovery \u671f\u95f4\uff09\u4e8b\u52a1\u56de\u6eda\u7684\u65f6\u5019\u5982\u4f55 Undo \u8fd9\u4e2a\u66f4\u65b0\u64cd\u4f5c\u3002\uff08\u4e00\u822c\u5728 Log \u6570\u636e\u91cf\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e24\u6761 Log \u4f1a\u5408\u5e76\u6210\u4e00\u6761\u3002\uff09</p> <ul> <li>\u5f53 DBMS \u91cd\u542f\u65f6\uff0c\u6309\u7167\u65e5\u5fd7\u8bb0\u5f55\u7684\u5185\u5bb9\u91cd\u505a\u6570\u636e\uff0c\u6062\u590d\u5230\u6545\u969c\u53d1\u751f\u524d\u7684\u72b6\u6001</li> <li>\u5728 undo \u8fc7\u7a0b\u4e2d\u8bb0\u5f55 undo \u64cd\u4f5c\u5230\u65e5\u5fd7\u4e2d\uff0c\u786e\u4fdd\u5728\u6062\u590d\u671f\u95f4\u518d\u6b21\u51fa\u73b0\u6545\u969c\u65f6\u4e0d\u4f1a\u6267\u884c\u591a\u6b21\u76f8\u540c\u7684 undo \u64cd\u4f5c</li> </ul> <p>WAL\u4e2d\u7684\u6bcf\u6761\u65e5\u5fd7\u8bb0\u5f55\u90fd\u9700\u8981\u5305\u542b\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u4e14\u4e00\u822c\u662f\u5355\u8c03\u9012\u589e\u7684log sequence number (LSN)</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#_13","title":"\u516b\u80a1\u89e3\u9898\u6b65\u9aa4\uff1a","text":"<ol> <li>\u627eDPT\uff08diety page table\uff09\u4e2d\u6700\u5c0f\u7684RecLSN\uff08\u8be5page\u6700\u65e9\u88ab\u4fee\u6539\uff0c\u800cpageLSN\u662fpage\u6700\u540e\u4e00\u6b21\u88ab\u4fee\u6539\uff09\u4f5c\u4e3aredo\u7684\u8d77\u59cb\u70b9</li> <li>\u5c06checkpoint\u7684uncommitted txns\u8868\uff08ATT\uff0cActive Transactions Table\uff09\u66f4\u65b0\uff0c\u6700\u65e9\u7684\u4e00\u6761LSN\u4e3aundo\u7684\u7ec8\u70b9</li> <li>\u6c42Analysis\u4e4b\u540e\u7684DPT\uff0c\u53ea\u9700\u8981\u5728checkpoint\u4e4b\u540e\u627e\u6240\u6709\u4fee\u6539\u8bb0\u5f55\u7684log\u800c\u4e0d\u7528\u7ba1\u662f\u5426commit</li> <li>\u6c42Analysis\u4e4b\u540e\u7684undo list\uff0c\u53ea\u9700\u4ece\u5f53\u524dcrash\u7684\u70b9\u8d70\u5230undo end\u627e\u6ca1\u6709commit\u6216\u8005abort\u7684txns\u5373\u53ef</li> <li>\u6c42recovery\u4e4b\u540e\u7684value\uff0c\u53ea\u9700\u8981\u4eceredo\u5f00\u59cb\u5f80\u4e0b\u8d70\uff0c\u53ea\u7528\u7ba1commit\u7684txn\u5373\u53ef</li> <li>\u6c42recovery\u4e4b\u540e\u7684additional log record\u53ea\u9700\u8bb0\u5f55\u662f\u5982\u4f55\u4ece\u5f53\u524dcrash\u70b9\u7684\u503c\u8fc7\u6e21\u5230\u7b2c5\u70b9\u6c42\u51fa\u7684value\uff0c\u518d\u5c06\u8be5\u4e8b\u52a1abort</li> </ol>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/DB/#reference","title":"Reference","text":"<p>\u9009\u62e9\u9898\uff1a</p> <ol> <li>SQL\u8f6c\u5173\u7cfb\u4ee3\u6570\u8868\u8fbe\u5f0f</li> <li>\u7ea7\u8054\u66f4\u65b0\u4e0e\u5220\u9664</li> <li>\u6b63\u5219\u8986\u76d6</li> <li>\u5173\u7cfb\u4ee3\u6570\u8868\u8fbe\u5f0f\u53d8\u5f62</li> <li>B+\u6811\u7d22\u5f15\u67e5\u8be2\u6c42block transfer\u548cseek\u7684\u6b21\u6570</li> <li>\u5217\u5f0f\u5b58\u50a8\u7684\u4f18\u7f3a\u70b9</li> <li>\u5224\u65ad\u5206\u89e3\u662f\u5426\u4fdd\u6301\u51fd\u6570\u4f9d\u8d56</li> <li>\u4e3b\u952e\u7d22\u5f15\u4e0e\u4e8c\u7ea7\u7d22\u5f15</li> <li>\u4f30\u8ba1\u67e5\u8be2\u7684size</li> <li>hash join</li> <li>\u5916\u90e8\u6392\u5e8f</li> </ol> <p>\u5927\u9898\uff1a</p> <ol> <li>\u5199SQL\u8bed\u53e5</li> <li>\u753bER\u56fe</li> <li>\u8bc1\u660e2PL\u4e0d\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u5fc5\u8981\u6761\u4ef6</li> <li>ARIES\u7b97\u6cd5</li> <li> <p>LSM\u6a21\u578b</p> </li> <li> <p>b\u7ad9up\u4e3b\u6ca1\u7761\u9192\u51ac\u7684\u901f\u6210\u8bfe</p> </li> <li> <p>ZJU 18, 19\u7ea7DB\u671f\u672b\u8003\u8bd5\u8bd5\u5377</p> </li> </ol>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/","title":"AVL","text":"<ul> <li>\u662f\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811, \u89e3\u51b3\u4e86\u4e8c\u53c9\u641c\u7d22\u6811\u9000\u5316\u6210\u94fe\u8868\u7684\u95ee\u9898</li> <li>\u5176\u6027\u8d28\u662f, \\(BF(balance factor)=\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\\leq 1\\)</li> <li>\u7528f(d)\u4ee3\u8868\u6df1\u5ea6\u4e3ad\u7684AVL\u6811\u7684\u6700\u5c11\u8282\u70b9\u6570,\u6613\u77e5:<code>f(-1)=0,f(0)=1</code>,\u6709\u9012\u5f52\u516c\u5f0f:\\(f(d) = f(d-1)+f(d-2)+1\\)</li> <li>\u5bf9\u4e8e\u9ad8\u5ea6\u4e3ah(h = d + 1)\u7684AVL\u6811\uff0c\u5176\u8282\u70b9\u6570\u6700\u5c11\u4e3aFibonacci\u6570\u5217\u4e2d\u7b2ch+2\u9879\u51cf1\u3002</li> <li>1, 2, 4, 7, 12, 20...</li> <li> <p>1, 1, 2, 3, 5, 8, 13...</p> </li> <li> <p>\u4e3b\u8981\u7528\u5230\u7684\u64cd\u4f5c\u662f\u65cb\u8f6c</p> </li> <li>\u53c2\u8003\u8d44\u6599:</li> <li> <p>\u4e8c\u53c9\u5e73\u8861\u6811AVL\u5e73\u8861\u8c03\u6574\u6570\u636e\u7ed3\u6784</p> </li> <li> <p>\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff08AVL\u6811\uff09\u4ee3\u7801\u5b9e\u73b0</p> </li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#splay","title":"splay","text":"<ul> <li>\u672c\u8d28\u4e5f\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811</li> <li>\u4e3a\u4e86\u63d0\u9ad8\u641c\u7d22\u6811\u641c\u7d22\u67d0\u4e9b\u9ad8\u9891\u7387\u6761\u76ee\u7684\u6548\u7387, \u4f1a\u5728\u6bcf\u6b21\u67e5\u627e\u4e4b\u540e\u628a\u67e5\u627e\u7684\u5143\u7d20\u653e\u5728\u6839\u90e8</li> <li>\u6309\u7167\u4e00\u822c\u641c\u7d22\u6811\u7684\u89c4\u5219\u63d2\u5165\u5143\u7d20, \u63d2\u5165\u4e4b\u540e\u8fd8\u8981\u6267\u884csplaying\u64cd\u4f5c</li> <li>\u4f18\u52bf\u5728\u4e8e\u4e0d\u9700\u8981\u8bb0\u5f55\u7528\u4e8e\u5e73\u8861\u6811\u7684\u5197\u4f59\u4fe1\u606f</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#_1","title":"\u5747\u644a\u5206\u6790","text":"<ul> <li>\u6709\u52bf\u80fd\u51fd\u6570</li> <li>\u5747\u644a\u6210\u672c = \u5b9e\u9645\u6210\u672c + \u52bf\u80fd\u53d8\u5316</li> </ul> <p>\u8fd9\u4e00\u5757\u6df1\u5165\u4e0b\u53bb\u53ef\u4ee5\u5f88\u96be, \u8fd9\u91cc\u4e0d\u505a\u6df1\u7a76</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#b-b","title":"B\u6811, B+\u6811","text":"<ul> <li>\u533a\u522b\u800c\u5c31\u662fB+\u6811\u7684\u975e\u53f6\u8282\u70b9\u5b58\u653e\u7684\u662f\u7d22\u5f15, key\u90fd\u5728\u53f6\u5b50\u8282\u70b9, \u800cB\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2akey</li> <li>\u6700\u91cd\u8981\u7684\u64cd\u4f5c\u662f\u4e0a\u6ea2, \u5373\u8282\u70b9\u8fbe\u5230\u4e86\u4ed6\u7684\u9636(order)\u540e\u5c06\u8282\u70b9\u62c6\u5206, \u5e76\u4e14\u628a\u4e2d\u95f4\u7684key\u5411\u4e0apop</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#_2","title":"\u7ea2\u9ed1\u6811","text":"<p>\u7ea2\u9ed1\u6811\u548cAVL\u6811\u90fd\u662f\u9ad8\u6548\u7684\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u589e\u5220\u67e5\u6539\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(O(logN)\\)\uff0c\u4f46\u7ea2\u9ed1\u6811\u548cAVL\u6811\u63a7\u5236\u4e8c\u53c9\u6811\u5e73\u8861\u7684\u65b9\u5f0f\u4e0d\u540c\uff1a</p> <ul> <li>AVL\u6811\u662f\u901a\u8fc7\u63a7\u5236\u5de6\u53f3\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc71\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u5e73\u8861\u7684\uff0c\u5b9e\u73b0\u7684\u662f\u4e8c\u53c9\u6811\u7684\u4e25\u683c\u5e73\u8861\u3002</li> <li>\u7ea2\u9ed1\u6811\u662f\u901a\u8fc7\u63a7\u5236\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u4ece\u800c\u4f7f\u5f97\u7ea2\u9ed1\u6811\u5f53\u4e2d\u6700\u957f\u53ef\u80fd\u8def\u5f84\u4e0d\u8d85\u8fc7\u6700\u77ed\u53ef\u80fd\u8def\u5f84\u76842\u500d\uff0c\u5b9e\u73b0\u7684\u662f\u8fd1\u4f3c\u5e73\u8861\u3002</li> </ul> <p>\u76f8\u5bf9\u4e8eAVL\u6811\u6765\u8bf4\uff0c\u7ea2\u9ed1\u6811\u964d\u4f4e\u4e86\u63d2\u5165\u7ed3\u70b9\u65f6\u9700\u8981\u8fdb\u884c\u7684\u65cb\u8f6c\u7684\u6b21\u6570\uff0c\u6240\u4ee5\u5728\u7ecf\u5e38\u8fdb\u884c\u589e\u5220\u7684\u7ed3\u6784\u4e2d\u6027\u80fd\u6bd4AVL\u6811\u66f4\u4f18\uff0c\u5b9e\u9645\u8fd0\u7528\u65f6\u4e5f\u5927\u591a\u7528\u7684\u662f\u7ea2\u9ed1\u6811</p> <p>\u57fa\u672c\u6027\u8d28: \u6839\u8282\u70b9\u5fc5\u987b\u4e3a\u9ed1\u8272, \u7ea2\u8272\u8282\u70b9\u7684\u7236\u548c\u5b50\u5fc5\u987b\u662f\u9ed1\u8272, \u4efb\u4f55\u8282\u70b9\u5230\u5176\u540e\u4ee3\u6240\u6709\u53f6\u7684\u7b80\u5355\u8def\u5f84\u90fd\u5fc5\u987b\u6709\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9</p> <ul> <li>\u6ce8\u610f: \u4ece\u6839\u7ed3\u70b9\u4e00\u76f4\u8d70\u5230\u7a7a\u4f4d\u7f6e\u5c31\u7b97\u4e00\u6761\u8def\u5f84\uff0c\u800c\u4e0d\u662f\u4ece\u6839\u7ed3\u70b9\u8d70\u5230\u5de6\u53f3\u7ed3\u70b9\u5747\u4e3a\u7a7a\u7684\u53f6\u5b50\u7ed3\u70b9\u65f6\u624d\u7b97\u4e00\u6761\u8def\u5f84\u3002</li> </ul> <p>\u53c2\u8003\u8d44\u6599: -  - \u7ea2\u9ed1\u6811\uff08C++\u5b9e\u73b0\uff09 - \u6570\u636e\u7ed3\u6784 - \u5b66\u4e60\u7b14\u8bb0 - \u7ea2\u9ed1\u6811\u524d\u4f20\u2014\u2014234\u6811_234\u6811\u548c\u7ea2\u9ed1\u6811_\u7b11\u867e\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#_3","title":"\u8d6b\u592b\u66fc\u6811\u548c\u8d6b\u592b\u66fc\u7f16\u7801","text":"<p>\u6bcf\u6b21\u53d6\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u70b9\u5408\u5e76\u4e3a\u4e00\u4e2a\u70b9, \u9012\u5f52\u5f97\u5230\u4e00\u4e2a\u8d6b\u592b\u66fc\u6811</p> <p>\u4ece\u8d6b\u592b\u66fc\u6811\u7684root\u5f00\u59cb, \u627e\u5230\u6bcf\u4e00\u4e2a\u5f85\u7f16\u7801\u7684\u70b9</p> <p>\u7f16\u7801\u89c4\u5219\u4e3a:</p> <ul> <li>\u8d70\u5de6\u8def\u4e3a0\u8d70\u53f3\u8def\u4e3a1</li> <li>\u5982: \u4ece\u6839\u8282\u70b9\u5f00\u59cb, \u5148\u8d70\u5de6\u518d\u8d70\u53f3\u518d\u8d70\u53f3, \u7f16\u7801\u4e3a<code>011</code></li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#_4","title":"\u5de6\u5806, \u659c\u5806","text":"<p>npl: null path length, \u5230\u4e0d\u6ee1\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6</p> <p>\u4e3a\u4e86\u89e3\u51b3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5408\u5e76\u64cd\u4f5c\u56f0\u96be\u95ee\u9898, \u6709\u4ee5\u4e0b\u51e0\u70b9\u6027\u8d28: </p> <ul> <li>npl=\u5b50\u8282\u70b9\u6700\u5c0fnpl+1</li> <li>\u5de6npl &gt;= \u53f3npl</li> <li>null\u8282\u70b9\u7684npl\u4e3a-1, \u56e0\u6b64\u53f6\u5b50\u8282\u70b9\u7684npl\u4e3a0</li> </ul> <p>\u5408\u5e76\u89c4\u5219:</p> <ul> <li>\u5927\u8fdb\u5c0f\u53f3, \u662f\u4e00\u4e2a\u9012\u5f52\u8c03\u7528\u7684\u8fc7\u7a0b</li> <li>\u82e5\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u6ee1\u8db3\u6027\u8d282, \u5219\u5de6\u53f3\u4e92\u6362(\u659c\u5806\u5219\u6ca1\u6709npl, \u65e0\u8bba\u5982\u4f55\u90fd\u8981\u4ea4\u6362\u5de6\u53f3\u513f\u5b50)</li> </ul> <p>\u53c2\u8003\u8d44\u6599:</p> <ul> <li>https://blog.csdn.net/changyuanchn/article/details/14647297</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#_5","title":"\u4e8c\u9879\u961f\u5217","text":"<p>\u6709\u70b9\u7c7b\u4f3c\u4e8c\u8fdb\u5236\u6570</p> <p>\u4e00\u822c\u8003\u67e5*DeleteMin\u64cd\u4f5c</p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#_6","title":"\u56de\u6eaf","text":"<ul> <li>\u53ef\u80fd\u4f1a\u8003$\\alpha -\\beta $\u526a\u679d, \u611f\u89c9\u4e0d\u662f\u5f88\u96be, \u4e0d\u7406\u89e3\u53ef\u4ee5\u770b\u770b\u8fd9\u4e2aAlpha-Beta\u526a\u679d\u7b97\u6cd5\uff08\u4eba\u5de5\u667a\u80fd\uff09_\u54d4\u54e9\u54d4\u54e9_bilibili</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#_7","title":"\u5206\u6cbb","text":"<p>\u4e00\u56fe\u4ee5\u853d\u4e4b:</p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/ads/#np","title":"NP\u95ee\u9898","text":"<p>\u6765\u81eabing\u7684\u641c\u7d22\u7ed3\u679c:</p> <p>NP\u95ee\u9898\u662f\u6307\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u5f97\u51fa\u4e00\u4e2a\u6b63\u786e\u89e3\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u65c5\u884c\u5546\u95ee\u9898\uff0c\u54c8\u5bc6\u987f\u56de\u8def\u95ee\u9898\u7b49\u3002NP\u95ee\u9898\u548cP\u95ee\u9898\u7684\u5173\u7cfb\u662f\uff0cP\u95ee\u9898\u662fNP\u95ee\u9898\u7684\u5b50\u96c6\uff0c\u5373\u6240\u6709\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e5f\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u3002\u4f46\u662f\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u7b97\u6cd5\uff0c\u80fd\u591f\u89e3\u51b3\u6240\u6709\u7684NP\u95ee\u9898\uff0c\u8fd9\u662f\u4e00\u4e2a\u672a\u89e3\u51b3\u7684\u5343\u5e74\u96be\u98983\u3002\u4e3a\u4e86\u7814\u7a76\u8fd9\u4e2a\u96be\u9898\uff0c\u79d1\u5b66\u5bb6\u5f15\u5165\u4e86NP\u5b8c\u5168\u95ee\u9898\u548cNP\u96be\u95ee\u9898\u7684\u6982\u5ff5\u3002NP\u5b8c\u5168\u95ee\u9898\u662f\u6307\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\u7684NP\u95ee\u9898\uff1a\u4e00\u662f\u5b83\u672c\u8eab\u662f\u4e00\u4e2aNP\u95ee\u9898\uff1b\u4e8c\u662f\u6240\u6709\u7684NP\u95ee\u9898\u90fd\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7ea6\u5316\u5230\u5b83\u3002\u7ea6\u5316\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u80fd\u7528\u4e00\u4e2a\u95ee\u9898B\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898A\uff0c\u90a3\u4e48\u5c31\u8bf4A\u53ef\u4ee5\u7ea6\u5316\u5230B\u3002\u5982\u679c\u5b58\u5728\u4e00\u4e2aNP\u5b8c\u5168\u95ee\u9898\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u7b97\u6cd5\uff0c\u90a3\u4e48\u5c31\u8bc1\u660e\u4e86P=NP\u3002NP\u96be\u95ee\u9898\u662f\u6307\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u4f46\u4e0d\u4e00\u5b9a\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7684\u95ee\u9898\uff0c\u5373\u6240\u6709\u7684NP\u95ee\u9898\u90fd\u53ef\u4ee5\u7ea6\u5316\u5230\u5b83\uff0c\u4f46\u5b83\u4e0d\u4e00\u5b9a\u662f\u4e00\u4e2aNP\u95ee\u9898\u3002NP\u96be\u95ee\u9898\u6bd4NP\u5b8c\u5168\u95ee\u9898\u66f4\u5e7f\u6cdb\uff0c\u4e5f\u66f4\u96be\u89e3\u51b3\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/","title":"\u8ba1\u7ec4","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#chapter1-computer-abstraction-and-technology","title":"Chapter1: Computer Abstraction and Technology","text":"<ul> <li>\\(KB = 10^3B, KiB = 2^{10}B\\)</li> <li>Response Time / Execution Time \u4ece\u7a0b\u5e8f\u5f00\u59cb\u5230\u7ed3\u675f\u7684\u65f6\u95f4</li> <li>Throughput / Bandwidth(\u5e26\u5bbd) \u5355\u4f4d\u65f6\u95f4\u5185\u5b8c\u6210\u7684\u4efb\u52a1\u6570\u91cf</li> <li> <p>Performance \u53ef\u4ee5\u5b9a\u4e49\u4e3a \\(\\frac{1}{Response\\ Time}\\)</p> </li> <li> <p>Eight Great Ideas</p> </li> <li> <p>Design for Moore\u2019s Law(\u8bbe\u8ba1\u7d27\u8ddf\u6469\u5c14\u5b9a\u5f8b)</p> </li> <li> <p>Use Abstraction to Simplify Design (\u91c7\u7528\u62bd\u8c61\u7b80\u5316\u8bbe\u8ba1)</p> </li> <li> <p>Make the Common Case Fast (\u52a0\u901f\u5927\u6982\u7387\u4e8b\u4ef6)</p> </li> <li> <p>Performance via Parallelism (\u901a\u8fc7\u5e76\u884c\u63d0\u9ad8\u6027\u80fd)</p> </li> <li> <p>Performance via Pipelining (\u901a\u8fc7\u6d41\u6c34\u7ebf\u63d0\u9ad8\u6027\u80fd)</p> </li> <li> <p>Performance via Prediction (\u901a\u8fc7\u9884\u6d4b\u63d0\u9ad8\u6027\u80fd)</p> <ul> <li> <p>\u4f8b\u5982\u5148\u5f53\u4f5c <code>if()</code> \u6761\u4ef6\u6210\u7acb\uff0c\u6267\u884c\u5b8c\u5185\u90e8\u5185\u5bb9\uff0c\u5982\u679c\u540e\u6765\u53d1\u73b0\u786e\u5b9e\u6210\u7acb\uff0c\u90a3\u4e48\u76f4\u63a5 apply\uff0c\u5426\u5219\u5c31\u518d\u91cd\u65b0\u6b63\u5e38\u505a\uff1b</p> </li> <li> <p>\u8fd9\u4e48\u505a\u5c31\u597d\u5728\uff0c\u9884\u6d4b\u6210\u529f\u4e86\u5c31\u52a0\u901f\u4e86\uff0c\u9884\u6d4b\u5931\u8d25\u4e86\u7ea0\u6b63\u7684\u6210\u672c\u4e5f\u4e0d\u9ad8\uff1b</p> </li> </ul> </li> <li> <p>Hierarchy of Memories (\u5b58\u50a8\u5668\u5c42\u6b21)</p> <ul> <li>Disk / Tape -&gt; Main Memory(DRAM) -&gt; L2-Cache(SRAM) -&gt; L1-Cache -&gt; Registers</li> </ul> </li> <li> <p>Dependability via Redundancy (\u901a\u8fc7\u5197\u4f59\u63d0\u9ad8\u53ef\u9760\u6027)</p> </li> <li> <p>CPU time\u7684\u8ba1\u7b97</p> </li> <li> <p>\\(CPU\\ Time = Instruction\\  Count \\times CPI\\times Clock\\ Cycle \\  Time=\\frac{Instruction\\ Count \\times CPI}{Clock\\  Rate}\\)</p> </li> <li>CPI: Cycles per instruction</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#chapter2-instructions-language-of-the-computer","title":"Chapter2: Instructions: Language of the Computer","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#operations-of-the-computer-hardware","title":"Operations of the computer hardware (\u8ba1\u7b97\u673a\u786c\u4ef6\u7684\u64cd\u4f5c)","text":"<ul> <li> <p>\\(add\\ a,\\ b,\\ c\\ :\\ a\\leftarrow b+c\\)</p> </li> <li> <p><code>c   //C code:     f = (g + h) - (i + j);   //RISC-V code      add t0, g, h       add t1, i, j       sub f, t0, t1</code></p> </li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#operands-of-the-computer-hardware","title":"Operands of the computer hardware(\u8ba1\u7b97\u673a\u786c\u4ef6\u7684\u64cd\u4f5c\u6570)","text":"<ul> <li> <p>RISCV\u63d0\u4f9b\u4e8632\u4e2a\u6570\u636e\u5bc4\u5b58\u5668<code>x0</code>~<code>x31</code>, \u4ed6\u4eec\u90fd\u662f64bit</p> </li> <li> <p>\u4e00\u4e2aword\u4e3a32\u4f4d(4\u4e2a\u5b57\u8282), doubleword\u4e3a64\u4f4d(8\u4e2a\u5b57\u8282)</p> </li> <li> <p>RISC-V architecture \u7684\u5730\u5740\u662f 64 \u4f4d\u7684\uff0c\u5730\u5740\u4e3a\u5b57\u8282\u5730\u5740\uff0c\u56e0\u6b64\u603b\u5171\u53ef\u4ee5\u5bfb\u5740 \\(2^{64}\\) \u4e2a\u5b57\u8282\uff0c\u5373 \\(2^{61}\\) \u4e2a dword </p> </li> <li> Name Usage Preserved On call x0 The constant value 0 n.a. x1(ra) Return address(link register) yes x2(sp) Stack pointer yes x3(gp) Global pointer yes x4(tp) Thread(\u7ebf\u7a0b) pointer yes x5-x7 Temporaries no x8(opti) frame pointer yes x8-x9 Saved yes x10-x17 Arguments/results no x18-x27 Saved yes x28-x31 Temporaries no </li> <li> <p><code>c   //C code:     f = (g + h) - (i + j);   //RISC-V code      add t0, g, h       add t1, i, j       sub f, t0, t1   //Compiled RISC-V code       add x5, x20, x21       add x6, x22, x23       sub x19, x5, x6</code></p> </li> <li> <p>Load from memory to registers( ld xxx (from) xxx )</p> </li> </ul> <p>Store from register to memory( sd xxx (to) xxx )</p> <ul> <li>Memory Alignment(\u5185\u5b58\u5bf9\u9f50)</li> </ul> <p></p> <ul> <li> <p><code>c   //C code     A[12] = h + A[8]; //h in x21, base address of A in x22   //Compiled RISC-V code       ld x9, 64(x22)       add x9, x21, x9       sd x9, 96(x22)</code></p> </li> <li> <p>RISC-V \u652f\u6301 PC relative \u5bfb\u5740\u3001\u7acb\u5373\u6570\u5bfb\u5740 ( <code>lui</code> )\u3001\u95f4\u63a5\u5bfb\u5740 ( <code>jalr</code> )\u3001\u57fa\u5740\u5bfb\u5740 ( <code>8(sp)</code> )\uff1a</p> </li> </ul> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#signed-and-unsigned-numbers","title":"Signed and unsigned numbers (\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u6570)","text":"<p>\\(x+ \\overline x=111...111_2=-1\\), \u56e0\u6b64\\(-x=\\overline x+1\\), \u524d\u5bfc 0 \u8868\u793a\u6b63\u6570\uff0c\u524d\u5bfc 1 \u8868\u793a\u8d1f\u6570\u3002</p> <p>\u56e0\u6b64\u5728\u5c06\u4e0d\u8db3 64 \u4f4d\u7684\u6570\u636e\u8f7d\u5165\u5bc4\u5b58\u5668\u65f6\uff0c\u5982\u679c\u6570\u636e\u662f\u65e0\u7b26\u53f7\u6570\uff0c\u53ea\u9700\u8981\u4f7f\u7528 0 \u5c06\u5bc4\u5b58\u5668\u7684\u5176\u4ed6\u90e8\u5206\u586b\u5145 (zero extension)\uff1b\u800c\u5982\u679c\u662f\u7b26\u53f7\u6570\uff0c\u5219\u9700\u8981\u7528\u6700\u9ad8\u4f4d\u5373\u7b26\u53f7\u4f4d\u586b\u5145\u5269\u4f59\u90e8\u5206\uff0c\u79f0\u4e3a\u7b26\u53f7\u6269\u5c55 (sign extension)\u3002</p> <p>\u5373\uff0c\u5728\u6307\u4ee4\u4e2d\u7684 <code>lw</code> , <code>lh</code> , <code>lb</code> \u4f7f\u7528 sign extension\uff0c\u800c <code>lwu</code> , <code>lhu</code> , <code>lbu</code> \u4f7f\u7528 zero extension</p> <p>ld/sd : load doubleword / store doubleword</p> <p>lw/sw : load word / store word</p> <p>lh/sh : load halfword / store halfword</p> <p>lb/sb : load byte / store byte</p> <p>\u540e\u9762\u52a0u(lwu, lhu, lbu\u7b49)\u5373\u6307unsigned</p> <ul> <li>1's Complement\u8868\u793a\u6309\u4f4d\u53d6\u53cd</li> </ul> <p>2's Complement\u8868\u793a\u6309\u4f4d\u53d6\u53cd\u540e\u52a0\u4e00</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#representing-instructions-in-the-computer","title":"Representing instructions in the computer(\u8ba1\u7b97\u673a\u4e2d\u6307\u4ee4\u7684\u8868\u793a)","text":"<p>\u5176\u4e2d <code>I</code> \u578b\u6307\u4ee4\u6709\u4e24\u4e2a\u6761\u76ee\uff1b\u8fd9\u662f\u56e0\u4e3a\u7acb\u5373\u6570\u79fb\u4f4d\u64cd\u4f5c <code>slli</code> , <code>srli</code> , <code>srai</code> \u5e76\u4e0d\u53ef\u80fd\u5bf9\u4e00\u4e2a 64 \u4f4d\u5bc4\u5b58\u5668\u8fdb\u884c\u5927\u4e8e 63 \u4f4d\u7684\u79fb\u4f4d\u64cd\u4f5c\uff0c\u56e0\u6b64 12 \u4f4d imm \u4e2d\u53ea\u6709\u540e 6 \u4f4d\u80fd\u5b9e\u9645\u88ab\u7528\u5230\uff0c\u56e0\u6b64\u524d\u9762 6 \u4f4d\u88ab\u7528\u6765\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u64cd\u4f5c\u7801\u5b57\u6bb5\uff0c\u5982\u4e0a\u56fe\u4e2d\u7b2c\u4e8c\u4e2a <code>I</code> \u6761\u76ee\u90a3\u6837\u3002\u5176\u4ed6 <code>I</code> \u578b\u6307\u4ee4\u9002\u7528\u7b2c\u4e00\u4e2a <code>I</code> \u6761\u76ee\u3002</p> <p>\u53e6\u5916\uff0c\u4e3a\u4ec0\u4e48 <code>SB</code> \u548c <code>UJ</code> \u4e0d\u5b58\u7acb\u5373\u6570\uff08\u4e5f\u5c31\u662f\u504f\u79fb\uff09\u7684\u6700\u4f4e\u4f4d\u5462\uff1f\u56e0\u4e3a\uff0c\u504f\u79fb\u7684\u6700\u540e\u4e00\u4f4d\u4e00\u5b9a\u662f 0\uff0c\u5373\u5730\u5740\u4e00\u5b9a\u662f 2 \u5b57\u8282\u5bf9\u9f50\u7684\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u4fdd\u5b58\u3002</p> <ul> <li>rd: destination register</li> <li>rs: source register</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#r-type","title":"R-type","text":"<ul> <li>Arithmetic</li> </ul> <pre><code>add x9, x20, x21\n//rd = 01001, rs1 = 10100, rx2 = 10101\n</code></pre>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#i-type","title":"I-type","text":"<ul> <li>load &amp; Immediate</li> </ul> <pre><code>ld x9, 64(x22)\n//rd = 9, rs1 = 22, i = 64\naddi x1, x2, 1000\n//rd = 1, rs1 = 2, i = 1000\nsra: shift right arithmetic\nsrli: shift right left immediate\n//\u903b\u8f91\u53f3\u79fb\u5c31\u662f\u4e0d\u8003\u8651\u7b26\u53f7\n</code></pre>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#s-type","title":"S-type","text":"<ul> <li>store</li> </ul> <pre><code>sd x9, 64(x22)\n//rs1 = 22, rs2 = 9, i = 64\n</code></pre>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#sb-type","title":"SB-type","text":"<ul> <li>\u6761\u4ef6\u5206\u652f</li> </ul> <pre><code>C code:\n    if(i == j) goto L1;\n    f = g + h;\nL1: f = f - i;\n\nRISC-V:\n    beq x22, x23, L1\n    add x19, x20, x21\n    sub x19, x19, x22\n(Assume f~j : x19~x23)\n</code></pre> <ul> <li>beq/bne \u7b49\u6216\u4e0d\u7b49 \u8df3\u8f6c</li> <li>slt: set on less than</li> <li>slt x5, x8, x9  #x5 = 1 if x8 &lt; x9</li> <li>blt/bge \u5c0f\u4e8e\u6216\u5927\u4e8e\u7b49\u4e8e, \u8df3\u8f6c</li> <li>\u540e\u9762\u52a0u\u5219\u4e3a\u65e0\u7b26\u53f7\u6bd4\u8f83, \u5982bltu, bgeu</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#uj-type","title":"UJ-type","text":"<ul> <li>jal/jalr : jump and link (register)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#u-type","title":"U-type","text":"<ul> <li>lui : load upper immediate </li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#supporting-procedures-in-computer-hardware","title":"Supporting procedures in computer hardware(\u8ba1\u7b97\u673a\u5bf9\u8fc7\u7a0b\u7684\u652f\u6301)","text":"<pre><code>int fact(int n)\n{\n    if(n &lt; 1)   return 1;\n    else return n * fact(n - 1);\n}\n\nRISC-V:\n\nfact:   addi sp, sp, 16     # adjust stack for 2 items\n        sd ra, 8(sp)        # save the return address\uff1ax1\n        sd a0, 0($sp)       # save the argument n: x10\n        addi t0, a0, -1     # x5 = n - 1\n        bge t0, zero, L1    # if n &gt;= 1, go to L1(else)\n        addi a0, zero, 1    # return 1 if n &lt;1\n        addi sp, sp, 16     # Recover sp (Why not recover x1and x10 ?)\n        jalr zero, 0(ra)    # return to caller\n\nL1:     addi a0, a0, -1     # n &gt;= 1: argument gets ( n - 1 )\n        jal ra, fact        # call fact with ( n - 1)\n        add t1, a0, zero    # move result of fact(n - 1) to x6(t1)\n        ld a0, 0(sp)        # return from jal: restore argument n\n        ld ra, 8(sp)        # restore the return address\n        add sp, sp, 16      # adjust stack pointer to pop 2 items\n        mul a0, a0, t1      # return n*fact ( n - 1 )\n        jalr zero, 0(ra)    # return to the caller\n\n</code></pre>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#chapter3-arithmetic-for-computers","title":"Chapter3: Arithmetic for Computers","text":"<p>\u5185\u5bb9\u6709\u70b9\u591a, \u800c\u4e14\u662f\u6570\u903b\u8bfe\u5b66\u8fc7\u7684\u4e1c\u897f, \u6b64\u5904\u7565\u8fc7</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#_2","title":"\u8ba1\u7ec4\u671f\u4e2d\u590d\u4e60","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#chapter4-the-processordatapath-and-control","title":"Chapter4: The Processor\uff1aDatapath and Control","text":"<p>\u611f\u89c9\u81ea\u5df1\u7406\u89e3\u4e86, \u597d\u50cf\u4e5f\u6ca1\u6709\u5f88\u591a\u9700\u8981\u8bb0\u5fc6\u7684\u4e1c\u897f, \u7406\u89e3\u900f\u5f7b\u4e0b\u9762\u8fd9\u5f20\u56fe\u5c31\u7b97\u5f04\u61c2\u4e86\u5355\u5468\u671fCPU\u4e86</p> <p>\u53c2\u8003\u4e86\u8fd9\u7bc7\u7b14\u8bb0:4 Processor - \u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4 (xuan-insr.github.io)</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%BB%84/#chapter5-large-and-fast-exploiting-memory-hierarchy","title":"Chapter5: Large and Fast: Exploiting Memory Hierarchy","text":"<p>\u200b   </p> <p></p> <p>\u671f\u4e2d\u8003\u8bd5\u7684\u590d\u4e60\u5230\u6b64\u4e3a\u6b62\uff0c\u671f\u672b\u8003\u8bd5\u7684\u590d\u4e60\u4e3b\u8981\u662f\u9762\u5411\u8003\u9898\u7684\u590d\u4e60\uff0c\u624b\u6284\u4e86\u7fa4\u91cc\u7684\u4e00\u4efdA4\u7eb8\u5f53\u505a\u590d\u4e60\u8fc7\u7a0b\uff0c\u6587\u5b57\u7248\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8865\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/","title":"\u666e\u901a\u7269\u7406\u5b662","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#_1","title":"\u8865\u5929\u65f6\u95f4\u7d27\u8feb,\u51ed\u611f\u89c9\u4e0d\u7cfb\u7edf\u5730\u8bb0\u5f55\u4e00\u70b9\u4e1c\u897f","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-15","title":"lecture 15","text":"<ul> <li>\u60e0\u66f4\u65af\u5b9a\u7406:\u6ce2\u4e0a\u7684\u6bcf\u4e00\u70b9\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6ce2\u6e90.\u53ef\u4ee5\u5b9a\u6027\u7684\u89e3\u91ca\u5355\u7f1d\u884d\u5c04</li> <li>\u6298\u5c04:</li> </ul> \\[n_1\\sin {\\theta_1}=n_2\\sin{\\theta_2}\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-16","title":"lecture 16","text":"<ul> <li>\u51f8\u9762\u955c(convex mirror),\u51f9\u9762\u955c(concave mirror)</li> </ul> \\[f=r/2\\] <p>\u5373\u7126\u8ddd\u662f\u539f\u70b9\u66f2\u7387\u534a\u5f84\u7684\u4e00\u534a</p> <ul> <li>\u7269\u5230\u539f\u70b9\u7684\u8ddd\u79bb\\(p\\),\u7126\u8ddd\\(f\\),\u50cf\u5230\u539f\u70b9\u7684\u8ddd\u79bb\\(i\\),\u653e\u5927\u500d\u6570\\(m\\)</li> </ul> \\[\\frac{1}{p}+\\frac{1}{i}=\\frac{1}{f},m=-\\frac{i}{p}\\] <ul> <li>\u5e73\u9762\u955c\\(f=\\infty\\)</li> <li>\u7403\u9762\u955c\\(f=\\frac{r}{2}\\)</li> <li>\u8584\u900f\u955c\\(\\frac{1}{f}=(n-1)(\\frac{1}{r_1}-\\frac{1}{r_2})\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-17","title":"lecture 17","text":"<ul> <li>\u6ce2\u5f3a\u7b49\u4e8e\u632f\u5e45\u7684\u5e73\u65b9</li> <li>\u6ce2\u7684\u53e0\u52a0</li> </ul> \\[E_\u5408^2=E_1^2+E_2^2+2E_1E_2\\cos{(\\alpha_2-\\alpha_1)}\\] <p>\u5176\u4e2d\\(\\alpha_i=kx_i+\\phi_i\\),\u6240\u4ee5\\(\\alpha_2-\\alpha_1\\)\u7b49\u4e8e\u76f8\u4f4d\u5dee\\(\\delta=\\frac{2\\pi}{\\lambda}(x_2-x_1)+(\\phi_2-\\phi_1)\\)</p> <ul> <li>\u6ce2\u52a8\u65b9\u7a0b:</li> </ul> \\[E_m\\cos(\\omega t+\\phi -kx)\\] <ul> <li>\u6ce2\u6570\\(k=\\frac{2\\pi}{\\lambda(\u6ce2\u957f)}\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-18","title":"lecture 18","text":"<ul> <li>\u5355\u7f1d\u884d\u5c04(diffffraction)\u6761\u4ef6:(a\u662f\u7f1d\u5bbd)</li> </ul> \\[\u6697\u7ebf:a\\sin \\theta=m\\lambda\\] \\[\u660e\u7ebf:a\\sin \\theta=(m+\\frac{1}{2})\\lambda\\] \\[\u5149\u5f3a:I=I_0(\\frac{\\sin{\\alpha}}{\\alpha})^2\\] <p>\u5176\u4e2d\\(\\alpha = \\pi a\\frac{\\sin \\theta}{\\lambda},I_0=(Ca)^2,C\u662f\u5e38\u6570\\)</p> <ul> <li>\u5706\u5b54\u884d\u5c04\u7684\u7b2c\u4e00\u4e2a\u6697\u7ebf:\\(a\\sin{\\theta}=1.22\\lambda\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-19","title":"lecture 19","text":"<ul> <li>\u53cc\u7f1d\u5e72\u6d89(interference)\u7684\u5f3a\u5ea6:</li> </ul> \\[I=I_0(\\frac{\\sin{\\alpha}}{\\alpha})^2 \\cos ^2{\\beta}\\] <p>\u5176\u4e2d\\(\\beta=\\frac{\\delta_2}{2}=\\frac{\\pi}{\\lambda}d\\sin \\theta,\\alpha =\\frac{\\pi}{\\lambda}a\\sin \\theta\\)</p> <ul> <li>\u591a\u7f1d\u884d\u5c04\u5f3a\u5ea6:</li> </ul> \\[I=\\frac{1}{N^2}I_0(\\frac{\\sin{\\alpha}}{\\alpha})^2 (\\frac{\\sin{(N\\beta)}}{\\sin \\beta})^2\\] <ul> <li>\u5e03\u62c9\u683c\u5b9a\u5f8b\u8868\u660e\uff0cx\u5c04\u7ebf\u884d\u5c04\u7684\u5f3a\u5ea6\u6700\u5927\u503c\u4e3a\\(2d\\sin \\theta=m\\lambda\\)</li> <li>\u5149\u6805\u884d\u5c04\u4e2d\uff0c\u968f\u7740\u72ed\u7f1d\u6570\u76ee\u7684\u589e\u591a\uff0c\u660e\u7eb9\u4eae\u5ea6\u589e\u52a0\u800c\u6761\u7eb9\u53d8\u7ec6</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-20","title":"lecture 20","text":"<ul> <li>Brewster Angle \\(\\theta _B\\): \u53cd\u5c04\u5149\u5b8c\u5168\u504f\u632f\u9700\u8981\u6ee1\u8db3:\u53cd\u5c04\u89d2\\(\\theta_B\\)+\u6298\u5c04\u89d2\\(\\theta_r\\)=90\u00b0</li> <li>\u504f\u632f\u5149\u7684\u5f3a\u5ea6:\\(I=I_0\\cos^2{\\beta}\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-21","title":"lecture 21","text":"<ul> <li>\u5149\u5b50\u80fd\u91cf:\\(E=hf\\),\u5176\u4e2dh\u662f\u666e\u6717\u514b\u5e38\u6570,\\(h=6.63\\times 10^{-34}\\ J\\cdot s\\)</li> <li>\u6700\u5927\u521d\u52a8\u80fd:\\(E_k=hf-W=eU\\),\u5176\u4e2dW\u662f\u9038\u51fa\u529f,e\u662f\u5143\u7535\u8377\\(1.6\\times 10^{-19}\\),U\u662f\u904f\u5236\u7535\u538b</li> <li>\u5149\u5b50\u52a8\u91cf:\\(p=\\frac{hf}{c}=\\frac{h}{\\lambda}\\)</li> <li>\u5eb7\u666e\u987f\u6563\u5c04(compton scatter):\u7535\u78c1\u6ce2\u88ab\u5e26\u7535\u7c92\u5b50\u6563\u5c04\u65f6\uff0c\u6ce2\u957f\u589e\u52a0.\\(\\Delta \\lambda=\\frac{h}{mc}(1-cos\\phi)\\)</li> <li> <p>\u5149\u5b50\u6709\u81ea\u65cb\u89d2\u52a8\u91cf,\u5f53\u4e00\u4e2a\u5e26\u7535\u7c92\u5b50\u53d1\u5c04\u6216\u5438\u6536\u7535\u78c1\u8f90\u5c04\u65f6\uff0c\u968f\u7740\u5176\u80fd\u91cf\u548c\u7ebf\u6027\u52a8\u91cf\u7684\u53d8\u5316\uff0c\u5b83\u7684\u89d2\u52a8\u91cf\u5c06\u53d1\u751f\u7684\u53d8\u5316</p> </li> <li> <p>\u6b27\u62c9\u516c\u5f0f:</p> </li> </ul> \\[e^{i\\alpha}=\\cos{\\alpha}+i\\sin {\\alpha}\\] <p>\\(E=E_m\\cos{(\\omega t+kx)}=E_me^{i(kx+\\omega t)}\\)</p> <ul> <li>\\(\\ket0 =[1\\ 0]^T,\\ket1=[0 \\ 1]^T\\)</li> <li>\\(\\ket+ = \\frac{1}{\\sqrt{2}}(\\ket0+\\ket1), \\ket- = \\frac{1}{\\sqrt{2}}(\\ket0-\\ket1)\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-22","title":"lecture 22","text":"<ul> <li>\u8fd0\u52a8\u7c92\u5b50\u7684\u5fb7\u5e03\u7f57\u610f\u6ce2\u957f:\\(\\lambda=h/p\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-23","title":"lecture 23","text":"<ul> <li> <p>\u7ea6\u5316\u666e\u6717\u514b\u5e38\u6570\\(\\hbar=\\frac{h}{2\\pi}\\)</p> </li> <li> <p>\u859b\u5b9a\u8c14\u65b9\u7a0b</p> </li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-24","title":"lecture 24","text":"\\[\\Psi ''(x)+B^2\\Psi(x)=0 \\ \\Rightarrow \\Psi(x)=Ae^{ikx}+Be^{-ikx}\\] \\[\\Psi ''(x)-B^2\\Psi(x)=0 \\ \\Rightarrow \\Psi(x)=Ce^{\\beta x}+De^{-\\beta x}\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A62/%E6%99%AE%E7%89%A92/#lecture-25","title":"lecture 25","text":"<ul> <li>\u73bb\u5c14\u534a\u5f84\\(a_B\\)\u662f\u6700\u5c0f\u7684\u8f68\u9053\u534a\u5f84</li> </ul> \\[a_B=\\frac{4\\pi \\epsilon_0 \\hbar ^2}{me^2}\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/","title":"\u7b2c\u4e00\u7ae0 \u6982\u7387\u8bba\u7684\u57fa\u672c\u6982\u5ff5","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#1","title":"1. \u6837\u672c\u7a7a\u95f4\uff0c\u968f\u673a\u4e8b\u4ef6","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#11","title":"1.1. \u968f\u673a\u8bd5\u9a8c","text":"<ul> <li> <p>\u53ef\u4ee5\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u91cd\u590d\u8fdb\u884c\uff1b  </p> </li> <li> <p>\u4e8b\u5148\u77e5\u9053\u53ef\u80fd\u51fa\u73b0\u7684\u7ed3\u679c\uff1b  </p> </li> <li> <p>\u8fdb\u884c\u8bd5\u9a8c\u524d\u5e76\u4e0d\u77e5\u9053\u54ea\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u4f1a\u53d1\u751f\u3002</p> </li> </ul> <p>e.g \uff1a\u629b\u786c\u5e01 </p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#12","title":"1.2. \u6837\u672c\u7a7a\u95f4","text":"<p>\u5b9a\u4e49\uff1a\u968f\u673a\u8bd5\u9a8cE\u7684\u6240\u6709\u7ed3\u679c\u6784\u6210\u7684\u96c6\u5408\u79f0\u4e3aE\u7684\u6837\u672c\u7a7a\u95f4\uff0c\u8bb0\u4e3aS={e},\u79f0S\u4e2d\u7684\u5143\u7d20e\u4e3a\u6837\u672c\u70b9\uff0c\u4e00\u4e2a\u5143\u7d20\u7684\u5355\u70b9\u96c6\u79f0\u4e3a\u57fa\u672c\u4e8b\u4ef6\u3002</p> <p>e.g\uff1a\"\u4e00\u679a\u786c\u5e01\u629b\u4e00\u6b21\"\u7684\u6837\u672c\u7a7a\u95f4\u662f \\(S = \\{\u6b63\u9762H,\u53cd\u9762T\\};\\)</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#13","title":"1.3. \u968f\u673a\u4e8b\u4ef6","text":"<p>\u5b9a\u4e49\uff1a\u4e00\u822c\u6211\u4eec\u79f0S\u7684\u5b50\u96c6A\u4e3aE\u7684\u968f\u673a\u4e8b\u4ef6A\uff0c\u7b80\u79f0\u4e8b\u4ef6A\u3002\u5f53\u4e14\u4ec5\u5f53A\u6240\u5305\u542b\u7684\u4e00\u4e2a\u6837\u672c\u70b9\u53d1\u751f\u79f0\u4e8b\u4ef6A\u53d1\u751f\u3002</p> <ul> <li>\u7531\u4e00\u4e2a\u6837\u672c\u70b9\u7ec4\u6210\u7684\u5355\u70b9\u96c6\uff0c\u79f0\u4e3a\u57fa\u672c\u4e8b\u4ef6\u3002</li> <li>\u5982\u679c\u5c06S\u4ea6\u89c6\u4f5c\u4e8b\u4ef6\uff0c\u5219\u6bcf\u6b21\u8bd5\u9a8cS\u603b\u662f\u53d1\u751f\uff0c\u6545\u53c8\u79f0S\u4e3a\u5fc5\u7136\u4e8b\u4ef6\u3002</li> <li>\u8bb0\u03d5 \u4e3a\u7a7a\u96c6\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u6837\u672c\u70b9, \u5219\u6bcf\u6b21\u8bd5\u9a8c\u03d5 \u90fd\u4e0d\u53d1\u751f, \u79f0\u03d5 \u4e3a\u4e0d\u53ef\u80fd\u4e8b\u4ef6\u3002</li> </ul> <p></p> <ul> <li>\u6982\u7387\u4e2d\u5e38\u6709\u4ee5\u4e0b\u5b9a\u4e49\uff1a\u7531n\u4e2a\u5143\u4ef6\u7ec4\u6210\u7684\u7cfb\u7edf\uff0c\u5176\u4e2d\u4e00\u4e2a\u635f\u574f\uff0c\u5219\u7cfb\u7edf\u5c31\u635f\u574f\uff0c\u6b64\u65f6\u8fd9\u4e00\u7cfb\u7edf\u79f0\u4e3a\u201c\u4e32\u8054\u7cfb\u7edf\u201d\uff1b\u82e5\u6709\u4e00\u4e2a\u4e0d\u635f\u574f\uff0c\u5219\u7cfb\u7edf\u4e0d\u635f\u574f\uff0c\u6b64\u65f6\u8fd9\u4e00\u7cfb\u7edf\u79f0\u4e3a\u201c\u5e76\u8054\u7cfb\u7edf\u201d\u3002 </li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#2","title":"2. \u9891\u7387\u4e0e\u6982\u7387","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#21","title":"2.1. \u9891\u7387","text":"<p>\u5b9a\u4e49\uff1a\u8bb0\\(f_n\\)\u4e3aA\u5728\u8fd9n\u6b21\u8bd5\u9a8c\u4e2d\u53d1\u751f\u7684\u9891\u7387\\(f_n(A)=\\frac{n_A}{n};\\)</p> <p>\u662fA\u53d1\u751f\u7684\u6b21\u6570(\u9891\u6570)</p> <p>n\u662f\u603b\u8bd5\u9a8c\u6b21\u6570</p> <p>\u9891\u7387 \\(f_n(A)\\) \u53cd\u6620\u4e86\u4e8b\u4ef6A\u53d1\u751f\u7684\u9891\u7e41\u7a0b\u5ea6</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#22","title":"2.2. \u6982\u7387","text":"<p>\u5b9a\u4e49\uff1a\u5bf9\u6837\u672c\u7a7a\u95f4S\u4e2d\u4efb\u4e00\u4e8b\u4ef6A\uff0c\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u6570P(A)\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u6761\u516c\u7406\uff1a</p> <ol> <li>\u975e\u8d1f\u6027\uff1a\\(P(A) \\geq 0;\\)</li> <li>\u89c4\u8303\u6027\uff1a\\(P(S) = 1;\\)</li> <li> <p>\u53ef\u5217\u53ef\u52a0\u6027\uff1a\u82e5\\(A_1,A_2,\\cdots,\\)\u4e24\u4e24\u4e0d\u76f8\u5bb9,\u5219\\(P(\\bigcup_{i=1}^{\\infty}A_i)=\\sum_{i=1}^{\\infty}P(A_i)\\).\u79f0\\(P(A)\\)\u4e3a\u4e8b\u4ef6A\u7684\u6982\u7387</p> </li> <li> <p>\u6982\u7387\u7684\u52a0\u6cd5\u516c\u5f0f:\\(P(A\\cup B) = P(A)+P(B);\\)</p> </li> <li>\u63a8\u8bba:\\(P(A\\cup B) \\leq P(A)+P(B);\\)</li> </ol>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#3","title":"3. \u7b49\u53ef\u80fd\u6982\u578b","text":"<p>\u7b49\u53ef\u80fd\u6982\u578b\u53c8\u79f0\u53e4\u5178\u6982\u578b</p> <p>\u5b9a\u4e49:\u5982\u679c\u968f\u673a\u4e8b\u4ef6\u6ee1\u8db3:</p> <ol> <li>\\(S\\)\u4e2d\u6837\u672c\u70b9\u6570\u6709\u9650;</li> <li>\\(\\forall i,j \\in \\{1,2,\\cdots,n\\},P(e_i)=P(e_j)\\), \u5373\u7b49\u53ef\u80fd;</li> </ol> <p>\u5219\u8be5\u8bd5\u9a8c\u95ee\u9898\u4e3a\u7b49\u53ef\u80fd\u6982\u578b</p> <p>\u6709\u5982\u4e0b\u6027\u8d28:\u82e5\u603b\u4e8b\u4ef6\u4e2a\u6570\u4e3a\\(N,A\\)\u4e3a\\(n\\)\u4e2a\u57fa\u672c\u4e8b\u4ef6\u7684\u548c\u4e8b\u4ef6\u5219\\(P(A)=\\frac{n}{N}\\).</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#4","title":"4. \u6761\u4ef6\u6982\u7387","text":"<p>\u5b9a\u4e49:\\(P(B|A) = \\frac{P(AB)}{P(A)}\\ \\ \\ \\ P(A) \\neq 0\\)</p> <ul> <li> <p>\u4e58\u6cd5\u516c\u5f0f: \\(P(AB)=P(A)\\bullet P(B|A)=P(B)\\bullet P(A|B)\\)</p> </li> <li> <p>\u5168\u6982\u7387\u516c\u5f0f:\\(P(A) = \\sum_{j=1}^{n}P(B_j)P(A|B_j)\\)</p> </li> <li> <p>\u8d1d\u53f6\u65af\u516c\u5f0f:\\(P(B_k|A)=\\frac{P(B_kA)}{P(A)}=\\frac{P(B_k)P(A|B_k)}{\\sum_{j=1}^{n}P(B_j)P(A|B_j)};\\)</p> </li> <li>\u5176\u4e2d,\u6211\u4eec\u79f0\\(P(B_j)\\)\u8fd9\u79cd\u4e8b\u5148\u77e5\u9053\u7684\u6982\u7387\u4e3a\u5148\u9a8c\u6982\u7387;\u800c\\(P(B_j|A)\\)\u8fd9\u79cd,\u5f53\u4e8b\u4ef6A\u53d1\u751f\u540e\u9700\u8981\u4fee\u6b63\\(B_j\\)\u7684\u6982\u7387\u4e3a\u540e\u9a8c\u6982\u7387.</li> </ul> <p>e.g:\u6709\u4e8c\u4e2a\u7bb1\u5b50\uff0c\u7b2c1\u7bb1\u88c5\u67095\u4ef6\u6b63\u54c12\u4ef6\u6b21\u54c1\uff0c\u7b2c2\u7bb1\u88c5\u67093\u4ef6\u6b63\u54c12\u4ef6\u6b21\u54c1\u3002\u73b0\u4ece\u7b2c\u4e00\u7bb1\u4e2d\u968f\u673a\u53d61\u4ef6\u653e\u5230\u7b2c2\u7bb1\uff0c\u7136\u540e\u4ece\u7b2c2\u7bb1\u4e2d\u968f\u673a\u53d6\u51fa1\u4ef6\u3002(1) \u6c42\u7b2c\u4e8c\u6b21\u53d6\u5230\u7684\u662f\u6b21\u54c1\u7684\u6982\u7387; (2) \u82e5\u5df2\u77e5\u7b2c\u4e8c\u6b21\u53d6\u5230\u7684\u662f\u6b21\u54c1\uff0c\u6c42\u7b2c\u4e00\u6b21\u53d6\u5230\u7684\u4e5f\u662f\u6b21\u54c1\u7684\u6982\u7387\u3002</p> <p>\u89e3:\u8bbeA,B\u5206\u522b\u8868\u793a\u4ece\u7b2c1\uff0c2\u7bb1\u53d6\u5230\u6b21\u54c1</p> <p>(1)\u7531\u5168\u6982\u7387\u516c\u5f0f.</p> <p>(2)\u7531Bayes\u516c\u5f0f,</p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#5","title":"5. \u4e8b\u4ef6\u7684\u72ec\u7acb\u6027\u4e0e\u72ec\u7acb\u8bd5\u9a8c","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#51","title":"5.1. \u72ec\u7acb","text":"<p>\u5b9a\u4e49:\u8bbe\\(A,B\\)\u4e3a\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6,\u82e5\u6709\\(P(AB)=P(A)P(B)\\),\u5219\\(A,B\\)\u76f8\u4e92\u72ec\u7acb,\u5176\u5b9e\u9645\u610f\u4e49\u662f,\u4e8b\u4ef6\\(A\\)\u7684\u53d1\u751f\u4e0e\u4e8b\u4ef6\\(B\\)\u7684\u53d1\u751f\u4e92\u4e0d\u5f71\u54cd.</p> <p>\u63a8\u8bba:</p> <ul> <li> <p>\\(while P(AB)=P(A)P(B),\\ \\ P(A|B)=P(A);\\)</p> </li> <li> <p>\u5f53\u51fa\u73b0\u4e24\u4e2a\u4ee5\u4e0a\u7684\u968f\u673a\u4e8b\u4ef6\u65f6\uff0c\u5982\u4e09\u4e2a\u968f\u673a\u4e8b\u4ef6\\(A,B,C\\)\uff0c\u5f53\uff1a   $$   P(AB)=P(A)P(B),P(AC)=P(A)P(C),P(BC)=P(B)(C)   $$</p> </li> </ul> <p>\u90fd\u6210\u7acb\uff0c\u5219\u79f0\u4e8b\u4ef6\\(A,B,C\\)\u4e24\u4e24\u72ec\u7acb\uff1b</p> <ul> <li>\u5982\u679c\u540c\u65f6\u8fd8\u6ee1\u8db3:\\(P(ABC)=P(A)P(B)P(C)\\)\u5219\u79f0\u4e8b\u4ef6\\(A,B,C\\)\u76f8\u4e92\u72ec\u7acb</li> <li>\u76f8\u4e92\u72ec\u7acb$ \\Rightarrow $\u4e24\u4e24\u72ec\u7acb</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230202/#52","title":"5.2. \u72ec\u7acb\u8bd5\u9a8c","text":"<p>\u5b9a\u4e49:\\(\\{A_i\\}\\)\u76f8\u4e92\u72ec\u7acb\u5f53\u4e14\u4ec5\u5f53\\(\\forall i_j,P(\\prod_{j=1}^{k}A_{i_k})=\\prod^{k}_{j=1}P(A_{i_j})\\)</p> <p>\u8bbe\u4e00\u4e2a\u8bd5\u9a8c\u662f\u7531\u4e00\u7cfb\u5217\u5b50\u8bd5\u9a8c\u7ec4\u6210\uff0c</p> <p>\u72ec\u7acb\u8bd5\u9a8c\uff1a\u6307\u4efb\u4e00\u6b21\u5b50\u8bd5\u9a8c\u51fa\u73b0\u7684\u7ed3\u679c\u90fd\u4e0d\u5f71\u54cd\u5176\u4ed6\u5404\u5b50\u8bd5\u9a8c\u51fa\u73b0\u7684\u7ed3\u679c\uff1b\u4f8b\u5982\u89c2\u5bdf\u5341\u671f\u5f69\u7968\u7684\u5f00\u5956\u7ed3\u679c\uff0c\u662f\u72ec\u7acb\u8bd5\u9a8c.</p> <p>\u91cd\u590d\u8bd5\u9a8c\uff1a\u5982\u679c\u5404\u5b50\u8bd5\u9a8c\u662f\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u8fdb\u884c\u7684\u3002 </p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/","title":"\u7b2c\u4e8c\u7ae0 \u968f\u673a\u53d8\u91cf\u53ca\u5176\u5206\u5e03","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#1","title":"1. \u968f\u673a\u53d8\u91cf","text":"<p>\u5b9a\u4e49:\u8bbe\u968f\u673a\u8bd5\u9a8c\u7684\u6837\u672c\u7a7a\u95f4\u4e3a\\(S=\\{e\\}\\),\u82e5\\(X=X(e)\\)\u4e3a\u5b9a\u4e49\u5728\u6837\u672c\u7a7a\u95f4S\u4e0a\u7684\u5b9e\u503c\u5355\u503c\u51fd\u6570,\u5219\u79f0\\(X=X(e)\\)\u4e3a\u968f\u673a\u53d8\u91cf.</p> <ul> <li>\u4e00\u822c\u91c7\u7528\u5927\u5199\u82f1\u6587\u5b57\u6bcd\\(X,Y,Z\\)\u6765\u8868\u793a\u968f\u673a\u53d8\u91cf</li> <li>\u5f15\u5165\u968f\u673a\u53d8\u91cf\u7684\u76ee\u7684\u662f\u7528\u6765\u63cf\u8ff0\u968f\u673a\u73b0\u8c61</li> </ul> <p>\u968f\u673a\u53d8\u91cf\u5206\u4e3a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u548c\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#2","title":"2. \u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf","text":"<p>\u5b9a\u4e49\uff1a\u53d6\u503c\u81f3\u591a\u53ef\u6570\u7684\u968f\u673a\u53d8\u91cf\u4e3a\u79bb\u6563\u578b\u7684\u968f\u673a\u53d8\u91cf\u3002</p> <p>\u6982\u7387\u5206\u5e03\u5f8b\u4e3a</p> \\(X\\) \\(x_1\\) \\(x_2\\) \\(\\cdots\\) \\(x_i\\) \\(\\cdots\\) \\(P\\) \\(p_1\\) \\(p_2\\) \\(\\cdots\\) \\(p_i\\) \\(\\cdots\\) <ul> <li>\u6982\u7387\u5206\u5e03\u5f8b\u6027\u8d28:\\(p_i\\geq 0,\\sum_{i=1}^{\\infty}p_i=1\\)</li> </ul> <p>\u51e0\u4e2a\u91cd\u8981\u7684\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u5206\u5e03:</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#21","title":"2.1. \u4e24\u70b9\u5206\u5e03","text":"<p>\u82e5\\(X\\)\u7684\u5206\u5e03\u5f8b\u4e3a:</p> \\(X\\) \\(0\\) \\(1\\) \\(P\\) \\(q\\) \\(p\\) <p>\\((p+q=1,p&gt;0,q&gt;0)\\)</p> <p>\u5219\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\u4e3a\\(p\\)\u76840-1\u5206\u5e03,\u6216\u4e24\u70b9\u5206\u5e03,\u8bb0\u4e3a\\(X\\)~0-1\\((p)\\)\u6216\\(B(1,p)\\)</p> <ul> <li>\u4f2f\u52aa\u5229\u5b9e\u9a8c:\u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7ed3\u679c\u7684\u8bd5\u9a8c\uff0c\u79f0\u4e3a\u4f2f\u52aa\u5229\u8bd5\u9a8c\u3002 </li> <li>e.g:\u629b1\u6b21\u786c\u5e01,\u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#22","title":"2.2. \u4e8c\u9879\u5206\u5e03","text":"<ul> <li>n\u91cd\u4f2f\u52aa\u5229\u5b9e\u9a8c:\u5728\\(n\\)\u6b21\u72ec\u7acb\u91cd\u590d\u8bd5\u9a8c\u4e2d,\u6bcf\u6b21\u53ea\u6709\\(A\\)\u548c\\(\\overline A\\)\u4e24\u79cd\u7ed3\u679c\uff0c\u4e14\u6982\u7387\u4e0d\u53d8\uff0c\u5219\u8fd9\u4e00\u7cfb\u5217\u8bd5\u9a8c\u4e3a\\(n\\)\u91cd\u4f2f\u52aa\u5229\u8bd5\u9a8c.</li> <li>e.g:\u72ec\u7acb\u91cd\u590d\u5730\u629bn\u6b21\u786c\u5e01,\u6bcf\u6b21\u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c</li> </ul> <p>\u5b9a\u4e49:\u8bbe\\(A\\)\u5728\\(n\\)\u91cd\u8d1d\u52aa\u5229\u8bd5\u9a8c\u4e2d\u53d1\u751f\\(X\\)\u6b21\uff0c\u5219\\(P(X=k)=C_n^kp^k(1-p)^{n-k},k=0,1,\\cdots,n\\)\u5e76\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\u4e3a\\(n,p\\)\u7684\u4e8c\u9879\u5206\u5e03,</p> <p>\u8bb0\\(X\\sim B(n,p)\\)</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#23","title":"2.3. \u6cca\u677e\u5206\u5e03","text":"<p>\u82e5\u968f\u673a\u53d8\u91cf\\(X\\)\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\\(P(X=k)=\\frac{\\lambda^{k}e^{-\\lambda}}{k!},k=0,1,2,\\cdots ,\\lambda&gt;0\\)</p> <p>\u5219\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\u4e3a\\(\\lambda\\)\u4e3a\u6cca\u677e\u5206\u5e03,\u8bb0\\(X\\sim P(\\lambda)\\)</p> <ul> <li>\u5f53\\(n\\)\u8db3\u591f\u5927(\u4e00\u822c\\(n&gt;10\\)),\\(p\\)\u5145\u5206\u5c0f(\u4e00\u822c\\(p&lt;0.1\\)),\u4e14\\(np\\)\u4fdd\u6301\u9002\u5f53\u5927\u5c0f\u65f6,\u53c2\u6570\u4e3a\\((n,p)\\)\u7684\u4e8c\u9879\u5206\u5e03\u53ef\u4ee5\u7528\u6cca\u677e\u5206\u5e03\u8fd1\u4f3c\u63cf\u8ff0,\u5176\u4e2d\\(\\lambda=np\\),\u5373:\\(C_n^kp^k(1-p)^{n-k}\\sim\\frac{e^{-\\lambda}\\lambda ^k}{k!} \\ \\ (n \\rightarrow \\infty,p&lt;\\varepsilon,\\lambda=np)\\)</li> <li>e.g:\u67d0\u5730\u533a\u4e00\u4e2a\u6708\u5185\u6210\u5e74\u4eba\u60a3\u67d0\u79cd\u75be\u75c5\u7684\u60a3\u75c5\u7387\u4e3a1/200\uff0c\u8bbe\u5404\u4eba\u662f\u5426\u60a3\u75c5\u76f8\u4e92\u72ec\u7acb\u3002\u82e5\u8be5\u5730\u533a\u4e00\u793e\u533a\u67091000\u4e2a\u6210\u5e74\u4eba\uff0c\u6c42\u67d0\u6708\u5185\u8be5\u793e\u533a\u81f3\u5c11\u67093\u4eba\u60a3\u75c5\u7684\u6982\u7387\u3002</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#24","title":"2.4. \u8d85\u51e0\u4f55\u5206\u5e03","text":"<p>\u5b9a\u4e49:\u82e5\u968f\u673a\u53d8\u91cf\\(X\\)\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\\(P(X=k)=\\frac{C_a^kC_b^{n-k}}{C_N^n},k=l_1,l_1+1,l_1+2,\\cdots,l_2,\\)\u5176\u4e2d,\\(l_1=max(0,n-b),l_2=min(a,n).\\)\u5219\u79f0\\(X\\)\u670d\u4ece\u8d85\u51e0\u4f55\u5206\u5e03.</p> <p>e.g:\u4e00\u888b\u4e2d\u6709a\u4e2a\u767d\u7403\uff0cb\u4e2a\u7ea2\u7403\uff0ca+b=N,\u4ece\u4e2d\u4e0d\u653e\u56de\u5730\u53d6n\u4e2a\u7403\uff0c\u8bbe\u6bcf\u6b21\u53d6\u5230\u5404\u7403\u7684\u6982\u7387\u76f8\u7b49\uff0c\u4ee5X\u8868\u793a\u53d6\u5230\u7684\u767d\u7403\u6570\uff0c\u5219X\u670d\u4ece\u8d85\u51e0\u4f55\u5206\u5e03\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#25","title":"2.5. \u51e0\u4f55\u5206\u5e03","text":"<p>\u5b9a\u4e49:\u82e5\u968f\u673a\u53d8\u91cf\\(X\\)\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\\(P(X=k)=p(1-p)^{k-1},k=1,2,3,\\cdots,\\ \\ 0&lt;p&lt;1.\\)\u5219\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\\(p\\)\u7684\u51e0\u4f55\u5206\u5e03.</p> <p>e.g:\u4ece\u751f\u4ea7\u7ebf\u4e0a\u968f\u673a\u62bd\u4ea7\u54c1\u8fdb\u884c\u68c0\u6d4b\uff0c\u8bbe\u4ea7\u54c1\u7684\u6b21\u54c1\u7387\u4e3ap\uff0c0&lt;p&lt;1\uff0c\u82e5\u67e5\u5230\u4e00\u53ea\u6b21\u54c1\u5c31\u5f97\u505c\u673a\u68c0\u4fee\uff0c\u8bbe\u505c\u673a\u65f6\u5df2\u68c0\u6d4b\u5230X\u53ea\u4ea7\u54c1\uff0c\u5219X\u670d\u4ece\u53c2\u6570p\u7684\u51e0\u4f55\u5206\u5e03\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#26","title":"2.6. \u5df4\u65af\u5361\u5206\u5e03","text":"<p>\u5b9a\u4e49:\u82e5\u968f\u673a\u53d8\u91cf\\(X\\)\u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\\(P(X=k)=C_{k-1}^{r-1}p^r(1-p)^{k-r},k=r,r+1,r+2,\\cdots,\\)\u5176\u4e2d\\(r\\)\u4e3a\u6b63\u6574\u6570,\\(0&lt;p&lt;1.\\)</p> <p>\u5219\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\u4e3a\\((r,p)\\)\u7684\u5df4\u65af\u5361\u5206\u5e03</p> <p>e.g:\u4e00\u76d2\u4e2d\u67092\u4e2a\u7ea2\u74034\u4e2a\u767d\u7403,\u91c7\u7528\u653e\u56de\u62bd\u6837\u53d6\u7403\uff0c\u76f4\u5230\u53d6\u52303\u4e2a\u7ea2\u7403\u4e3a\u6b62\uff0cV\u8868\u793a\u53d6\u7403\u6b21\u6570\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#3","title":"3. \u5206\u5e03\u51fd\u6570","text":"<p>\u5b9a\u4e49:\u968f\u673a\u53d8\u91cf\\(X\\)\uff0c\u82e5\u5bf9\u4efb\u610f\u5b9e\u6570\\(x\\)\uff0c\u51fd\u6570\\(F(x)=P(X \\leq x)\\)\u79f0\u4e3a\\(X\\)\u7684\u5206\u5e03\u51fd\u6570.</p> <p>\u5173\u4e8e\\(F(x)\\):</p> <ul> <li>\\(0 \\leq F(x) \\le 1;\\)</li> <li>\\(F(x)\\)\u5355\u8c03\u4e0d\u51cf,\u4e14\\(F(-\\infty)=0,F(+\\infty)=1\\)</li> <li>\\(F(x)\\)\u53f3\u8fde\u7eed,\u5373\\(F(x+0)=F(x);\\)</li> <li>\\(F(x)-F(x-0)=P(X=x).\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#4","title":"4. \u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf","text":"<p>\u5b9a\u4e49:\u5bf9\u4e8e\u968f\u673a\u53d8\u91cf\\(X\\)\u7684\u5206\u5e03\u51fd\u6570\\(F(x)\\)\u82e5\u5b58\u5728\u975e\u8d1f\u7684\u51fd\u6570\\(f(x)\\)\u4f7f\u5bf9\u4e8e\u4efb\u610f\u5b9e\u6570\\(x\\)\u6709\uff1a</p> \\[F(x)=\\int_{-\\infty}^xf(t)dt\\] <p>\u5219\u79f0\\(X\\)\u4e3a\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf,\u5176\u4e2d\\(f(x)\\)\u79f0\u4e3a\\(X\\)\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u7b80\u79f0\u5bc6\u5ea6\u51fd\u6570.   </p> <p>\u5173\u4e8e\\(f(x)\\):</p> <ul> <li> <p>\\(f(x) \\ge 0,\\)</p> </li> <li> <p>\\(\\int_{-\\infty}^{+\\infty}f(x)dx=1,\\)</p> </li> <li> <p>\u5bf9\u4e8e\u4efb\u610f\u7684\u5b9e\u6570\\(x_1,x_2(x_2&gt;x_1),P\\{x_1&lt;X&lt;x_2\\}=F(x_2)-F(x_1)=\\int_{x_1}^{x_2}f(t)dt\\)</p> </li> </ul> <p>\\(\\Rightarrow P(X=a)=0.\\)</p> <ul> <li>\u5728\\(f(x)\\)\u8fde\u7eed\u70b9\\(x\\),\\(F'(x)=f(x)\\)</li> </ul> <p>\u51e0\u4e2a\u91cd\u8981\u7684\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u5206\u5e03:</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#41","title":"4.1. \u5747\u5300\u5206\u5e03","text":"<p>\u5b9a\u4e49:\u8bbe\u968f\u673a\u53d8\u91cf\\(X\\)\u5177\u6709\u6982\u7387\u5bc6\u5ea6\u51fd\u6570:</p> \\[f(x) = \\begin{cases}  \\frac{1}{b-a},  &amp; x\\in(a,b), \\\\ 0, &amp; \u5176\u4ed6. \\end{cases}\\] <p>\u5219\u79f0\\(X\\)\u670d\u4ece\u533a\u95f4\\((a,b)\\)\u4e0a\u7684\u5747\u5300\u5206\u5e03,\u5e76\u8bb0\u4e3a\\(X \\sim U(a,b)\\).</p> <p>\u5206\u5e03\u51fd\u6570:</p> \\[F(x) = \\begin{cases}  0,  &amp; x\\le a, \\\\ \\frac{x-a}{b-a}, &amp; a&lt;x&lt;b,\\\\ 1, &amp; x\\ge b. \\end{cases}\\] <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#42","title":"4.2. \u6b63\u6001\u5206\u5e03","text":"<p>\u5b9a\u4e49:\u8bbe\\(X\\)\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x)=\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma ^2}},-\\infty&lt;x&lt;+\\infty\\] <p>\u5176\u4e2d\\(-\\infty &lt; \\mu &lt; \\infty ,\\sigma &gt; 0\\)\u4e3a\u5e38\u6570,\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\u4e3a\\(\\mu,\\sigma\\)\u7684\u6b63\u6001\u5206\u5e03(Gauss\u5206\u5e03),\u8bb0\u4e3a\\(X\\sim N(\\mu,\\sigma^ 2)\\).</p> <p>\u5206\u5e03\u51fd\u6570:</p> \\[f(x)=\\int_{-\\infty}^{x}\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(t-\\mu)^2}{2\\sigma ^2}}dt\\] <ul> <li> <p>\u5f53\u56fa\u5b9a\u03bc\u65f6\uff0c\u03c3\u8d8a\u5927\uff0c\u66f2\u7ebf\u7684\u5cf0\u8d8a\u4f4e\uff0c\u843d\u5728\u03bc\u9644\u8fd1\u7684\u6982\u7387\u8d8a\u5c0f\uff0c\u53d6\u503c\u5c31\u8d8a\u5206\u6563\uff0c\u5373\u03c3\u662f\u53cd\u6620X\u7684\u53d6\u503c\u5206\u6563\u6027\u7684\u4e00\u4e2a\u6307\u6807\u3002</p> </li> <li> <p>\u7279\u522b\u5730,\u5f53\\(\\mu=0,\\sigma=1\\)\u65f6,\u5982\u679c\u8bb0\u6b64\u65f6\u7684\u6b63\u6001\u53d8\u91cf\u4e3a\\(Z\\),\u5373\\(Z\\sim N(0,1)\\)\u5219\u5b83\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03.\u5176\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> </li> </ul> \\[\\phi(x)=\\frac{1}{\\sqrt{2\\pi}}e^{\\frac{-x^2}{2}},|x|&lt;+\\infty\\] <ul> <li>\u5bf9\u5e94\u7684\u5206\u5e03\u51fd\u6570\u4e3a:</li> </ul> \\[\\Phi(x)=\\int_{-\\infty}^{x}\\frac{1}{\\sqrt{2\\pi}}e^{\\frac{-t^2}{2}}dt\\] <ul> <li> <p>\u6807\u51c6\u6b63\u6001\u5206\u5e03\u8868</p> </li> <li> <p>\u5f53\\(X\\sim N(\\mu,\\sigma^2)\\)\u65f6\\(\\frac{X-\\mu}{\\sigma}\\sim N(0,1)\\)</p> </li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#43","title":"4.3. \u6307\u6570\u5206\u5e03","text":"<p>\u5b9a\u4e49\uff1a\u8bbe\\(X\\)\u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[f(x) = \\begin{cases}  \\lambda e^{-\\lambda x},  &amp; x&gt;0, \\\\ 0, &amp; x \\le 0. \\end{cases}\\] <p>\u5176\u4e2d\\(\\lambda &gt;0\\)\u4e3a\u5e38\u6570,\u5219\u79f0\\(X\\)\u670d\u4ece\u53c2\u6570\u4e3a\\(\\lambda\\)\u7684\u6307\u6570\u5206\u5e03.\u8bb0\u4e3a\\(X\\sim E(\\lambda)\\)\u6216\\(X\\sim Exp(\\lambda).\\)</p> <p>\\(X\\)\u7684\u5206\u5e03\u51fd\u6570\u4e3a:</p> \\[F(x) = \\begin{cases}  1- e^{-\\lambda x},  &amp; x&gt;0, \\\\ 0, &amp; x \\le 0. \\end{cases}\\] <ul> <li>\\(X\\)\u5177\u6709\u65e0\u8bb0\u5fc6\u6027 (\u5982\u679cX\u8868\u793a\u7b49\u5f85\u65f6\u95f4\uff0c\u90a3\u4e48\u65e0\u8bb0\u5fc6\u6027\u8bf4\u660e\u53ea\u8981\u8fd8\u6ca1\u7b49\u5230\uff0c\u90a3\u4e48\u5269\u4f59\u7b49\u5f85\u65f6\u95f4\u4ecd\u7136\u670d\u4ece\u53c2\u6570\u4e3a\u03bb\u7684\u6307\u6570\u5206\u5e03.)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230203/#5","title":"5. \u968f\u673a\u53d8\u91cf\u7684\u51fd\u6570","text":"<ul> <li>\u4e00\u822c,\u82e5\u5df2\u77e5\\(X\\)\u6982\u7387\u5206\u5e03,\\(Y=g(X)\\)\u6c42\\(Y\\)\u7684\u6982\u7387\u5206\u5e03\u7684\u8fc7\u7a0b\u4e3a:</li> <li>\u82e5\\(Y\\)\u4e3a\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf,\u5219\u5148\u5199\u51fa\\(Y\\)\u7684\u53ef\u80fd\u53d6\u503c\\(Y_1, Y_2,\\dots,Y_j,\\cdots,\\)\u518d\u627e\u51fa\\((Y=y_j)\\)\u7684\u7b49\u4ef7\u4e8b\u4ef6\\((X\\in D_j)\\)\u5f97\\(P(Y=y_i)=P(X\\in D_j)\\);</li> <li> <p>\u82e5\\(Y\\)\u4e3a\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf,\u5219\u5148\u5199\u51fa\\(Y\\)\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570:\\(F_Y(y)=P(Y\\le y)\\),\u518d\u627e\u51fa\\((Y\\le y)\\)\u7684\u7b49\u4ef7\u4e8b\u4ef6\\((X\\in D_y)\\)\u5f97\\(F_Y(y)=P(X\\in D_j)\\);\u518d\u6c42\u51fa\\(Y\\)\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\\(f_y(Y).\\)</p> </li> <li> <p>\u5982\u679c:</p> </li> <li> <p>\\(X\\)\u4e3a\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf,\u4e14\u5176\u5bc6\u5ea6\u51fd\u6570\u4e3a\\(f_X(x)\\);</p> </li> <li>\u968f\u673a\u53d8\u91cf\\(Y=g(X)\\);</li> <li>\u51fd\u6570\\(y=g(x)\\)\u4e3a\u4e00\u4e25\u683c\u5355\u8c03\u53ef\u5fae\u51fd\u6570</li> </ul> <p>\u5219\u8bb0\\(y=g(x)\\)\u7684\u53cd\u51fd\u6570\u4e3a\\(x=h(y)\\),\u5f97\u5230\\(Y\\)\u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a:</p> \\[f_Y(y) = \\begin{cases}  f_X(h(y))\\cdot |h'(y)|,  &amp; y\\in D, \\\\ 0, &amp; y \\notin D. \\end{cases}\\] <p>\u5176\u4e2d\\(D\\)\u4e3a\\(y=g(x)\\)\u7684\u503c\u57df.</p> <ul> <li>\u82e5\\(X\\sim N(\\mu,\\sigma^2)\\),\u5219\\(Y=aX+b\\sim N(a\\mu+b,a^2\\sigma^2)\\).</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/","title":"\u7b2c\u4e09\u7ae0 \u591a\u5143\u968f\u673a\u53d8\u91cf\u53ca\u5176\u5206\u5e03","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#1","title":"1. \u4e8c\u5143\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf","text":"<p>\u5b9a\u4e49\uff1a\u8bbe\\(E\\)\u662f\u4e00\u4e2a\u968f\u673a\u8bd5\u9a8c\uff0c\u6837\u672c\u7a7a\u95f4\\(S=\\{ e\\}\\)\uff1b\u8bbe\\(X=X(e)\\)\u548c\\(Y=Y(e)\\)\u662f\u5b9a\u4e49\u5728\\(S\\)\u4e0a\u7684\u968f\u673a\u53d8\u91cf\uff0c\u7531\u5b83\u4eec\u6784\u6210\u7684\u5411\u91cf\\((X,Y)\\)\u53eb\u505a\u4e8c\u5143\u968f\u673a\u53d8\u91cf\u6216\u4e8c\u7ef4\u968f\u673a\u53d8\u91cf\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#11","title":"1.1. \u8054\u5408\u6982\u7387\u5206\u5e03","text":"<p>\u5b9a\u4e49\uff1a\u82e5\u4e8c\u5143\u968f\u673a\u53d8\u91cf\\((X,Y)\\)\u5168\u90e8\u53ef\u80fd\u53d6\u5230\u7684\u4e0d\u540c\u503c\u662f\u6709\u9650\u5bf9\u6216\u53ef\u5217\u65e0\u9650\u5bf9\uff0c\u5219\u79f0\\((X,Y)\\)\u662f\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#12","title":"1.2. \u8fb9\u9645\u5206\u5e03","text":"<p>\u8054\u5408\u5206\u5e03\u5f8b:</p> <p></p> <p>\u8fb9\u9645\u5206\u5e03\u5f8b:</p> <ul> <li>\u8054\u5408\u5206\u5e03\u5f8b\u7684\u884c/\u5217\u6c42\u548c</li> <li>\\(P(X=x_i)=P(X=X_i,Y&lt;+\\infty)=\\sum_{j=1}^{\\infty}p_{ij}=p_{i\\cdot}\\ , i=1,2,\\cdots\\)</li> <li>\\(P(Y=y_j)=P(X&lt;+\\infty,Y=Y_j)=\\sum_{i=1}^{\\infty}p_{ij}=p_{\\cdot j}\\ , j=1,2,\\cdots\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#13","title":"1.3. \u6761\u4ef6\u5206\u5e03","text":"<p>\u6761\u4ef6\u5206\u5e03\u5f8b:(\u4ee5\\(X\\)\u7684\u6761\u4ef6\u5206\u5e03\u5f8b\u4e3a\u4f8b,\\(Y\\)\u540c\u7406)</p> \\[P(X=X_i|Y=y_j)=\\frac{P(X=x_i,Y=y_j)}{P(Y=y_j)}=\\frac{p_{ij}}{p_{\\cdot j}}\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#2","title":"2. \u4e8c\u5143\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#21","title":"2.1. \u8054\u5408\u5206\u5e03\u51fd\u6570","text":"<p>\u5b9a\u4e49\uff1a\u8bbe\\((X,Y)\\)\u662f\u4e8c\u5143\u968f\u673a\u53d8\u91cf,\u5bf9\u4e8e\u4efb\u610f\u5b9e\u6570\\(x,y\\)\uff0c\u4e8c\u5143\u51fd\u6570\\(F(x,y)=P\\{ (X\\le x) \\cap (Y \\le y) \\}=P(X\\le x,Y\\le y)\\)\u79f0\u4e3a\u4e8c\u5143\u968f\u673a\u53d8\u91cf\\((X,Y)\\)\u7684\u8054\u5408\u5206\u5e03\u51fd\u6570.</p> <p></p> <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#22","title":"2.2. \u8fb9\u9645\uff08\u8fb9\u7f18\uff09\u5206\u5e03\u51fd\u6570","text":"<p>\u5b9a\u4e49:\u4e8c\u5143\u968f\u673a\u53d8\u91cf\\((X,Y)\\)\u4f5c\u4e3a\u6574\u4f53\uff0c\u6709\u5206\u5e03\u51fd\u6570\\(F(x,y)\\)\u5176\u4e2d\\(X\\)\u548c\\(Y\\)\u90fd\u662f\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5206\u5e03\u51fd\u6570, \u8bb0\u4e3a\\(F_X(x),F_Y(y)\\)\u79f0\u4e3a\u8fb9\u9645\u5206\u5e03\u51fd\u6570.</p> <ul> <li>\\(F_X(x)=P(X\\le x)=P(X\\le x,Y\\le +\\infty)=F(x,+\\infty)\\)</li> <li>\u540c\u7406\\(F_Y(y)=F(+\\infty,y)\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#23","title":"2.3. \u6761\u4ef6\u5206\u5e03\u51fd\u6570","text":"<p>\u5728\\(\\{X=x_i\\}\\)\u6761\u4ef6\u4e0b,\\(Y\\)\u7684\u6761\u4ef6\u5206\u5e03\u51fd\u6570\u4e3a:</p> \\[F_{Y|X}(y|x_i) = P(Y\\le y|X=x_i)=\\lim _{\\delta \\rightarrow{0^+}}P\\{Y\\le y|x&lt;X\\le x+\\delta\\}\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#3","title":"3. \u4e8c\u5143\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#31","title":"3.1. \u8054\u5408\u6982\u7387\u5bc6\u5ea6\u51fd\u6570","text":"<p>e.g:</p> <p></p> <p></p> <p>*\u901a\u8fc7\u753b\u56fe\u89e3\u51b3</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#32","title":"3.2. \u8fb9\u9645\uff08\u8fb9\u7f18\uff09\u6982\u7387\u5bc6\u5ea6\u51fd\u6570","text":"<p>\u8bbe\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf(X,Y)\u7684\u5bc6\u5ea6\u51fd\u6570\u4e3a\\(f(x,y)\\)\u5219X,Y\u7684\u8fb9\u9645\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5206\u522b\u4e3a</p> <p></p> <p></p> <p>e.g:</p> <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#33","title":"3.3. \u6761\u4ef6\u6982\u7387\u5bc6\u5ea6\u51fd\u6570","text":"<p>e.g:</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#34","title":"3.4. \u4e8c\u5143\u5747\u5300\u5206\u5e03","text":"<p>\u82e5\u4e8c\u5143\u968f\u673a\u53d8\u91cf(X,Y)\u5728\u4e8c\u7ef4\u6709\u754c\u533a\u57dfD\u4e0a\u53d6\u503c\uff0c\u4e14\u5177\u6709\u6982\u7387\u5bc6\u5ea6\u51fd\u6570</p> <p></p> <p>\u5219\u79f0(X,Y)\u5728D\u4e0a\u670d\u4ece\u5747\u5300\u5206\u5e03\u3002   </p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#35","title":"3.5. \u4e8c\u5143\u6b63\u6001\u5206\u5e03","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#4","title":"4. \u968f\u673a\u53d8\u91cf\u7684\u72ec\u7acb\u6027","text":"<ul> <li>\u82e5\\(F(x,y)=F_x(x)\\cdot F_y(y)\\),\\(X,Y\\)\u72ec\u7acb.</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#5","title":"5. \u4e8c\u5143\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u5206\u5e03","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#51-zxy","title":"5.1. \\(Z=X+Y\\)\u7684\u5206\u5e03","text":"<ul> <li>\u82e5\\(X\\sim P(\\lambda_1),Y\\sim P(\\lambda_2)\\)\u5219\\(Z=X+Y\\sim P(\\lambda_1+\\lambda_2)\\)</li> </ul> \\[f_Z(z)=\\int_{-\\infty}^{+\\infty}f(z-y,y)dy=\\int_{-\\infty}^{+\\infty}f(x,z-x)dx\\] <p>\u5f53\\(X,Y\\)\u76f8\u4e92\u72ec\u7acb\u65f6:</p> <ul> <li>\u5377\u79ef\u516c\u5f0f:</li> </ul> \\[f_Z(z)=\\int_{-\\infty}^{+\\infty}f_X(z-y)f_Y(y)dy=\\int_{-\\infty}^{+\\infty}f_X(x)f_Y(z-x)dx\\] <ul> <li> <p></p> </li> <li> <p>e.g:\u8bbe\u968f\u673a\u53d8\u91cf\uff08X,Y\uff09\u7684\u8054\u5408\u5bc6\u5ea6\u51fd\u6570\u4e3a\\(f(x,y)=3x,0&lt;y&lt;x&lt;1\\),\u8bb0\\(Z=X+Y\\),\u6c42\\(Z\\)\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570.</p> </li> </ul> <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230204/#52-mmaxxynminxy","title":"5.2. \\(M=\\max\\{X,Y\\},N=\\min\\{X,Y\\}\\)\u7684\u5206\u5e03","text":"\\[F_\\max (z)=F_X(z)F_Y(z)\\] \\[F_\\min (z)=1-(1-F_X(z))(1-F_Y(z))\\] <ul> <li>\u4e32\u8054min</li> <li>\u5e76\u8054max</li> <li>\u5907\u7528</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/","title":"\u7b2c\u56db\u7ae0 \u968f\u673a\u53d8\u91cf\u7684\u6570\u5b57\u7279\u5f81","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#1","title":"1. \u6570\u5b66\u671f\u671b","text":"\\[E(X)=\\int_{-\\infty}^{+\\infty}xf(x)dx\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#11","title":"1.1. \u6cca\u677e\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b","text":"\\[E(X)=\\lambda\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#12","title":"1.2. \u6307\u6570\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b","text":"\\[E(X)=\\frac{1}{\\lambda}\\]"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#13","title":"1.3. \u6570\u5b66\u671f\u671b\u7684\u7279\u6027","text":"<ul> <li>\\(E(C)=C\\)</li> <li>\\(E(CX)=CE(X)\\)</li> <li>\\(E(X+Y)=E(X)+E(Y)\\)</li> <li>\u82e5\\(X,Y\\)\u76f8\u4e92\u72ec\u7acb,\\(E(XY)=E(X)E(Y)\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#2","title":"2. \u65b9\u5dee","text":"<p>\u8bbeX\u662f\u968f\u673a\u53d8\u91cf\uff0c\u82e5 \\(E\\{[X-E(X)]^2\\}\\)\u5b58\u5728\uff0c\u5219\u79f0\u5176\u4e3a\\(X\\)\u7684\u65b9\u5dee\uff0c\u8bb0\u4e3a\\(Var(X\\))\u6216\\(D(X)\\),\u5373</p> \\[Var(X)=E\\{[X-E(X)]^2\\}\\] <p>\u5c06\\(\\sqrt{Var(X)}\\)\u8bb0\u4e3a\\(\\sigma(X)\\)\u79f0\u4e3a\\(X\\)\u7684\u6807\u51c6\u5dee\u6216\u5747\u65b9\u5dee\uff0c\u5b83\u4e0e\\(X\\)\u6709\u76f8\u540c\u7684\u91cf\u7eb2.</p> <ul> <li>\\(Var(X)=\\int_{-\\infty}^{+\\infty}[x-E(X)]^2f(x)dx\\)</li> <li>\\(Var(X)=E(X^2)-[E(X)]^2\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#21","title":"2.1. \u4e24\u70b9\u5206\u5e03\u7684\u65b9\u5dee","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#22","title":"2.2. \u6cca\u677e\u5206\u5e03\u7684\u65b9\u5dee","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#23","title":"2.3. \u5747\u5300\u5206\u5e03\u7684\u65b9\u5dee","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#24","title":"2.4. \u6307\u6570\u5206\u5e03\u7684\u65b9\u5dee","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#25","title":"2.5. \u4e8c\u9879\u5206\u5e03\u7684\u65b9\u5dee","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#26","title":"2.6. \u6b63\u6001\u5206\u5e03\u7684\u65b9\u5dee","text":"<p>\u6b63\u6001\u5206\u5e03\u7684\u4e24\u4e2a\u53c2\u6570\\(\\mu ,\\sigma^2\\)\u5206\u522b\u662f\u8be5\u5206\u5e03\u7684\u6570\u5b66\u671f\u671b\u548c\u65b9\u5dee</p> <ul> <li>\u6807\u51c6\u5316\u53d8\u91cf:\u8bbe\u968f\u673a\u53d8\u91cf\\(X\\)\u5177\u6709\u6570\u5b66\u671f\u671b\\(E(X)=\\mu\\)\u65b9\u5dee\\(Var(X)=\\sigma^2\\ne 0\\),\u8bb0\\(X^*=\\frac{X-\\mu}{\\sigma}\\)\u5219\u79f0\\(X^*\\)\u662f\\(X\\)\u7684\u6807\u51c6\u5316\u53d8\u91cf</li> </ul> <p>\u65b9\u5dee\u7684\u6027\u8d28:</p> <ul> <li>\\(Var(C)=0\\)</li> <li>\\(Var(CX)=C^2Var(X)\\)</li> <li>\\(Var(X+Y)=Var(X)+Var(Y)+2E\\{[X-E(X)][Y-E(Y)\\}\\)</li> <li>\u82e5\\(X,Y\\)\u76f8\u4e92\u72ec\u7acb,\u5219\u6709\\(Var(X+Y)=Var(X)+Var(Y)\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#3","title":"3. \u534f\u65b9\u5dee\u3001\u76f8\u5173\u7cfb\u6570","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#31","title":"3.1. \u534f\u65b9\u5dee:","text":"\\[Cov(X,Y)=E\\{[X-E(X)][Y-E(Y)]\\}=E(XY)-E(X)E(Y)\\] <ul> <li>\u65b9\u5dee\u6027\u8d28\u7684\u8865\u5145:\\(Var(X+Y)=Var(X)+Var(Y)+2Cov(X,Y)\\)</li> <li>\u534f\u65b9\u5dee\u7684\u6027\u8d28:</li> <li>\\(Cov(X,Y)=Cov(Y,X)\\)</li> <li>\\(Cov(X,X)=Var(X)\\)</li> <li>\\(Cov(aX,bY)=ab\\cdot Cov(X,Y)\\)</li> <li>\\(Cov(X_1+X_2,Y)=Cov(X_1,Y)+Cov(X_2,Y)\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#32","title":"3.2. \u76f8\u5173\u7cfb\u6570:","text":"\\[\\rho_{XY}=\\frac{Cov(X,Y)}{\\sqrt{Var(X)Var(Y)}}\\] <ul> <li> <p>\u76f8\u5173\u7cfb\u6570\u7684\u6027\u8d28:</p> </li> <li> <p>\\(|\\rho_{XY}| \\le 1\\)</p> </li> <li> <p>\\(|\\rho|=1\\)\u65f6,\\(Y=a+bX\\)</p> </li> <li> <p>\\(\\rho=0\\)\u65f6</p> <ul> <li> <p>\\(Cov(X,Y)=0\\)</p> </li> <li> <p>\\(E(XY)=E(X)E(Y)\\)</p> </li> <li> <p>\\(Var(X\\pm Y)=Var(X)+Var(Y)\\)</p> </li> </ul> <p></p> </li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230205/#4","title":"4. \u5176\u5b83\u6570\u5b57\u7279\u5f81","text":"<p>\u7565</p> <p>\u88681</p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230206/","title":"\u7b2c\u4e94\u7ae0 \u5927\u6570\u5b9a\u5f8b\u548c\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230206/#1","title":"1. \u4f9d\u6982\u7387\u6536\u655b","text":"<p>\u5927\u6982\u610f\u601d\u662f\\(P(Y_n=C)=1\\),\u8fd9\u91cc\u548c\\(Y_n=C\\)\u610f\u4e49\u4e0d\u540c</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230206/#2","title":"2. \u5927\u6570\u5b9a\u5f8b","text":"<ul> <li>\u5f31\u5927\u6570\u5b9a\u5f8b:\u968f\u673a\u53d8\u91cf\u5e8f\u5217\u524d\\(n\\)\u4e2a\u53d8\u91cf\u7684\u7b97\u672f\u5e73\u5747\u4f9d\u6982\u7387\u6536\u655b\u57df\\(c\\),\u5219\u8fd9\u4e2a\u968f\u673a\u53d8\u91cf\u5e8f\u5217\u670d\u4ece\u5927\u6570\u5b9a\u5f8b\u3002</li> </ul> <ul> <li> <p>\u5207\u6bd4\u96ea\u592b\u5927\u6570\u5b9a\u5f8b:</p> </li> <li> <p>\u8f9b\u94a6\u5927\u6570\u5b9a\u5f8b</p> </li> </ul> <p></p> <ul> <li>\u8d1d\u52aa\u5229\u5927\u6570\u5b9a\u5f8b</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230206/#3","title":"3. \u4e2d\u5fc3\u6781\u9650\u5b9a\u7406","text":"<ul> <li>\u5f53n\u5145\u5206\u5927\u65f6,\u5bf9\u4efb\u610f\u72ec\u7acb\u540c\u5206\u5e03\u7684\\(X_1,X_2,\\cdots ,X_n,\\cdots\\)\u6ee1\u8db3\\(E(X_i)=\\mu,Var(X_i)=\\sigma^2\\),\u5219</li> </ul> \\[\\sum_{i=1}^{n}X_i \\sim N(n\\mu,n\\sigma^2)\\] <ul> <li>\\(B(n,p)\\sim N(np,np(1-p)),n\u5145\u5206\u5927\\)</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230213/","title":"\u7b2c\u516d\u7ae0  \u7edf\u8ba1\u91cf\u4e0e\u62bd\u6837\u5206\u5e03","text":"<p>\u6570\u7406\u7edf\u8ba1\u662f\u4e00\u95e8\u4ee5\u6570\u636e\u4e3a\u57fa\u7840\u7684\u5b66\u79d1, \u53ef\u4ee5\u5b9a\u4e49\u4e3a\u6536\u96c6\u6570\u636e, \u5206\u6790\u6570\u636e\u548c\u7531\u6570\u636e\u5f97\u51fa\u7ed3\u8bba\u7684\u4e00\u7ec4\u6982\u5ff5\u3001 \u539f\u5219\u548c\u65b9\u6cd5\u3002</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230213/#1","title":"1. \u968f\u673a\u6837\u672c\u4e0e\u7edf\u8ba1\u91cf","text":"<ul> <li>\u6570\u7406\u7edf\u8ba1\u4e3b\u8981\u4efb\u52a1\u662f\u4ece\u603b\u4f53\u4e2d\u62bd\u53d6\u4e00\u90e8\u5206\u4e2a\u4f53, \u6839\u636e\u8fd9\u90e8\u5206\u4e2a\u4f53\u7684\u6570\u636e\u5bf9\u603b\u4f53\u5206\u5e03\u7ed9\u51fa\u63a8\u65ad. \u88ab\u62bd\u53d6\u7684\u90e8\u5206\u4e2a\u4f53\u53eb\u505a\u603b\u4f53\u7684\u4e00\u4e2a \u6837\u672c.</li> <li>\u968f\u673a\u6837\u672c\uff1a\u4ece\u603b\u4f53\u4e2d\u968f\u673a\u5730\u53d6n\u4e2a\u4e2a\u4f53, \u79f0\u4e3a\u4e00\u4e2a\u968f\u673a\u6837\u672c\u3002</li> <li>\u7b80\u5355\u968f\u673a\u6837\u672c\uff1a\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u7684\u968f\u673a\u6837\u672c(X1,X2,\u2026,Xn)\u79f0\u4e3a\u5bb9\u91cf\u662fn\u7684\u7b80\u5355\u968f\u673a\u6837\u672c\u3002</li> <li>\u4ee3\u8868\u6027:\u6bcf\u4e2a\\(X_i\\)\u4e0eX\u540c\u5206\u5e03</li> <li>\u72ec\u7acb\u6027:\\(X_1,X_2,...,X_n\\)\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf</li> <li>\u5e38\u7528\u7edf\u8ba1\u91cf:</li> <li></li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230213/#2-chi-2tf","title":"2. \\(\\chi ^2\\)\u5206\u5e03,\\(t\\)\u5206\u5e03,\\(F\\)\u5206\u5e03","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230213/#21-chi-2","title":"2.1. \\(\\chi ^2\\)\u5206\u5e03(\u5361\u65b9\u5206\u5e03)","text":"<ul> <li>\u6027\u8d28:</li> <li>\u53ef\u52a0\u6027:\\(\\chi^2(m)+\\chi^2(n)=\\chi^2(m+n)\\)</li> <li>\u6570\u5b66\u671f\u671b\u548c\u65b9\u5dee:\\(E(\\chi^2(n))=n,Var(\\chi^2(n))=2n\\)</li> <li></li> <li></li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230213/#t","title":"t\u5206\u5e03","text":"<ul> <li>\u5f53n\u8db3\u591f\u5927\u65f6,t\u5206\u5e03\u8fd1\u4f3c\u4e0e\u6807\u51c6\u6b63\u6001\u5206\u5e03\\(N(0,1)\\)</li> <li></li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230213/#f","title":"F\u5206\u5e03","text":"<ul> <li>\u5982\u679c\\(F\\sim F(n_1,n_2)\\),\u5219\\(\\frac{1}{F}\\sim F(n_2,n_1)\\)</li> <li>\u5982\u679c\\(X\\sim t(n)\\),\u5219\\(X^2\\sim F(1,n)\\)</li> <li></li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230213/#3","title":"3. \u6b63\u6001\u603b\u4f53\u4e0b\u7684\u62bd\u6837\u5206\u5e03","text":"<p>\u8bbe\\(X_1,X_2,...,X_n\\)\u4e3a\u6765\u81ea\u6b63\u6001\u603b\u4f53\\(N(\\mu,\\sigma^2)\\)\u7684\u7b80\u5355\u968f\u673a\u6837\u672c,\\(\\overline{X}\\)\u662f\u6837\u672c\u5747\u503c,\\(S^2\\)\u662f\u6837\u672c\u65b9\u5dee,\u5219:</p> \\[\\overline X\\sim N(\\mu,\\frac{\\sigma^2}{n})\\] \\[\\frac{(n-1)S^2}{\\sigma^2}\\sim \\chi^2(n-1)\\] \\[\\frac{\\sum_{i=1}^{n}(X_i-\\overline X)}{\\sigma^2}\\sim \\chi^2(n-1),\\frac{\\sum_{i=1}^{n}(X_i-\\mu)}{\\sigma^2}\\sim \\chi^2(n)\\] \\[\\frac{\\overline X-\\mu}{S/\\sqrt n}\\sim t(n-1)\\] <p></p> <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/","title":"\u7b2c\u4e03\u7ae0 \u53c2\u6570\u4f30\u8ba1","text":"<p>\u4e0d\u8003\u5185\u5bb9\uff08\u4e24\u4e2a\u6b63\u6001\u603b\u4f53\u65b9\u5dee\u4e0d\u7b49\u672a\u77e5\u7684\u5747\u503c\u5dee\u533a\u95f4\u4f30\u8ba1\uff0c\u975e\u6b63\u6001\u603b\u4f53\u53c2\u6570\u533a\u95f4\u4f30\u8ba1\uff09</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#1","title":"1. \u70b9\u4f30\u8ba1(\u77e9\u4f30\u8ba1\uff0c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1)","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#11","title":"1.1. \u77e9\u4f30\u8ba1","text":"<p>\u57fa\u672c\u6b65\u9aa4:</p> <ol> <li>\u6c42\u77e9(\\(\\mu,v\\))\u5173\u4e8e\u53c2\u6570\u7684\u51fd\u6570</li> <li>\u6c42\u53c2\u6570\u5173\u4e8e\u77e9\u7684\u53cd\u51fd\u6570</li> <li>\u4ee5\u6837\u672c\u77e9\\(A_i,B_i\\)\u4ee3\u66ff\u603b\u4f53\u77e9(\\(\\mu,v\\)),\u5f97\u5230\u53c2\u6570\u7684\u77e9\u4f30\u8ba1\u91cf</li> </ol>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#12","title":"1.2. \u6781\u5927\u4f3c\u7136\u4f30\u8ba1","text":"<ol> <li>\u6784\u9020\u5bf9\u6570\u4f3c\u7136\u51fd\u6570:\\(l(\\theta)=\\ln L(\\theta)=\\ln p(x_1,...,x_n,\\theta);\\)</li> <li>\u4ee4\u5bfc\u6570\u7b49\u4e8e0,\u627e\\(l(\\theta)\\)\u7684\u6700\u5927\u503c\u70b9(\u4e0d\u662f\u6781\u5927\u503c\u70b9\u5c31\u662f\u7aef\u70b9),\u5f97\u5230\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c</li> </ol>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#2","title":"2. \u4f30\u8ba1\u91cf\u7684\u8bc4\u4ef7\u51c6\u5219","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#21","title":"2.1. \u65e0\u504f\u6027\u51c6\u5219","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#22","title":"2.2. \u6709\u6548\u6027\u51c6\u5219","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#23","title":"2.3. \u5747\u65b9\u8bef\u5dee\u51c6\u5219","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#24","title":"2.4. \u76f8\u5408\u6027\u51c6\u5219","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#3","title":"3. \u533a\u95f4\u4f30\u8ba1(\u7f6e\u4fe1\u5ea6\uff0c\u67a2\u8f74\u91cf)","text":"<p>\u627e\u4e24\u4e2a\\(\\theta\\)\u7684\u4f30\u8ba1\u91cf\u53ef\u4ee5\u76d6\u4f4f\u771f\u5b9e\u7684\\(\\theta\\)</p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#31","title":"3.1 \u7f6e\u4fe1\u533a\u95f4","text":""},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#32","title":"3.2. \u67a2\u8f74\u91cf\u6cd5","text":"<ul> <li>\u7edf\u8ba1\u91cf:\u53ea\u662f\u6837\u672c\u7684\u51fd\u6570</li> <li>\u67a2\u8f74\u91cf:\u53ea\u662f\u6837\u672c\u548c\u5f85\u4f30\u53c2\u6570\u7684\u51fd\u6570</li> </ul>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230214/#4","title":"4. \u6b63\u6001\u603b\u4f53\u53c2\u6570\u7684\u533a\u95f4\u4f30\u8ba1","text":"<p>\u53c2\u8003\u4e86\u4e00\u4e2a\u5927\u4f6c\u7684\u7b14\u8bb0</p> <p></p> <p></p> <p></p>"},{"location":"%E4%B8%BB%E5%B9%B2%E8%AF%BE%E7%A8%8B/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/20230215/","title":"\u7b2c\u516b\u7ae0 \u5047\u8bbe\u68c0\u9a8c","text":"<p>\u4e0d\u8003\u5185\u5bb9\uff08\u4e24\u4e2a\u6b63\u6001\u65b9\u5dee\u4e0d\u7b49\uff0c\u672a\u77e5\u7684\u5747\u503c\u662f\u5426\u76f8\u7b49\u5047\u8bbe\u68c0\u9a8c\uff09</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E5%85%B3%E4%BA%8E%E6%B8%B8%E6%88%8F%E7%9A%84%E6%80%9D%E8%80%83/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F%E6%98%AF%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/","title":"\u82f1\u96c4\u8054\u76df\u662f\u72b6\u6001\u540c\u6b65","text":"<p>\u9996\u5148\u72b6\u6001\u540c\u6b65\u7684\u7279\u70b9\u662f\uff1a\u670d\u52a1\u5668\u7aef\u627f\u62c5\u8ba1\u7b97\u903b\u8f91\uff0c\u8ba1\u7b97\u5b8c\u6210\u540e\u5c06\u72b6\u6001\u5206\u53d1\u7ed9\u6bcf\u4e2a\u5ba2\u6237\u7aef</p> <ol> <li>\u82f1\u96c4\u8054\u76df\u7684\u65ad\u7ebf\u91cd\u8fde\uff1a\u5728\u7f51\u901f\u4e00\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7ba1\u662f\u6389\u7ebf10\u79d2\u8fd8\u662f\u6389\u7ebf\u5341\u5206\u949f\uff0c\u91cd\u8fde\u7684\u901f\u5ea6\u662f\u4e00\u81f4\u7684\uff0c\u5982\u679c\u662f\u5e27\u540c\u6b65\uff0c\u9700\u8981\u201c\u8ffd\u5e27\u201d\uff0c\u663e\u7136\u662f\u6389\u7ebf\u8d8a\u957f\u91cd\u8fde\u65f6\u95f4\u8d8a\u957f\uff0c\u6240\u4ee5\u662f\u72b6\u6001\u540c\u6b65\u7684</li> <li>\u5bf9\u4e8e\u5f00\u6302\uff1a\u82f1\u96c4\u8054\u76df\u6ca1\u6709\u5168\u56fe\u6302\uff0c\u5168\u56fe\u6302\u7684\u4ea7\u751f\u662f\u56e0\u4e3a\u5728\u5e27\u540c\u6b65\u7684\u6e38\u620f\u4e0b\uff08\u5982\u738b\u8005\u8363\u8000\uff09\uff0c\u5ba2\u6237\u7aef\u662f\u62e5\u6709\u6e38\u620f\u7684\u6240\u6709\u6570\u636e\u7684\uff0c\u901a\u8fc7\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\uff0c\u53ef\u4ee5\u83b7\u5f97\u6e38\u620f\u7684\u6240\u6709\u4fe1\u606f\uff0c\u81ea\u7136\u5c31\u53ef\u4ee5\u201c\u900f\u89c6\u201d\uff0c\u4f46\u7531\u4e8e\u82f1\u96c4\u8054\u76df\u6ca1\u6709\u5168\u56fe\u6302\uff08\u82f1\u96c4\u8054\u76df\u4e3b\u8981\u662f\u6362\u80a4\u6302\u548c\u81ea\u52a8\u8d70\u4f4d\u811a\u672c\uff09\uff0c\u6240\u4ee5\u53ef\u77e5lol\u662f\u72b6\u6001\u540c\u6b65</li> <li>\u5173\u4e8e\u56de\u653e\uff1a\u4e0d\u7ba1\u662f\u72b6\u6001\u540c\u6b65\u8fd8\u662f\u5e27\u540c\u6b65\u672c\u8d28\u4e0a\u90fd\u662f\u6839\u636e\u5df2\u6709\u7684\u547d\u4ee4\u53bb\u91cd\u73b0\u6218\u6597\u8fc7\u7a0b\uff0c\u90a3\u4e48\u738b\u8005\u8363\u8000\uff08\u5e27\u540c\u6b65\uff09\u548clol\u7684\u533a\u522b\u5728\u54ea\u5462\uff1f\u6211\u8ba4\u4e3awzry\u5728\u5bf9\u5c40\u4e2d\u7528\u6237\u7684\u65e0\u6548\u8f93\u5165\u66f4\u5c11\uff0c\u82f1\u96c4\u8054\u76df\u73a9\u5bb6\u559c\u6b22\u4e00\u523b\u4e0d\u505c\u7684\u70b9\u5730\u677f\uff0c\u7136\u800c\u8fd9\u6837\u9891\u7e41\u7684\u70b9\u5730\u677f\u5bf9\u4e8e\u5b58\u50a8\u8f93\u5165\u547d\u4ee4\u6765\u8bf4\u662f\u4e00\u4ef6\u5f88\u8d39\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\u5982\u679c\u5b58\u653e\u7684\u662f\u670d\u52a1\u5668\u7aef\u7684\u4e00\u7cfb\u5217\u72b6\u6001\u7684\u8bdd\uff0c\u5c31\u5f88\u5bb9\u6613\u7684\u53ef\u4ee5\u5b9e\u73b0\u56de\u653e\u3002</li> <li>\u5173\u4e8e\u56de\u653e\u7684\u7b2c\u4e8c\u70b9\uff1a\u72b6\u6001\u540c\u6b65\u4e0b\u4e3a\u4e86\u4fdd\u8bc1\u5ba2\u6237\u7aef\u7684\u4f53\u9a8c\u662f\u4e1d\u6ed1\u7684\uff0c\u9700\u8981\u63d0\u524d\u9884\u6d4b\u884c\u4e3a\uff0c\u800c\u4e14\u6e32\u67d3\u5e27\u548c\u670d\u52a1\u5668\u7684\u903b\u8f91\u5e27\u7684\u5e27\u7387\u662f\u4e0d\u540c\u7684\uff0c\u6e32\u67d3\u5e27\u4f1a\u66f4\u5feb\u4e00\u4e9b\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u73a9\u7684\u65f6\u5019\u4f60\u4f1a\u611f\u89c9\u64cd\u4f5c\u7684\u53cd\u5e94\u662f\u53ca\u65f6\u7684\uff0c\u5982\u679c\u7f51\u7edc\u5361\u987f\u53ef\u80fd\u4f1a\u77ac\u95f4\u5361\u5e27\u7a81\u53d8\u4ee5\u5411\u670d\u52a1\u5668\u7aef\u59a5\u534f\uff0c\u56e0\u6b64\u5728\u56de\u653e\u65f6\u7ecf\u5e38\u51fa\u73b0\u6bd4\u5982\u95ea\u73b0\u663e\u793a\u9519\u8bef\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u5e27\u6570\u5c11\uff0c\u53ef\u80fd\u5e76\u6ca1\u6709\u4fdd\u5b58\u5230\u95ea\u73b0\u7684\u90a3\u4e00\u523b\u7684\u4fe1\u606f\uff0c\u800c\u662f\u95ea\u73b0\u540e\u518d\u79fb\u52a8\u4e00\u5c0f\u6bb5\u8ddd\u79bb\u4e4b\u540e\u624d\u4f1a\u88ab\u670d\u52a1\u5668\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u800c\u81ea\u5df1\u7684\u5ba2\u6237\u7aef\u56e0\u4e3a\u6709\u6240\u8c13\u9884\u6d4b\uff0c\u6240\u4ee5\u4e0d\u4f1a\u663e\u5f97\u5361\u987f\u3002</li> <li>\u6839\u636e\u7b2c\u56db\u70b9\u7684\u539f\u7406\uff0c\u5728\u7f51\u7edc\u5361\u987f\u65f6\uff0c\u82f1\u96c4\u8054\u76df\u4e2d\u73a9\u5bb6\u5728\u961f\u53cb\u7684\u89c6\u89d2\u91cc\u4e0d\u662f\u5361\u4e86\u5c31\u4e0d\u52a8\u4e86\uff0c\u800c\u662f\u53cd\u590d\u6267\u884c\u6700\u540e\u4e00\u6b21\u8f93\u5165\uff0c\u5e27\u540c\u6b65\u7684\u8bdd\u4f1a\u505c\u6b62\u8fd0\u52a8</li> </ol>"},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/Unity%E7%AE%80%E8%AE%B0/","title":"Unity\u7b80\u8bb0","text":""},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/Unity%E7%AE%80%E8%AE%B0/#unity_1","title":"Unity \u751f\u547d\u671f","text":"<ul> <li>AWake\uff1a\u6709\u4e14\u4ec5\u6709\u4e00\u6b21</li> <li>OnEnable\uff1aenabled\u53d8\u4e3atrue\u53ef\u4ee5\u591a\u6b21</li> <li>Start\uff1aactive&amp;&amp;enabled\u6709\u4e14\u4ec5\u6709\u4e00\u6b21</li> <li>Update\uff1a\u6bcf\u5e27\u66f4\u65b0</li> <li>LateUpdate\uff1a\u5728\u6240\u6709\u811a\u672c\u90fdupdate\u4e4b\u540e\u624d\u8c03\u7528</li> <li>OnDisable\uff1aenabled\u53d8\u4e3afalse\u65f6\u5019\u4f1a\u8c03\u7528</li> <li>OnDestroy\uff1a\u88ab\u9500\u6bc1\u65f6\u4f1a\u8c03\u7528\u3001\u5373!active\u4e5f\u4f1a\u8c03\u7528\uff08\u524d\u63d0\u662f\u8c03\u7528\u8fc7Awake\uff09</li> </ul>"},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/csharp/","title":"C","text":"<p>\u5165\u95e8\u81ea</p> <p>01 \u57fa\u7840\u7c7b\u578b\uff0c\u53d8\u91cf\uff0c\u51fd\u6570_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <ol> <li><code>class</code>:\u90fd\u662f\u5f15\u7528\u7c7b\u578b(\u88ab\u51fd\u6570\u8c03\u7528\u65f6\u76f4\u63a5\u8bbf\u95ee\u5730\u5740\u5bf9\u5e94\u7684\u503c),\u5206\u914d\u5728\u5806</li> </ol> <p><code>csharp    class myclass    {     public int x;        protected double y;        ...    }</code></p> <ol> <li> <p><code>struct</code>:\u503c\u7c7b\u578b(\u88ab\u51fd\u6570\u8c03\u7528\u65f6\u62f7\u8d1d\u4e00\u4e2astruct,\u4e0d\u4f1a\u5f71\u54cd\u539f\u6765\u90a3\u4e2astruct\u7684\u503c),\u5206\u914d\u5728\u6808,\u4e5f\u53ef\u4ee5\u6709\u53d8\u91cf\u548c\u51fd\u6570, <code>ref</code>\u53ef\u4ee5\u4f20\u9012\u5f15\u7528</p> </li> <li> <p><code>interface</code>:\u51fd\u6570\u7684\u96c6\u5408,\u544a\u8bc9\u522b\u4eba\u6709\u54ea\u4e9b\u51fd\u6570\u53ef\u4ee5\u4f9b\u4f7f\u7528</p> </li> </ol> <p><code>csharp    interface A    {     void Func();    }</code></p> <ol> <li><code>\u7ee7\u627f</code>: \u540cc++\u7684\u7ee7\u627f\u601d\u60f3,</li> </ol> <p><code>csharp    class B : A    {     ...    }</code></p> <ol> <li> <p><code>abstract</code>:\u62bd\u8c61\u7c7b,\u4e0d\u53ef\u88ab\u5b9e\u4f8b\u5316,\u56e0\u4e3a\u7531\u90e8\u5206\u672a\u5b9e\u73b0\u7684\u51fd\u6570,\u7b49\u5f85\u5b50\u7c7b\u53bb\u5b9e\u73b0</p> </li> <li> <p><code>\u51fd\u6570\u7684\u8986\u76d6</code>: virtual override \u5b50\u7c7b\u91cd\u5199</p> </li> <li> <p>\u5b50\u7c7b\u53ef\u4ee5\u8c03\u7528protected</p> </li> <li> <p>\u6240\u6709\u7c7b\u578b\u90fd\u6709\u57fa\u7c7b<code>System.Object</code>, <code>ToString()</code>\u51fd\u6570\u53ef\u4ee5\u91cd\u5199</p> </li> <li> <p>\u6cdb\u578b<code>&lt;T&gt;</code>\u53ef\u4ee5\u7528\u4e8e\u7c7b\u6216\u51fd\u6570\uff0c\u4f7f\u7528<code>where</code> \u8fdb\u884c\u7ea6\u675f</p> </li> <li>\u5bb9\u5668:<ul> <li>\u52a8\u6001\u6570\u7ec4: <code>List</code>\u53ef\u52a8\u6001\u589e\u957f</li> <li>\u5b57\u5178: <code>Dictionary</code> Key-Value\u5bf9\uff0c\u7528\u4e8e\u67e5\u8be2</li> <li>Hash\u96c6\u5408: <code>Hashset</code>\u4fdd\u8bc1\u6570\u636e\u7684\u552f\u4e00</li> <li>\u6808:<code>Stack</code> Push Pop \u540e\u8fdb\u5148\u51fa</li> <li>\u961f\u5217: <code>Queue</code> Enqueue Dequeue \u5148\u8fdb\u5148\u51fa</li> </ul> </li> <li>\u51fd\u6570\u6307\u9488: <code>delegate</code>\u53ef\u4ee5\u5b58\u50a8\u51fd\u6570\uff0c\u4f7f\u7528+=-= \u589e\u5220\uff0c\u672c\u8d28\u4e0a\u662f\u76d1\u542c\u8005\u6a21\u5f0f<ul> <li><code>Action&lt;T1T2&gt;</code> \u65e0\u8fd4\u56de\u503c\u7684delegate</li> <li><code>Func&lt;T1,T2,TResult&gt;</code> \u6709\u8fd4\u56de\u503c\u7684delegate\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e3aTResult</li> </ul> </li> <li>\u5c5e\u6027 <code>Attribute</code>,\u53ef\u4ee5\u7ed9\u7c7b\uff0c\u53d8\u91cf\uff0c\u51fd\u6570 \u6dfb\u52a0\u989d\u5916\u7684\u4ee3\u7801\u4fe1\u606f\uff0c\u914d\u5408\u53cd\u5c04\u4f7f\u7528</li> <li>\u53cd\u5c04:\u83b7\u53d6\u4ee3\u7801\u4fe1\u606f\uff0c\u53ef\u4ee5\u83b7\u53d6\u4e00\u4e2a\u7a0b\u5e8f\u96c6\uff0c\u7c7b\uff0c\u51fd\u6570\uff0c\u53d8\u91cf\u7b49\u4fe1\u606f\uff0c\u4f7f\u7528 <code>obiect.GetType()</code>\u6216<code>typeof(T)</code>\u6765\u83b7\u53d6\u7c7b\u578b\u4fe1\u606f</li> <li>\u5b8f:\u6761\u4ef6\u7f16\u8bd1\uff0c\u901a\u8fc7\u5b9a\u4e49\u5b8f\u6765\u5207\u6362\u4ee3\u7801\u5f00\u5173#if #else #endif #define #undef</li> </ol>"},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/%E6%80%8E%E6%A0%B7%E9%83%A8%E7%BD%B2%E5%88%B0Github/","title":"\u600e\u6837\u90e8\u7f72\u5230github","text":""},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/%E6%80%8E%E6%A0%B7%E9%83%A8%E7%BD%B2%E5%88%B0Github/#github","title":"\u600e\u6837\u90e8\u7f72\u5230Github","text":""},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/%E6%80%8E%E6%A0%B7%E9%83%A8%E7%BD%B2%E5%88%B0Github/#_1","title":"\u4ece\u5934\u5f00\u59cb","text":"<ol> <li> <p>\u65b0\u5efa\u6587\u4ef6\u5939  </p> </li> <li> <p>\u7528vscode\u6253\u5f00\u65b0\u6587\u4ef6\u5939  </p> </li> <li> <p>\u5728vscode\u91cc\u65b0\u5efa\u7ec8\u7aef  </p> </li> <li> <p>\u4f9d\u6b21\u8f93\u5165\uff1a</p> </li> </ol> <p><code>py -m venv venv      venv\\Scripts\\activate</code></p> <p>\u8bbe\u7f6e\u865a\u62df\u73af\u5883\u5e76\u4e14\u6fc0\u6d3b\u865a\u62df\u73af\u5883(\u76ee\u7684\u662f\u4e0e\u7cfb\u7edf\u73af\u5883\u5206\u5f00) </p> <ol> <li><code>pip install mkdocs-material</code></li> </ol> <p>(\u53ea\u6709\u7b2c\u4e00\u6b21\u8981\u505a)  </p> <ol> <li> <p><code>mkdocs new mysite</code></p> <p>(\u8fd9\u91cc\u7684mysite\u53ef\u4ee5\u662f\u4efb\u4f55\u540d\u5b57) </p> </li> <li> <p><code>cd mysite</code></p> </li> <li> <p><code>mkdocs serve</code></p> </li> </ol> <p>(\u8fd9\u65f6\u5019\u5df2\u7ecf\u6253\u5f00\u4e86\u4e00\u4e2a\u7f51\u9875\uff0c\u968f\u7740\u4f60vscode\u91cc\u7684\u6539\u52a8\uff0c\u7f51\u9875\u4f1a\u5b9e\u65f6\u5237\u65b0\u6539\u53d8) </p> <ol> <li>\u63a5\u4e0b\u6765\u5219\u662f\u6839\u636eMkdocs\u4f7f\u7528\u8bf4\u660e\u7b80\u5355\u5730\u5728<code>mkdocs.yml</code>\u4e2d\u7b80\u5355\u5730\u8bbe\u7f6e\u5373\u53ef\uff0c\u8fd9\u65f6\uff0c\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u5c31\u5efa\u597d\u4e86</li> </ol>"},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/%E6%80%8E%E6%A0%B7%E9%83%A8%E7%BD%B2%E5%88%B0Github/#_2","title":"\u7ef4\u62a4\u7f51\u9875","text":"<ol> <li> <p>\u4f7f\u7528typora\u505a\u597d\u7b14\u8bb0  </p> </li> <li> <p>\u5c06\u7b14\u8bb0\u590d\u5236\u5230<code>root</code>\u6587\u4ef6\u5939\u4e0b\u5bf9\u5e94\u7684\u76ee\u5f55\u4e2d\uff0c\u7f16\u53f7  </p> </li> <li> <p>\u5728<code>mkdocs.yml</code>\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a  </p> </li> </ol> <p><code>nav:        - \u4e3b\u9875:          - index.md        - \u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1:          - \u7b2c\u4e00\u7ae0: \u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1/20230202.md          - \u7b2c\u4e8c\u7ae0: ...</code></p> <ol> <li>\u8f93\u5165\u4ee3\u7801\u5982\u4e0b\uff1a</li> </ol> <p><code>git init      git add .      git commit -m \"update\"//\u53ef\u4ee5\u4e0d\u53ebupdate    git remote add origin https://github.com/Tianjiangyigeyi/note.git      git push -u origin master</code></p> <ol> <li>\u8fdb\u5165<code>mysite</code>\u6587\u4ef6\u5939  </li> </ol> <p><code>cd mysite</code></p> <ol> <li>\u8f93\u5165\u4ee3\u7801\u5982\u4e0b\uff1a  </li> </ol> <p><code>mkdocs gh-deploy</code></p> <ol> <li>\u7b49\u5f8530s\u5de6\u53f3\uff0c\u7f51\u9875\u5df2\u6210\u529f\u66f4\u65b0.https://tianjiangyigeyi.github.io/note/  </li> </ol>"},{"location":"%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/%E6%80%8E%E6%A0%B7%E9%83%A8%E7%BD%B2%E5%88%B0Github/#_3","title":"\u53ef\u80fd\u7528\u5230\u7684\u7f51\u7ad9","text":"<ul> <li>Mkdocs\u4f7f\u7528\u8bf4\u660e </li> <li> <p>Markdown\u5b98\u65b9\u6559\u7a0b </p> </li> <li> <p>Latex\u6570\u5b66\u516c\u5f0f\u8bed\u6cd5</p> </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/","title":"GAMES101","text":"<p>\u6211\u7684\u56fe\u5f62\u5b66\u542f\u8499,\u4e16\u754c\u4e0a\u6700\u597d\u7684\u56fe\u5f62\u5b66\u6559\u7a0b\u4e4b\u4e00 !</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#mvpmodel-view-projection","title":"MVP(model-view-projection)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#homogenous-coordinates","title":"\u9f50\u6b21\u5750\u6807(Homogenous Coordinates)","text":"<ul> <li>\\(3D\\  point=(x,y,z,1)^T\\)</li> <li>\\(3D\\  vector=(x,y,z,0)^T\\)</li> <li>\\((x,y,z,w)^T=(x/w,y/w,z/w,1)^T\\)</li> </ul> <p>\u76ee\u7684\u662f\u8ba9Translate\u64cd\u4f5c\u4e0erotation/scale\u7b49\u64cd\u4f5c\u4e0d\u5272\u88c2</p> <ul> <li>Think about how to take a photo</li> <li>Find a good place and arrange people(model transformation)</li> <li>Find a good \"angle\" to put the camera(view transformation)</li> <li>Cheese!(projection transformation)</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#model","title":"model","text":"<p>\u5c06\u5bf9\u8c61\u4ece\u5c40\u90e8\u5750\u6807\u7cfb(\u5bf9\u8c61\u5750\u6807\u7cfb)\u53d8\u6362\u5230\u4e16\u754c\u5750\u6807\u7cfb</p> <p>\u7b80\u5355\u901a\u4fd7\u6765\u8bb2\uff0c\u5c31\u662f\u5c06\u573a\u666f\u4e2d\u7684\u6a21\u578b\u6446\u597d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u53eb\u6a21\u578b\u53d8\u6362\u3002\u6a21\u578b\u53d8\u6362\u4e0d\u540c\u987a\u5e8f\u6709\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u5176\u5b9e\u5c31\u662f\u56e0\u4e3a\u77e9\u9635\u76f8\u4e58\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4f46\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u5bf9\u5e94\u540c\u4e00\u4e2a\u590d\u5408\u53d8\u6362\uff0c\u53ef\u4ee5\u5148\u5f97\u51fa\u5176\u4e2d\u7684\u57fa\u7840\u53d8\u6362\u7684\u77e9\u9635\u4e58\u79ef\uff0c\u518d\u4e0e\u8f93\u5165\u5411\u91cf\u76f8\u4e58\u3002\u4e00\u822c\u5730\uff0c\u5148\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0c\u518d\u8fdb\u884c\u975e\u7ebf\u6027\u53d8\u6362\u3002\u6a21\u578b\u53d8\u6362\u6709\u5982\u4e0b\u6240\u5217\u5f62\u5f0f\uff1a</p> <ol> <li>\u7f29\u653e(Scale)</li> </ol> <p></p> <ol> <li>\u9519\u5207(shear)</li> </ol> <p></p> <ol> <li>\u65cb\u8f6c(Rotation)</li> </ol> <p></p> <ol> <li>\u5e73\u79fb(Translation)</li> </ol> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#view","title":"view","text":"<ul> <li>Define the camera first</li> <li>Position (\u76f8\u673a\u7684\u4f4d\u7f6e)</li> <li>Look-at / gaze direction (\u76f8\u673a\u7684\u671d\u5411)</li> <li>Up direction (\u76f8\u673a\u503e\u659c\u7684\u89d2\u5ea6)</li> </ul> <p>\u5047\u8bbe\u4f60\u6b63\u5728\u4e00\u8f86\u706b\u8f66\u4e0a\u62cd\u7167,\u8f66\u53a2\u548c\u4f60\u540c\u65f6\u8fd0\u52a8,\u4f60\u62cd\u51fa\u6765\u7684\u7167\u7247\u662f\u4e00\u6837\u7684,\u8fd9\u5c31\u8bf4\u660e\u4e86\u76f8\u673a\u62cd\u51fa\u6765\u7684\u753b\u9762\u662f\u76f8\u5bf9\u7684</p> <ul> <li>\u6211\u4eec\u53ef\u4ee5\u7ea6\u5b9a\u4fd7\u6210\u5730\u5c06\u76f8\u673a\u653e\u5728\\((0,0,0)\\)\u7684\u4f4d\u7f6e\u4e0a,\u5e76\u4e14\u8ba9\u76f8\u673a\u7684\u671d\u5411\\(-z\\)\u65b9\u5411, up at \\(y\\),\u540c\u65f6transform the objects along with the camera.</li> </ul> <p>\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u6784\u60f3,\u6211\u4eec\u9700\u8981\u5c06\u76f8\u673a\u5148\u5e73\u79fb\u5230\u539f\u70b9,\u518d\u65cb\u8f6c\u5230\u6b63\u786e\u7684\u65b9\u5411</p> <p>\\(\\(M_{view} = R_{view}T_{view}\\)\\)</p> <p></p> <ul> <li> <p>summary</p> </li> <li> <p>\u7531\u4e8e\u6211\u4eec\u5c06\u76f8\u673a\u548c\u7269\u4f53\u540c\u65f6\u5e94\u7528\u76f8\u540c\u7684\u53d8\u6362,\u7269\u4f53\u4e5f\u4f1a\u4f4d\u4e8e\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a</p> </li> <li> <p>\u6a21\u578b\u53d8\u6362\u548c\u89c6\u56fe\u53d8\u6362\u7684\u7ed3\u679c\u662f\u5c06\u4e09\u7ef4\u4e16\u754ctransfer into \u76f8\u673a\u7cfb\u4e0b,\u5b83\u4eec\u901a\u5e38\u88ab\u5408\u79f0\u4e3a\u6a21\u578b\u89c6\u56fe\u53d8\u6362</p> </li> <li>\u4e0b\u4e00\u6b65\u5c31\u662f\u5e94\u7528projection transformation\u5c06\u76f8\u673a\u5750\u6807\u7cfb(3\u7ef4)\u4e0b\u7684\u5bf9\u8c61\u8f6c\u6362\u5230\u5c4f\u5e55\u5750\u6807(2\u7ef4)\u4e0a</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#projection","title":"projection","text":"<ul> <li>\u5206\u4e3a\u4e24\u79cd:\u6b63\u4ea4\u6295\u5f71(Orthographic projection)\u548c\u900f\u89c6\u6295\u5f71(Perspective projection),\u900f\u89c6\u6295\u5f71\u4f1a\u8fd1\u5927\u8fdc\u5c0f,\u800c\u6b63\u4ea4\u6295\u5f71\u4e0d\u4f1a</li> </ul> <p>\u6b63\u4ea4\u6295\u5f71\u53ef\u4ee5\u770b\u6210\u662f\u76f8\u673a\u4f4d\u7f6e\u65e0\u9650\u8fdc\u7684\u900f\u89c6\u6295\u5f71</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#orthographic-projection","title":"Orthographic Projection","text":"<p>\u5c06\u4e00\u4e2a\u7a7a\u95f4\u4e2d\u7684\u7acb\u65b9\u4f53(\u81ea\u5df1\u89c4\u5b9a\u7684\u8981\u4f5c\u7528\u7684\u8303\u56f4)\u7684\u4e2d\u5fc3\u5148\u5e73\u79fb\u5230\u539f\u70b9\u518d\u7f29\u653e\u5230\u4e00\u4e2a2*2*2\u7684\u4e00\u4e2a\u6b63\u65b9\u4f53\u4e2d,\u5728\u6b21\u4e4b\u540e\u5c06\u8981\u5e94\u7528\u89c6\u53e3\u53d8\u6362</p> \\[M_{ortho} = \\begin{bmatrix}  \\frac{2}{r-l}  &amp; 0 &amp; 0 &amp;0 \\\\  0 &amp; \\frac{2}{t-b}  &amp;  0 &amp; 0\\\\  0 &amp; 0 &amp; \\frac{2}{n-f}  &amp; 0\\\\  0 &amp; 0 &amp; 0 &amp;1 \\end{bmatrix}\\begin{bmatrix} 1  &amp; 0 &amp; 0 &amp; -\\frac{r+l}{2} \\\\  0 &amp; 1 &amp; 0 &amp; -\\frac{t+b}{2} \\\\  0 &amp; 0 &amp; 1 &amp;-\\frac{n+f}{2}  \\\\   0&amp;0  &amp; 0 &amp;1 \\end{bmatrix}\\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#perspective-projection","title":"Perspective Projection","text":"\\[M_{persp} = M_{ortho}M_{persp \\rightarrow ortho}\\] \\[M_{persp\\rightarrow ortho }=\\begin{bmatrix}  n &amp; 0 &amp; 0 &amp;0 \\\\  0 &amp; n &amp; 0 &amp;0 \\\\  0 &amp; 0 &amp; n+f &amp; -nf\\\\  0 &amp; 0 &amp; 1 &amp;0 \\end{bmatrix}\\] <p>\u5373\u5148\u505a\u4e00\u4e2a\u900f\u89c6\u5230\u6b63\u4ea4\u7684\u77e9\u9635,\u518d\u5e94\u7528\u6b63\u4ea4\u53d8\u6362</p> <p>\u63a8\u5bfc:</p> <p>\u8bbe\\(M_{persp\\rightarrow ortho }=\\begin{bmatrix}  n &amp; 0 &amp; 0 &amp;0 \\\\  0 &amp; n &amp; 0 &amp;0 \\\\  ? &amp; ? &amp; ? &amp; ?\\\\  0 &amp; 0 &amp; 1 &amp;0 \\end{bmatrix}\\)</p> <p>\\(M_{persp\\rightarrow ortho }(x,y,z,1)^T=(nx,ny,unkown,z)^T\\)</p> <p>\u7531\u4e8e\u4efb\u4f55\u8fd1\u5e73\u9762\u4e0a\u7684\u7269\u4f53\u90fd\u4e0d\u4f1a\u6539\u53d8</p> <p>\u6545\u4ee4\\(z=n\\)\u5219\\(M_{persp\\rightarrow ortho }(x,y,n,1)^T=(x,y,n,1)=(nx,ny,n^2,n)^T\\)</p> <p>\u5219\\(M_{persp\\rightarrow ortho }\\)\u7b2c\u4e09\u884c\u4e3a\\((0,0,A,B)\\)\u4e14\\(\\begin{pmatrix} 0 &amp; 0 &amp; A &amp;B \\end{pmatrix}\\begin{pmatrix} x \\\\ y \\\\ n \\\\ 1 \\end{pmatrix}=n^2\\)</p> <p>\u53ef\u77e5:\\(An+B=n^2\\)</p> <p>\u53c8\u56e0\u4e3a\u8fdc\u5e73\u9762\u4e0a\u4e2d\u5fc3\u70b9\\((0,0,f,1)\\)\u4e0d\u53d8</p> <p>\u53ef\u77e5:\\(\\begin{pmatrix}  n &amp; 0 &amp; 0 &amp;0 \\\\  0 &amp; n &amp; 0 &amp;0 \\\\  0 &amp; 0 &amp; A &amp; B\\\\  0 &amp; 0 &amp; 1 &amp;0 \\end{pmatrix}\\begin{pmatrix} 0 \\\\ 0 \\\\  f\\\\ 1 \\end{pmatrix}=\\begin{pmatrix} 0 \\\\  0\\\\  Af+b\\\\ f \\end{pmatrix}= \\begin{pmatrix} 0 \\\\  0\\\\  f^2\\\\ f \\end{pmatrix}\\Rightarrow Af+B=f^2\\)</p> <p>\u89e3\u5f97:\\(A=n+f,B=-nf\\)</p> <p>\u5373\\(M_{persp\\rightarrow ortho }=\\begin{bmatrix}  n &amp; 0 &amp; 0 &amp;0 \\\\  0 &amp; n &amp; 0 &amp;0 \\\\  0 &amp; 0 &amp; n+f &amp; -nf\\\\  0 &amp; 0 &amp; 1 &amp;0 \\end{bmatrix}\\)</p> <ul> <li>A interesting question: what if \\(z = \\frac{n+f}{2}\\)? will it be near or far?</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#rasterize","title":"\u5149\u6805\u5316(Rasterize)","text":"<p>\u5bf9\u8c61\u7ecf\u8fc7MVP\u53d8\u5316\u540e\uff0c\u9700\u8981\u8fdb\u884c\u5149\u6805\u5316\uff0c\u5373\u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u7acb\u65b9\u4f53\u6295\u5c04\u5230\u5c4f\u5e55\u7a7a\u95f4</p> <p>\u5c4f\u5e55\u7a7a\u95f4\u7684\u57fa\u672c\u5355\u4f4d\uff1a\u50cf\u7d20</p> <ul> <li> <p>\u89c6\u53e3\u53d8\u6362(viewport)\uff1a</p> </li> <li> <p>Irrelevant to z</p> </li> <li> <p>Transform in xy plane: \\([-1,1]^2\\) to \\([0,width]\\times[0,height]\\)</p> </li> <li> <p>Viewport transform matrix:</p> \\[M_{viewport}=\\begin{pmatrix}  \\frac{width}{2}  &amp; 0 &amp; 0 &amp; \\frac{width}{2} \\\\  0 &amp; \\frac{height}{2}  &amp; 0 &amp;\\frac{height}{2}  \\\\  0 &amp; 0 &amp; 1 &amp; 0\\\\   0&amp; 0 &amp; 0 &amp;1 \\end{pmatrix}\\] </li> <li> <p>\u91c7\u6837\uff1a\u5229\u7528\u50cf\u7d20\u4e2d\u5fc3\u5f97\u5230\u50cf\u7d20\u7684\u5c5e\u6027</p> </li> <li> <p>\u5982\u679c\u91c7\u6837\u7387\u76f8\u5bf9\u4e8e\u50cf\u7d20\u6765\u8bb2\u4e0d\u591f\u9ad8\uff0c\u5219\u4f1a\u53d1\u751f\u8d70\u6837(Aliasing)\uff0c\u5177\u4f53\u8868\u73b0\u4e3a\u952f\u9f7f(Jaggies)</p> <p></p> </li> <li> <p>\u5224\u65ad\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8\uff0c\\(P_1P_2\\times P_1Q\\) \u7684\u6b63\u8d1f\u53ef\u4ee5\u53cd\u6620\u70b9Q\u5728\u8fb9P1P2\u7684\u5de6\u4fa7\u6216\u662f\u53f3\u4fa7\uff0c\u4e09\u6761\u8fb9\u90fd\u5e94\u7528\u4e0a\u8ff0\u64cd\u4f5c\u5373\u53ef\u77e5\u9053</p> </li> </ul> <p>\u53c9\u4e58\uff1a</p> \\[a \\times b=\\left|\\begin{array}{lll} \\mathrm{i} &amp; \\mathrm{j} &amp; \\mathrm{k} \\\\ x_{1} &amp; y_{1} &amp; z_{1} \\\\ x_{2} &amp; y_{2} &amp; z_{2} \\end{array}\\right|=\\left(y_{1} z_{2}-y_{2} z_{1}\\right) i+\\left(z_{1} x_{2}-z_{2} x_{1}\\right) j+\\left(x_{1} y_{2}-x_{2} y_{1}\\right) k\\] <ul> <li>Bounding box\uff1a\u5305\u56f4\u76d2\uff0c\u53ea\u6709\u5305\u56f4\u76d2\u91cc\u7684\u50cf\u7d20\u624d\u9700\u8981\u5149\u6805\u5316\uff0c\u5305\u56f4\u76d2\u4e4b\u5916\u7684\u50cf\u7d20\u592a\u8fdc\u4e86\uff01</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#anti-aliasing-z-buffer","title":"\u53cd\u8d70\u6837&amp;\u6df1\u5ea6\u7f13\u5b58(Anti-Aliasing &amp; z-buffer)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_1","title":"\u53cd\u8d70\u6837","text":"<ul> <li> <p>\u91c7\u6837\u51fa\u73b0\u7455\u75b5(artifacts)\u7684\u539f\u56e0\u662f\u91c7\u6837\u7684\u9891\u7387\u8ddf\u4e0d\u4e0a\u4fe1\u53f7\u7684\u9891\u7387</p> </li> <li> <p>Anti-Aliasing:</p> </li> <li>Pre-filter:\u5bf9\u539f\u59cb\u4fe1\u53f7\u8fdb\u884c\u4e00\u4e2a\u6a21\u7cca(\u6ee4\u6ce2)(\u5377\u79ef) </li> <li> <p>\u63d0\u9ad8\u91c7\u6837\u7387(reduce aliasing error not anti-aliasing)</p> </li> <li> <p>\u5377\u79ef:</p> </li> </ul> <p></p> <ul> <li> <p>MSAA(\u591a\u91cd\u91c7\u6837\u53cd\u8d70\u6837 Multisample anti aliasing)</p> </li> <li> <p>\u628a\u50cf\u7d20\u5185\u90e8\u5206\u4e3a\\(N\\times N\\)\u4e2a\u70b9, \u5224\u65ad\u8fd9\u4e9b\u70b9\u6709\u591a\u5c11\u4e2a\u662f\u4f4d\u4e8e\u4e09\u89d2\u5f62\u5185\u7684, \u6839\u636e\u6bd4\u4f8b\u4e3a\u8be5\u50cf\u7d20\u7740\u8272</p> </li> <li>Average the \\(N\\times N\\) samples \"inside\" each pixel.\u662f\u4e00\u79cd\"\u6a21\u7cca\"\u7684\u65b9\u6cd5</li> <li>What's the cost of MSAA:\u589e\u52a0\u4e86\u8ba1\u7b97\u91cf,\u7406\u8bba\u4e0a\u4f1a\u589e\u52a0\\(N\\times N\\)\u8ba1\u7b97\u91cf,\u5b9e\u9645\u4e0a\u5de5\u4e1a\u754c\u4f1a\u53d6\u70b9\u5e76\u4e0d\u4f1a\u8fd9\u4e48\u89c4\u5219,\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u589e\u52a0\u5982\u6b64\u5927\u7684\u8ba1\u7b97\u91cf</li> </ul> <p>SSAA(\u8d85\u91c7\u6837\u53cd\u8d70\u6837 Super Sampling Anti Aliasing)</p> <p>MSAA\u662fSSAA\u7684\u4f18\u5316, MSAA\u4e0eSSAA\u7684\u533a\u522b\u5728\u4e8e\u50cf\u7d20\u7740\u8272\u5668\uff08Pixel Shader\uff09\u7684\u8fd0\u884c\u6b21\u6570\u3002</p> <ul> <li> <p>\u8d85\u5206\u8fa8\u7387:</p> </li> <li> <p>\u672c\u8d28\u4e0a\u662f\u5728\u5149\u6805\u5316\u4e4b\u540e\u7684\u7ed3\u679c\u56fe\u5e94\u7528, \u4e00\u822c\u7528\u4e8e\u5c4f\u5e55\u5206\u8fa8\u7387\u592a\u9ad8\u800c\u56fe\u50cf\u5206\u8fa8\u7387\u8f83\u4f4e, \u901a\u8fc7\"\u731c\"\u7684\u65b9\u5f0f\u6765\u63d0\u9ad8\u5206\u8fa8\u7387, \u800c\u8fdb\u884c\"\u731c\"\u6700\u597d\u7684\u65b9\u5f0f\u5c31\u662f\u6df1\u5ea6\u5b66\u4e60, \u4e8e\u662f\u6709\u4e86DLSS</p> </li> <li>From low resolution to high resolution</li> <li>Essentially still \"not enough samples\" problem</li> <li>DLSS(Deep Learning Super Sampling)</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_2","title":"\u6df1\u5ea6\u7f13\u5b58","text":"<ul> <li> <p>\u753b\u5bb6\u7b97\u6cd5: overwrite</p> </li> <li> <p>\u4e24\u4e2a\u7f13\u51b2: frame-buffer/depth-buffer</p> </li> <li> <p>z-buffer Algorithm</p> </li> </ul> <p>```pseudocode   Initialize depth buffer to infinity</p> <p>During rasterization:</p> <p>for(each triangle T)     for(each sample (x,y,z) in T)         if(z &lt; zbuffer[x,y])            //closest sample so far             framebuffer[x,y] = rgb;     //update color             zbuffer[x,y] = z;           //update depth           else             ;                           //do nothing, this sample is occluded   ```</p> <p>z-buffer \u5904\u7406\u4e0d\u4e86\u900f\u660e\u7269\u4f53!</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#shading","title":"\u7740\u8272(shading)","text":"<p>Definition:\u5bf9\u4e0d\u540c\u7269\u4f53\u5e94\u7528\u4e0d\u540c\u7684\u6750\u8d28(Texture)</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#blinn-phong-reflectance-model","title":"Blinn-Phong Reflectance Model(\u5e03\u6797\u51af\u53cd\u5c04\u6a21\u578b)","text":"<p>\u5e03\u6797-\u51af\u53cd\u5c04\u6a21\u578b\u89c4\u5b9a\uff0c\u7269\u4f53\u5177\u6709\u4e09\u79cd\u53cd\u5c04\uff1a\u9ad8\u5149(Specular highlights)\u3001\u6f2b\u53cd\u5c04(Diffuse reflection)\u3001\u73af\u5883\u5149(Ambient lighting)</p> <p></p> <p>\u8fd9\u91cc\u6ce8\u610f\uff0c\u7740\u8272\u2260\u9634\u5f71\uff0c\u5982\u4e0b\u56fe\u6211\u4eec\u53ea\u8003\u8651\u4e86\u7269\u4f53\u7684\u660e\u6697\u5173\u7cfb\u5e76\u6ca1\u6709\u8003\u8651\u7269\u4f53\u4ea7\u751f\u7684\u9634\u5f71\u3002\u9634\u5f71\u4f1a\u6709\u4e13\u95e8\u7684\u8fc7\u7a0b\u8fdb\u884c\u5904\u7406\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_3","title":"\u9ad8\u5149&amp;\u6f2b\u53cd\u5c04","text":"<p>\u9ad8\u5149:</p> <ul> <li> <p>\u6211\u4eec\u53ea\u53ef\u4ee5\u4ece\u955c\u9762\u65b9\u5411\u770b\u5230,\u5f15\u5165\u534a\u7a0b\u5411\u91cf:\u5373\u5f53\u534a\u7a0b\u5411\u91cf\u4e0e\u6cd5\u7ebf\u65b9\u5411\u5f88\u63a5\u8fd1,\u4e5f\u53ef\u4ee5\u770b\u5230\u9ad8\u5149</p> </li> <li> <p>\u534a\u7a0b\u5411\u91cfh: \\(\\mathbf{h}=\\operatorname{bisector}(\\mathbf{v}, \\mathbf{l})=\\frac{\\mathbf{v}+\\mathbf{l}}{\\|\\mathbf{v}+\\mathbf{l}\\|}\\)(I\u4e3a\u5165\u5c04\u65b9\u5411\u5411\u91cf,V\u4e3a\u53cd\u5c04\u65b9\u5411\u5411\u91cf)</p> </li> <li> <p>\\(L_s=k_s(I/r^2)max(0,cos\\alpha)^p=k_s(I/r^2)max(0,n\\cdot h)^p\\)</p> </li> <li> <p>\u5176\u4e2d\\(k_s\\)\u662f\u955c\u9762\u53cd\u5c04\u7cfb\u6570\uff0c\u901a\u5e38\u4e3a\u767d\u8272\u3002\u5bf9\u4e8e\u955c\u9762\u53cd\u5c04\u5e03\u6797-\u51af\u53cd\u5c04\u6a21\u578b\u4e0d\u8003\u8651\u955c\u9762\u53cd\u5c04\u7684\u70b9\u5438\u6536\u4e86\u591a\u5c11\u80fd\u91cf\u3002\u6211\u4eec\u8fd8\u6ce8\u610f\u5230\uff0c\u5728\u53cd\u5e94\\(n,h\\)\u5939\u89d2\u7684\u65f6\u5019\u6211\u4eec\u52a0\u5165\u4e86\u4e00\u4e2a\u6307\u6570\\(p\\)\u3002\u8fd9\u662f\u56e0\u4e3a\u4f59\u5f26\u503c\u5bf9\u4e8e\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u5939\u89d2\u7684\u5927\u5c0f\u201c\u5bb9\u5fcd\u5ea6\u201d\u592a\u5927\uff0c\u5982\u4e0b\u56fe\u6700\u5de6\u8fb9\u6240\u793a\uff0c\u5f53$ \\alpha=45\u00b0\\(\u7684\u65f6\u5019cos\u8fd8\u662f\u6709\u8f83\u5927\u7684\u503c\u3002\u5982\u679c\u6211\u4eec\u5355\u5355\u4f7f\u7528\u4f59\u5f26\u503c\u6765\u8868\u793a\u534a\u7a0b\u5411\u91cf\\) \\bold{h}\\(\u4e0e\u6cd5\u7ebf\u65b9\u5411\\)\\bold{n}\\(\u7684\u63a5\u8fd1\u7a0b\u5ea6\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u5c06\u4f1a\u5f97\u5230\u5f88\u5927\u4e00\u7247\u9ad8\u5149\uff08\\)30\u00b0\\(\u751a\u81f3\\)40\u00b0\\(\u65f6\u4ecd\u4f1a\u770b\u5230\u9ad8\u5149\uff09\u3002\u6240\u4ee5\u6211\u4eec\u52a0\u5165\u4e00\u4e2a\u6307\u6570\\)p\\(\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\\) p=64\\(\u65f6\uff08\u6700\u53f3\u4fa7\u56fe\uff09\\) \\cos20\u00b0$\u5df2\u7ecf\u662f\u5f88\u5c0f\u7684\u503c\u4e86\u3002   </p> </li> </ul> <p>\u6f2b\u53cd\u5c04:</p> <ul> <li> <p>\u5728\u5e03\u6797-\u51af\u53cd\u5c04\u6a21\u578b\u4e2d\uff0c\u6f2b\u53cd\u5c04\u8868\u793a\uff0c\u5f53\u5149\u7167\u5728\u7269\u4f53\u4e0a\uff0c\u7269\u4f53\u4f1a\u5c06\u5149\u7ebf\u53cd\u5c04\u5230\u56db\u9762\u516b\u65b9\u53bb\u3002\u4f46\u662f\uff0c\u5f53\u7269\u4f53\u4e0e\u5149\u7167\u89d2\u5ea6\u53d1\u751f\u53d8\u5316\u65f6\u7269\u4f53\u8868\u9762\u7684\u9634\u5f71\u5173\u7cfb\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u5c06\u5149\u770b\u505a\u662f\u4e00\u79cd\u80fd\u91cf\uff0c\u90a3\u4e48\u7269\u4f53\u8868\u9762\u6cd5\u7ebf\u548c\u5149\u7167\u65b9\u5411\u7684\u89d2\u5ea6\u8d8a\u5927\u5219\u7269\u4f53\u5355\u4f4d\u9762\u79ef\u63a5\u6536\u5230\u7684\u80fd\u91cf\u5c31\u8d8a\u5c11\uff0c\u4e5f\u5c31\u662f\u8bf4\u7269\u4f53\u8868\u9762\u5c06\u770b\u8d77\u6765\u66f4\u6697\u3002\u8fd9\u5c31\u662f\u5170\u4f2f\u7279\u4f59\u5f26\u6cd5\u5219(Lambert\u2019s cosine law)\uff0c\u7528\u516c\u5f0f\u8868\u8fbe\u4e3a$ \\cos \\theta=\\bold{I}\\cdot\\bold{n}\\(\u8d8a\u5927\uff08\u5373\u89d2\u5ea6\\)\\theta$\u8d8a\u5c0f\uff09\u7269\u4f53\u5355\u4f4d\u9762\u79ef\u63a5\u6536\u5230\u7684\u80fd\u91cf\u5c31\u8d8a\u5927\u3002</p> </li> <li> <p>\u7531\u4e8e\u5149\u5728\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u4f1a\u6709\u80fd\u91cf\u635f\u5931\uff0c\u6211\u4eec\u89c4\u5b9a\u67d0\u4e00\u70b9\u5149\u6e90\u5728\u534a\u5f84\\(r\\)\u5904\u7684\u80fd\u91cf\u4e3a$ I/r^2\\(\uff0c\u5176\u4e2d\\)I$\u4e3a\u70b9\u5149\u6e90\u5728\u81ea\u8eab\u5904\u7684\u80fd\u91cf\u3002\u73b0\u5728\u6709\u4e86\u5149\u6e90\u5230\u7269\u4f53\u67d0\u4e00\u70b9\u7684\u603b\u80fd\u91cf\u503c\u548c\u7269\u4f53\u63a5\u6536\u5230\u7684\u80fd\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba1\u7b97\u6f2b\u53cd\u5c04\u7684\u4eae\u5ea6\u4e86</p> </li> </ul> <p>$$ L_d=k_d(I/r^2)\\max(0,\\bold{n}\\cdot\\bold{I})$$</p> <p>\u5f0f\u4e2d$ k_d    \\(\u662f\u6f2b\u53cd\u5c04\u7cfb\u6570\uff08\u989c\u8272\uff09\uff0c\\) I/r^2\\(\u662f\u5230\u8fbe\u67d0\u4e00\u70b9\u7684\u80fd\u91cf\uff0c\\) \\max(0,\\bold{n}\\cdot\\bold{I})$\u8868\u793a\u7269\u4f53\u63a5\u6536\u4e86\u591a\u5c11\u80fd\u91cf\u3002\u7531\u4e8e\u6f2b\u53cd\u5c04\u662f\u7269\u4f53\u5411\u56db\u9762\u516b\u65b9\u53cd\u5c04\u5149\u7ebf\u7684\uff0c\u6240\u4ee5\u65e0\u8bba\u6211\u4eec\u5728\u54ea\u4e2a\u89d2\u5ea6\u53bb\u89c2\u5bdf\u4ed6\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\u3002   </p> <p>\u8fd9\u91cc\u53c2\u8003\u4e86\u535a\u5ba2:(16\u6761\u6d88\u606f) \u73b0\u4ee3\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b14\u8bb0\uff08\u4e94\uff09\u2014\u2014\u6df1\u5ea6\u6d4b\u8bd5\u3001\u7740\u8272_\u56fe\u5f62\u5b66\u6df1\u5ea6\u6d4b\u8bd5_Feyily\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_4","title":"\u7740\u8272\u9891\u7387","text":"<p>\u9010\u9762(flat shading): \u5bf9\u6bcf\u4e2a\u9762\u6c42\u6cd5\u7ebf, \u8fdb\u884c\u7740\u8272</p> <p>\u9010\u9876\u70b9(Gouraud shading): \u5bf9\u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u6c42\u6cd5\u7ebf, \u4e09\u89d2\u5f62\u5185\u90e8\u901a\u8fc7\u5dee\u503c\u7684\u65b9\u5f0f\u7740\u8272</p> <p>\u628a\u9876\u70b9\u5468\u56f4\u7684\u6240\u6709\u9762\u7684\u6cd5\u7ebf\u6c42\u5e73\u5747\u5373\u662f\u9876\u70b9\u7684\u6cd5\u7ebf</p> <p>\u9010\u50cf\u7d20(Phong shading): \u5bf9\u6cd5\u7ebf\u503c\u505a\u63d2\u503c\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u505aShading</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#shadow-mapping","title":"shadow mapping","text":"<p>\u5149\u6805\u5316\u4e0b\u5bf9\u5168\u5c40\u5149\u7ebf\u4f20\u8f93\u3001\u9634\u5f71\u7684\u5904\u7406\u5341\u5206\u9ebb\u70e6\u3002</p> <ul> <li>draw shadows using rasterization</li> <li>An Image-space Algorithm</li> <li>\u4e0d\u9700\u8981\u573a\u666f\u7684\u51e0\u4f55\u4fe1\u606f</li> <li>\u6709\u8d70\u6837\u73b0\u8c61</li> <li>\u601d\u60f3\uff1athe points NOT in shadow must be seen both by the light and by the camera</li> </ul> <p>\u6b65\u9aa4\uff1a</p> <ul> <li>Pass 1: Render from Light</li> <li>Depth image from light source \u2192 shadow map</li> <li>Pass 2A: Render from Eye</li> <li>Standard image (with depth) from eye</li> <li>Pass 2B: Project to light</li> <li>Project visible points in eye view back to light source<ul> <li>visible to light source \u2192 color</li> <li>blocked \u2192 shadow</li> </ul> </li> </ul> <p>\u611f\u89c9\u6bcf\u4e2a\u5149\u6e90\u5bf9\u6bcf\u4e2a\u9759\u6001\u573a\u666f\u6709\u4e00\u4e2ashadow map</p> <p>\u5e94\u7528\uff1a</p> <ul> <li>\u51e0\u4e4e\u6240\u67093D\u6e38\u620f</li> </ul> <p>\u95ee\u9898\uff1a</p> <ul> <li> <p>\u8d70\u6837\u3001\u5206\u8fa8\u7387</p> </li> <li> <p>\u6570\u503c\u7cbe\u5ea6\u95ee\u9898</p> </li> <li> <p>Involves equality comparison of \ufb02oating point depth values means issues of scale, bias, tolerance</p> </li> <li> <p>\u53ea\u80fd\u70b9\u5149\u6e90\u3001\u786c\u9634\u5f71</p> </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#texture","title":"\u7eb9\u7406(texture)","text":"<ul> <li>uv: uv\u90fd\u57280~1\u4e4b\u95f4</li> <li>\u8bbe\u8ba1\u7eb9\u7406\u65f6\u6700\u597d\u80fd\u4e0a\u4e0b\u5de6\u53f3\u65e0\u7f1d\u8854\u63a5</li> </ul> <p>\u7eb9\u7406\u592a\u5c0f\u600e\u4e48\u529e\u2192\u63d2\u503c</p> <ul> <li>\u591a\u4e2apixel\u6620\u5c04\u5230\u4e86\u540c\u4e00\u4e2atexel</li> <li>\u89e3\u51b3:</li> <li>Nearest</li> <li> <p>Bilinear</p> <ul> <li>Bilinear \u63d2\u503c lerp</li> <li>\u6c34\u5e73+\u7ad6\u76f4\u63d2\u503c\u2192\u53cc\u7ebf\u6027\u63d2\u503c</li> <li>\u6700\u8fd1\u7684\u56db\u4e2a\u70b9\u63d2\u503c</li> </ul> </li> <li> <p>Bicubic \u53cc\u5411\u4e09\u6b21\u63d2\u503c</p> <ul> <li>\u5468\u56f416\u4e2a\u70b9\u505a\u4e09\u6b21\u63d2\u503c</li> <li>\u8fd0\u7b97\u91cf\u66f4\u5927\uff0c\u7ed3\u679c\u66f4\u597d</li> </ul> </li> </ul> <p>\u7eb9\u7406\u592a\u5927\u600e\u4e48\u529e</p> <ul> <li> <p>\u4e00\u4e2apixel\u5bf9\u5e94\u4e86\u591a\u4e2atexel, \u91c7\u6837\u9891\u7387\u4e0d\u8db3, \u5bfc\u81f4\u6469\u5c14\u7eb9\u548c\u952f\u9f7f</p> </li> <li> <p>\u89e3\u51b3:</p> </li> <li> <p>Supersampling</p> <ul> <li>\u592a\u6d6a\u8d39\uff01</li> <li>Just need to get the average value within a range</li> <li>Point Query vs. (Avg.) Range Query</li> </ul> </li> <li>Mipmap\uff1aAllowing (fast, approx., square) range queries<ul> <li>\u6bcf\u4e00\u6b21\u957f\u5bbd\u5404\u51cf\u534a D=0,1,2,...</li> <li>\u201cMip hierarchy\u201d</li> <li>overhead: 1/3</li> <li>\u600e\u4e48\u77e5\u9053\u5c42\u6570D\uff1f\u7ea6\u4e3a\u76f8\u90bbpixel\u7684\u6620\u5c04uv\u4e4b\u95f4\u7684\u8ddd\u79bb\u53d62\u7684\u5bf9\u6570</li> <li>\u5982\u679c\u8ba1\u7b97\u51fa\u6765\u9700\u8981\u7684D\u662f\u6574\u6570\uff0c\u5c31\u5f88\u65b9\u4fbf</li> <li>\u5982\u679c\u8ba1\u7b97\u51fa\u6765\u9700\u8981\u7684D\u4e0d\u662f\u6574\u6570\u2192Trilinear Interpolation\u4e09\u7ebf\u6027\u63d2\u503c</li> <li>\u5206\u522b\u5728floor(D)\u548cceil(D)\u4e0a\u505aBilinear Interpolation\u53d6\u989c\u8272\u503c\u4e4b\u540e\u518d\u63d2\u503c</li> <li>Limitation\uff1aOverblur</li> <li>\u4e0d\u662f\u65b9\u5757\u67e5\u8be2</li> <li>Solution\uff1a\u5404\u5411\u5f02\u6027\u8fc7\u6ee4</li> </ul> </li> <li>\u5404\u5411\u5f02\u6027\u8fc7\u6ee4Anisotropic Filtering<ul> <li>Ripmaps and summed area tables</li> <li>Can look up axis-aligned rectangular zones</li> <li>\u957f/\u5bbd/\u957f\u548c\u5bbd \u5404\u51cf\u534a</li> <li>EWA filtering \u692d\u5706\u53d6\u6837</li> <li>\u5229\u7528\u591a\u6b21\u67e5\u8be2\u6c42\u5e73\u5747\u503c\u7684\u65b9\u6cd5\u6765\u5904\u7406\u4e0d\u89c4\u5219\u533a\u57df</li> <li>overhead\uff1a3</li> <li>\u591a\u5c11x\uff1a\u538b\u7f29\u5230\u591a\u5c11x\uff0c\u663e\u5b58\u8db3\u591f\u7684\u60c5\u51b5\u4e0b\u5f00\u8d8a\u9ad8\u8d8a\u597d</li> </ul> </li> </ul> <p>\u50cf\u7d20\u8986\u76d6\u7684\u533a\u57df\u5927\u5c0f\u5404\u4e0d\u76f8\u540c</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#application-of-texture","title":"Application of Texture","text":"<p>\u5404\u79cd\u8d34\u56fe</p> <p>texture = memory + range query (filtering)</p> <ul> <li>General method to bring data to fragment calculations</li> </ul> <p>Many applications</p> <ul> <li> <p>Environment lighting - Environment Map</p> </li> <li> <p>\u73af\u5883\u5149\u8d34\u56fe</p> </li> <li>\u4f8b\u5b50\uff1aUtah Teapot<ul> <li>\u7ecf\u5178\uff1aStanford Bunny\uff0cCornell Box</li> </ul> </li> <li>Spherical Environment Map<ul> <li>\u7403\u5fc3\uff1a\u4e16\u754c\u4e2d\u5fc3</li> <li>\u4e00\u4e2a\u95ee\u9898\uff1a\u62c9\u4f38\uff0c\u60f3\u8c61\u5730\u7403\u4eea\u5c55\u5f00</li> <li>\u89e3\u51b3\u65b9\u6cd5\uff1aCube Map</li> </ul> </li> <li> <p>Cube Map\uff1a\u7acb\u65b9\u4f53\u8868\u9762\uff0c\u4ece\u7403\u5fc3\u5230\u7403\u9762\u7684\u6295\u5f71\u5411\u5916</p> <ul> <li>\u626d\u66f2\u66f4\u5c11\uff0c\u4f46\u662fNeed dir-&gt;face computation\uff0c\u8ba1\u7b97\u91cf\u66f4\u5927</li> </ul> </li> <li> <p>Store microgeometry</p> </li> <li> <p>Textures can affect shading! \u2192 define height/normal \u2192 Bump / Normal Map</p> <ul> <li>\u4e24\u8005\u7c7b\u4f3c\uff0c\u90fd\u53ef\u4ee5\u4ee5\u5047\u4e71\u771f</li> <li>\u6539\u53d8\u8868\u9762\u7684\u6cd5\u7ebf</li> </ul> </li> <li> <p>Bump Mapping \u51f9\u51f8\u8d34\u56fe</p> <p>Bump Mapping\u7684Texture\u8bb0\u5f55\u4e86\u9ad8\u5ea6\u79fb\u52a8</p> <ul> <li>\u4e0d\u6539\u53d8\u51e0\u4f55\u4fe1\u606f</li> <li>\u9010\u50cf\u7d20\u6270\u52a8\u6cd5\u7ebf\u65b9\u5411</li> <li>\u9ad8\u5ea6 offset \u76f8\u5bf9\u53d8\u5316\uff0c\u4ece\u800c\u6539\u53d8\u6cd5\u7ebf\u65b9\u5411</li> <li>\u8ba1\u7b97\u6cd5\u7ebf\u65b9\u5411\uff1a\u5207\u7ebf\u7684\u5782\u76f4\u65b9\u5411</li> </ul> </li> <li> <p>Displacement mapping \u4f4d\u79fb\u8d34\u56fe</p> <ul> <li>\u8f93\u5165\u76f8\u540c\uff08Texture\u4e0eBump Mapping\u53ef\u5171\u7528\uff09</li> <li>\u6539\u53d8\u51e0\u4f55\u4fe1\u606f\uff0c\u5bf9\u9876\u70b9\u505a\u4f4d\u79fb</li> <li>\u76f8\u6bd4\u4e0a\u66f4\u903c\u771f\uff0c\u8981\u6c42\u6a21\u578b\u8db3\u591f\u7ec6\u81f4\uff0c\u8fd0\u7b97\u91cf\u66f4\u9ad8</li> <li>DirectX\u6709Dynamic\u7684\u63d2\u503c\u6cd5\uff0c\u5bf9\u6a21\u578b\u505a\u63d2\u503c\uff0c\u4f7f\u5f97\u521d\u59cb\u4e0d\u7528\u8fc7\u4e8e\u7ec6\u81f4</li> </ul> </li> <li> <p>Procedural textures</p> </li> <li> <p>3D Procedural Noise + Solid Modeling</p> <ul> <li>\u5b9a\u4e49\u7a7a\u95f4\u4e2d\u4efb\u610f\u70b9\u7684\u989c\u8272</li> <li>\u566a\u58f0+\u6620\u5c04\u2192</li> <li>Perlin Noise</li> </ul> </li> <li> <p>Provide Precomputed Shading</p> </li> <li> <p>Ambient occlusion texture map</p> <ul> <li>\u8ba1\u7b97\u597d\u7684\u73af\u5883\u5149\u906e\u853d\u8d34\u56fe</li> <li>\u7a7a\u95f4\u6362\u65f6\u95f4</li> </ul> </li> <li> <p>Solid modeling &amp; Volume rendering</p> </li> <li> <p>\u4e09\u7ef4\u6e32\u67d3</p> </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#shadow-mapping_1","title":"Shadow mapping","text":"<p>\u5149\u6805\u5316\u4e0b\u5bf9\u5168\u5c40\u5149\u7ebf\u4f20\u8f93\u3001\u9634\u5f71\u7684\u5904\u7406\u5341\u5206\u9ebb\u70e6\u3002</p> <ul> <li>draw shadows using rasterization</li> <li>An Image-space Algorithm</li> <li>\u4e0d\u9700\u8981\u573a\u666f\u7684\u51e0\u4f55\u4fe1\u606f</li> <li>\u6709\u8d70\u6837\u73b0\u8c61</li> <li>\u601d\u60f3\uff1athe points NOT in shadow must be seen both by the light and by the camera</li> </ul> <p>\u6b65\u9aa4\uff1a</p> <ul> <li>Pass 1: Render from Light</li> <li>Depth image from light source \u2192 shadow map</li> <li>Pass 2A: Render from Eye</li> <li>Standard image (with depth) from eye</li> <li>Pass 2B: Project to light</li> <li>Project visible points in eye view back to light source<ul> <li>visible to light source \u2192 color</li> <li>blocked \u2192 shadow</li> </ul> </li> </ul> <p>\u611f\u89c9\u6bcf\u4e2a\u5149\u6e90\u5bf9\u6bcf\u4e2a\u9759\u6001\u573a\u666f\u6709\u4e00\u4e2ashadow map</p> <p>\u5e94\u7528\uff1a</p> <ul> <li>\u51e0\u4e4e\u6240\u67093D\u6e38\u620f</li> </ul> <p>\u95ee\u9898\uff1a</p> <ul> <li>\u8d70\u6837\u3001\u5206\u8fa8\u7387</li> <li>\u6570\u503c\u7cbe\u5ea6\u95ee\u9898</li> <li>Involves equality comparison of \ufb02oating point depth values means issues of scale, bias, tolerance</li> <li>\u53ea\u80fd\u70b9\u5149\u6e90\u3001\u786c\u9634\u5f71</li> </ul> <p>\u7b14\u8bb0\u53c2\u8003\u4e86GAMES101 \u7b14\u8bb0 (notion.so)</p> <p>shading \u548c texture \u7684\u4f5c\u4e1a\u53c2\u8003\u4e86\uff08\u6df1\u5ea6\u89e3\u6790\uff09GAMES 101 \u4f5c\u4e1a3\uff1a\u6e32\u67d3\u5c0f\u5976\u725b - \u77e5\u4e4e (zhihu.com)</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_5","title":"\u63d2\u503c","text":"<p>\u5bf9\u4e8e\u4e09\u89d2\u5f62ABC, \u6709: \\(\\(\u91cd\u5fc3(x,y)=\\alpha A+\\beta B+\\gamma C,\\  \\alpha+\\beta+\\gamma=1\\)\\)</p> <p>\u6211\u4eec\u79f0\\((\\alpha, \\beta,\\gamma)\\)\u4e3a\u91cd\u5fc3\u5750\u6807</p> <p>\u7531\u6570\u5b66\u63a8\u5bfc\u53ef\u77e5:</p> <p></p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#geometry","title":"\u51e0\u4f55(Geometry)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#many-ways-to-represent-geometry","title":"Many ways to represent geometry","text":"<p>Implicit(\u9690\u5f0f)</p> <ul> <li>example: sphere: all points in 3D, where \\(x^2+y^2+z^2=1\\)</li> <li> <p>more generally: f(x,y,z) = 0</p> </li> <li> <p></p> </li> <li> <p>\u8ddd\u79bb\u51fd\u6570(distance function)</p> </li> <li> <p>SDF(signed distance field)</p> <p></p> </li> <li> <p>level sets(\u6c34\u5e73\u96c6)</p> </li> <li> <p>Fractals(\u5206\u5f62)</p> </li> </ul> <p>Explicit(\u663e\u5f0f)</p> <ul> <li>point cloud</li> <li> <p>\u6709\u5f88\u591a\u7814\u7a76\u505a\u5982\u4f55\u628a\u70b9\u4e91\u8f6c\u5316\u4e3a\u4e09\u89d2\u5f62\u7b49</p> </li> <li> <p>polygon mesh(*\u7528\u7684\u6700\u591a)</p> </li> <li> <p>store \u4e09\u89d2\u5f62\u6216\u8005\u591a\u8fb9\u5f62(\u4e00\u822c\u662f\u4e09\u89d2\u5f62\u548c\u56db\u8fb9\u5f62)</p> </li> <li> <p>\u66f4\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784</p> </li> <li> <p>\u4f8b\u5b50:hw3\u4e2d<code>.obj</code>\u683c\u5f0f\u6587\u4ef6</p> <p></p> </li> <li> <p>subdivision, NURBS</p> </li> <li> <p>example: \u6620\u5c04: \\((u,v)\\rightarrow (x,y,z)\\) \u5982 \\(f(u,v)=(\\cos u\\sin u,\\sin u\\sin v,\\cos v)\\)</p> </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#curves-and-surfaces","title":"\u66f2\u7ebf\u548c\u66f2\u9762(curves and surfaces)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_6","title":"\u8d1d\u585e\u5c14\u66f2\u7ebf","text":"<p>\u4e3e\u4f8b:</p> <p>assume \\(n = 3\\)</p> \\[b_0=(0,2,3),b_1=(2,3,5),b_2=(6,7,9), b_3=(3,4,5)\\] <p>These points define a Bezier curve in 3D that is a cubic polynomial in :</p> \\[b^n(t)=b_0(1-t)^3+b_13t(1-t)^2+b_23t^2(1-t)+b_3t^3\\] <p>\u6027\u8d28:</p> <ol> <li>Interpolates(\u63d2\u503c) endpoints</li> <li>For cubic Bezier: \\(b(0) = b_0;b(1)=b_3\\)</li> <li>Tangent to end segments(\u5207\u7ebf)</li> <li> <p>Cubic case: \\(b'(0)=3(b_1-b_0);\\  b'(1)= 3(b_3-b_2)\\)</p> </li> <li> <p>Affine(\u4eff\u5c04) transformation property</p> </li> <li> <p>Transform curve by transforming control points</p> </li> <li> <p>Convex hull(\u51f8\u5305) property</p> </li> <li>Curve is within convex hull of control points</li> </ol> <p>But!\u8d1d\u585e\u5c14\u66f2\u7ebf\u5728\u70b9\u5f88\u591a\u7684\u65f6\u5019\u6548\u679c\u4e0d\u597d(\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u5bf9\u6574\u4f53\u4ea7\u751f\u5f71\u54cd)</p> <p>\u6b64\u65f6\u53ef\u4ee5\u9010\u6bb5\u8fdb\u884c\u8d1d\u585e\u5c14,\u5373: Piecewise Bezier Curve</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#other-types-of-splines","title":"other types of splines","text":"<ul> <li>Spline</li> <li>B-splines(\u53ca\u5176\u590d\u6742, \u5728\u6b64\u4e0d\u505a\u5c55\u5f00)</li> <li>NURBS</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_7","title":"\u8d1d\u585e\u5c14\u66f2\u9762","text":"<p>\u5148\u6c34\u5e73\u65b9\u5411\u751f\u6210\u8d1d\u585e\u5c14\u66f2\u7ebf,\u518d\u7ad6\u76f4\u65b9\u5411\u5229\u7528\u521a\u521a\u7684\u66f2\u7ebf\u4e0a\u7684\u70b9\u751f\u6210\u8d1d\u585e\u5c14\u66f2\u7ebf</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#mesh","title":"Mesh(\u4e09\u89d2\u9762\u7247)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#mesh-subdivision","title":"Mesh Subdivision(\u66f2\u9762\u7ec6\u5206)","text":"<ul> <li>Loop Subvision</li> <li>Split each triangle into four</li> <li> <p>Assign new vertex positions according to weights</p> </li> <li> <p>Catmull-Clark Subdivision(General Mesh)</p> </li> <li> <p>Non-quad face\uff1a\u975e\u56db\u8fb9\u7684\u9762</p> </li> <li> <p>Extraordinary vertex (\u5947\u5f02\u70b9)\uff1a\u6307(degree != 4)\u7684\u70b9</p> </li> <li> <p>Each subdivision step:</p> <ul> <li> <p>Add vertex in each face</p> </li> <li> <p>Add midpoint on each edge</p> </li> <li> <p>Connect all new vertices</p> </li> </ul> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#mesh-simplification","title":"Mesh Simplification(\u66f2\u9762\u7b80\u5316)","text":"<ul> <li>\u4e00\u79cd\u65b9\u6cd5: \u8fb9\u574d\u7f29(edge collapsing)</li> </ul> <p>Edge Collapse\uff1a\u8fb9\u574d\u7f29</p> <ul> <li>\u54ea\u4e9b\u8fb9\u574d\u7f29\uff1f\u5982\u4f55\u574d\u7f29\uff1f</li> <li>Quadric Error Metrics\uff08\u2f06\u6b21\u8bef\u5dee\u5ea6\u91cf\uff09\u653e\u5728\u4e8c\u6b21\u8bef\u5dee\u4e4b\u548c\u6700\u5c0f\u7684\u5730\u65b9</li> </ul> <p>Simplification via Quadric Error</p> <ul> <li>iteratively collapse edge with smallest score</li> <li>\u6709\u95ee\u9898\uff0c\u4e00\u6761\u8fb9\u7684\u64cd\u4f5c\u4f1a\u5f71\u54cd\u5176\u5b83\u8fb9\uff0c\u9700\u8981\u66f4\u65b0</li> <li>\u6570\u636e\u7ed3\u6784\uff1a\u4f18\u5148\u961f\u5217 or \u5806</li> <li>\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u975e\u5168\u5c40\u6700\u4f18</li> <li>\u53ef\u4ee5\u6709\u7684\u653e\u77e2</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#ray-tracing","title":"\u5149\u7ebf\u8ffd\u8e2a(Ray Tracing)","text":"<p>\u5149\u6805\u5316\u4e0d\u80fd\u89e3\u51b3\u5168\u5c40\u7684\u95ee\u9898, \u5982</p> <ol> <li>\u8f6f\u9634\u5f71</li> <li>\u6bdb\u73bb\u7483</li> <li> <p>\u95f4\u63a5\u5149\u7167</p> </li> <li> <p>\u5149\u7ebf\u8ffd\u8e2a\u7684\u95ee\u9898: \u6162, \u4e00\u5e27\u9700\u898110K\u7684CPU\u5c0f\u65f6(hour)</p> </li> <li> <p>\u5149\u7ebf\u8ffd\u8e2a\u7684\u4f18\u52bf: \u8d28\u91cf\u9ad8</p> </li> </ol>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#light-rays","title":"Light Rays(\u5149\u7ebf\u7684\u6027\u8d28)","text":"<ol> <li>\u5149\u6cbf\u76f4\u7ebf\u4f20\u64ad</li> <li>\u5149\u7ebf\u4e0d\u4f1a\u78b0\u649e</li> <li>\u5149\u8def\u53ef\u9006*</li> </ol>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_8","title":"\u5149\u7ebf\u8ffd\u8e2a\u7684\u57fa\u672c\u8fc7\u7a0b","text":"<ul> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u50cf\u7d20, \u4ece\u773c\u775b\u6295\u51fa\u53bb\u4e00\u4e2a\u5149\u7ebf, \u4e0e\u573a\u666f\u4e2d\u7684\u7269\u4f53\u76f8\u4ea4\u627e\u5230\u4ea4\u70b9</li> <li>\u4ece\u4ea4\u70b9\u51fa\u53d1\u5411\u5149\u6e90\u8fde\u7ebf\u5224\u65ad\u662f\u5426\u53ef\u89c1</li> <li>\u7b97\u7740\u8272\u5e76\u5199\u56de\u50cf\u7d20</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#whitted-style","title":"\u6700\u53e4\u8001\u7684\u5149\u7ebf\u8ffd\u8e2a\u65b9\u6cd5: Whitted-Style","text":"<ul> <li>\u672c\u8d28\u662f\u4e00\u79cd\u9012\u5f52\u7684\u65b9\u6cd5</li> <li>\u6211\u4eec\u77e5\u9053, \u5f53\u5149\u7ebf\u9047\u5230\u73bb\u7483\u7684\u65f6\u5019, \u4f1a\u6709\u4e00\u90e8\u5206\u5149\u7ebf\u53cd\u5c04, \u4e00\u90e8\u5206\u5149\u7ebf\u6298\u5c04</li> <li> <p>\u8fd9\u6837\u4e00\u6761\u4ece\u773c\u775b\u6295\u5c04\u51fa\u53bb\u7684\u5149\u7ebf\u5c31\u4f1a\u4e0e\u573a\u666f\u4e2d\u7684\u7269\u4f53\u4ea7\u751f\u8bb8\u591a\u4ea4\u70b9, \u6211\u4eec\u5c06\u6bcf\u4e2a\u4ea4\u70b9\u90fd\u4e0e\u5149\u6e90\u8fde\u7ebf\u5224\u65ad\u662f\u5426\u53ef\u89c1, \u5982\u679c\u53ef\u89c1, \u5219\u8ba1\u7b97\u7740\u8272\u5e76\u52a0\u6743\u5199\u5165\u50cf\u7d20</p> </li> <li> <p>\u4ece\u773c\u775b\u51fa\u53bb\u7684\u5149\u7ebf\u53eb\u505aprimary ray, \u5176\u4ed6\u7684\u53eb\u505asecondary rays, \u4ea4\u70b9\u4e0e\u5149\u6e90\u4e4b\u95f4\u7684\u8fde\u7ebf\u53eb\u505ashadow rays </p> </li> </ul> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_9","title":"\u5982\u4f55\u5224\u65ad\u5149\u7ebf\u4e0e\u7269\u4f53\u7684\u76f8\u4ea4","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_10","title":"\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u7269\u4f53\u5185\u90e8","text":"<p>\u4ece\u70b9\u5411\u5916\u90e8\u53d1\u51fa\u5c04\u7ebf, \u53ea\u8981\u662f\u5728\u7269\u4f53\u5185\u90e8, \u4e00\u5b9a\u4f1a\u4e0e\u7269\u4f53\u6709\u5947\u6570\u4e2a\u4ea4\u70b9</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_11","title":"\u5224\u65ad\u5149\u7ebf\u662f\u5426\u4e0e\u4e09\u89d2\u5f62\u76f8\u4ea4","text":"<p>\u53ef\u4ee5\u62c6\u6210\u4e24\u90e8\u5206:</p> <ol> <li>\u5149\u7ebf\u662f\u5426\u4e0e\u4e09\u89d2\u5f62\u6240\u5728\u7684\u5e73\u9762\u76f8\u4ea4</li> <li>\u5229\u7528\u5149\u6805\u5316\u7684\u601d\u60f3, \u5224\u65ad\u8fd9\u4e2a\u4ea4\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8</li> </ol>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_12","title":"\u5224\u65ad\u5149\u7ebf\u662f\u5426\u4e0e\u5e73\u9762\u76f8\u4ea4","text":"<ul> <li> <p>\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053, \u5149\u7ebf\u5728\u56fe\u5f62\u5b66\u4e2d\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u5411\u91cf\u6765\u8868\u793a:\\(r(t)=o+td\\), \u5176\u4e2do\u8868\u793a\u5149\u7ebf\u7684\u51fa\u53d1\u70b9, d\u8868\u793a\u5149\u7ebf\u7684\u65b9\u5411, r\u8868\u793a\u5149\u7ebf\u5728t\u65f6\u523b\u7684\u4f4d\u7f6e</p> </li> <li> <p>\u90a3\u4e48, \u5982\u4f55\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u5462? \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u6761\u6cd5\u7ebf\\(N\\)\u548c\u4e00\u4e2a\u70b9\\(p'\\)\u6765\u8868\u793a</p> </li> <li>\u90a3\u4e48\u5982\u4f55\u786e\u5b9a\u4e00\u4e2a\u70b9\\(p\\)\u662f\u5426\u5728\u5e73\u9762\u4e0a\u5462? \u53ea\u9700\u8981\u6ee1\u8db3\\((p-p')\\cdot N=0\\)\u5373\u53ef</li> </ul> <p>\u56e0\u6b64, \u6211\u4eec\u8054\u7acb\u89e3\u65b9\u7a0b:</p> <ol> <li> <p>Set \\(p=r(t)\\) and solve for t</p> </li> <li> <p>\\((p-p')\\cdot N=(p+td-p')\\cdot N=0\\)</p> </li> <li>\\(t=\\frac{(p'-o)\\cdot N}{d\\cdot N}\\)</li> <li>Check: \\(0 \\leq t \\leq \\infin\\)</li> </ol> <p>\u9664\u4e86\u4e0a\u8ff0\u65b9\u6cd5, \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528MT\u7b97\u6cd5:</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_13","title":"\u5982\u4f55*\u52a0\u901f*\u5149\u7ebf\u548c\u8868\u9762\u7684\u6c42\u4ea4\u64cd\u4f5c","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#bounding-volumes","title":"\u5305\u56f4\u4f53\u79ef(Bounding Volumes)","text":"<ul> <li>AABB(Axis-Aligned Box), \u7528\u4e00\u4e2a\u5e73\u884c\u4e8exyz\u8f74\u7684\u7acb\u65b9\u4f53\u5305\u4f4f(\u5e76\u4e0d\u662f\u6bcf\u4e2a\u7269\u4f53\u6709\u4e00\u4e2a\u5305\u56f4\u76d2, \u800c\u662f\u4e00\u4e2a\u7269\u4f53\u4f1a\u5360\u636e\u54ea\u4e9b\u5305\u56f4\u76d2)</li> <li>\u516d\u4e2a\u9762\u6700\u665a\u7684\u8fdb\u5165\u65f6\u95f4\u662f\\(t_{enter}(\u53ef\u4ee5\u4e3a\u8d1f)\\), \u6700\u65e9\u7684\u9000\u51fa\u65f6\u95f4\\(t_{exit}\\)</li> <li>ray\u548cAABB\u76f8\u4ea4\u5f53\u4e14\u4ec5\u5f53\\(t_{enter}&lt;t_{exit}\\) &amp;&amp; \\(t_{exit}\\ge0\\)</li> <li>\u573a\u666f\u88ab\u5747\u7b49\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u683c\u5b50, \u5149\u7ebf\u4f9d\u6b21\u7ecf\u8fc7\u6bcf\u4e2a\u76d2\u5b50\u65f6\u68c0\u6d4b\u76d2\u5b50\u5185\u662f\u5426\u6709\u7269\u4f53, \u6211\u4eec\u5047\u8bbe\u68c0\u9a8c\u5149\u7ebf\u662f\u5426\u4e0e\u76d2\u5b50\u76f8\u4ea4\u7684\u901f\u5ea6\u8fdc\u5feb\u4e8e\u68c0\u9a8c\u5149\u7ebf\u662f\u5426\u4e0e\u7269\u4f53\u76f8\u4ea4</li> <li>\u5173\u4e8e\u573a\u666f\u4e2d\u5e94\u8be5\u653e\u591a\u5c11\u5305\u56f4\u76d2\u662f\u4e00\u4e2a\u7384\u5b66(\u7ecf\u9a8c\u6a21\u578b)</li> </ul> <p>\u6211\u627f\u8ba4\u9601\u4e0bAABB\u52a0\u901f\u5f88\u5f3a, \u4f46\u662f\u5047\u5982\u6211\u64cd\u573a\u4e0a\u53ea\u653e\u4e00\u4e2a\u8336\u58f6(Teaport in the stadium), \u4e0d\u77e5\u9601\u4e0b\u53c8\u8be5\u5982\u4f55\u5e94\u5bf9?</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#spatial-partitions","title":"\u7a7a\u95f4\u5212\u5206(Spatial Partitions)","text":"<p>\u7269\u4f53\u5206\u5e03\u7a00\u758f\u7684\u5730\u65b9\u5e94\u8be5\u7528\u66f4\u5c11\u7684\u683c\u5b50, \u540c\u7406\u7269\u4f53\u5206\u5e03\u5bc6\u96c6\u7684\u5730\u65b9\u9700\u8981\u66f4\u591a\u7684\u76d2\u5b50</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#oct-tree","title":"\u516b\u53c9\u6811 (Oct-Tree)","text":"<p>\u5c06\u4e00\u4e2a\u7acb\u65b9\u4f53\u4e09\u4e2a\u65b9\u5411\u5404\u6765\u4e00\u5200\u5207\u6210\u516b\u5757, \u540c\u7406\u5728\u4e8c\u7ef4\u7a7a\u95f4\u662f\u56db\u53c9\u6811, \u5728\u4e00\u7ef4\u7a7a\u95f4\u662f\u4e8c\u53c9\u6811, \u4f46\u662f\u5728\u66f4\u9ad8\u7ef4\u65f6\u5f00\u652f\u592a\u5927, \u56e0\u6b64\u6211\u4eec\u5f15\u5165KD-Tree</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#kd-tree","title":"KD-Tree","text":"<p>\u6c38\u8fdc\u662f\u6cbf\u67d0\u4e00\u4e2a\u8f74(\u9762)\u5c06\u5176\u780d\u6210\u4e24\u4e2a</p> <p></p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#object-partitions-bounding-volume-hierachybvh","title":"\u7269\u4f53\u5212\u5206(Object Partitions) &amp; Bounding Volume Hierachy(BVH)","text":"<ul> <li>\u5f97\u5230\u4e86\u975e\u5e38\u5e7f\u6cdb\u7684\u5e94\u7528</li> <li>\u5bf9\u4e8e\u5212\u5206\u4e5f\u5f88\u6709\u8bb2\u7a76</li> </ul> <p>\u5177\u4f53\u6b65\u9aa4:</p> <ol> <li>\u627e\u5230\u5305\u56f4\u76d2</li> <li>\u9012\u5f52\u5730\u5c06\u5305\u56f4\u76d2\u4e2d\u7684\u7269\u4f53\u5206\u6210\u4e24\u90e8\u5206</li> <li>\u600e\u4e48\u5212\u5206?<ul> <li>\u9009\u62e9\u5408\u9002\u7684\u8f74(x or y or z)\u5212\u5206</li> <li>\u603b\u662f\u9009\u62e9\u6700\u957f\u7684\u8f74\u8fdb\u884c\u5212\u5206</li> <li>\u9009\u62e9\u4e2d\u95f4\u7269\u4f53\u6240\u5728\u7684\u4f4d\u7f6e\u8fdb\u884c\u5212\u5206 </li> <li>\u600e\u4e48\u627e\u4e2d\u95f4\u7269\u4f53: \u5feb\u901f\u9009\u62e9\u7b97\u6cd5(\\(O(N)\\))[\u529b\u6263215] \u5feb\u901f\u9009\u62e9\u7b97\u6cd5&amp;\u5212\u5206\u6811 - \u77e5\u4e4e (zhihu.com)</li> </ul> </li> <li>\u7ed9\u8fd9\u4e24\u90e8\u5206\u5206\u522b\u8ba1\u7b97\u65b0\u7684\u5305\u56f4\u76d2</li> <li>\u5f53\u8282\u70b9\u4e2d\u6709\u8db3\u591f\u5c11\u7684\u4e09\u89d2\u5f62\u65f6\u505c\u6b62\u9012\u5f52</li> <li>\u5728\u53f6\u5b50\u8282\u70b9\u91cc\u8bb0\u5f55\u4e0b\u5b9e\u9645\u7684\u7269\u4f53</li> </ol> <pre><code>Intersect(Ray ray, BVH node)\n{\n    if (ray misses node.bbox)   return;\n\n    if (node is a leaf node)\n        test intersection with all objs;\n        return closest intersection;\n\n    hit1 = Intersect(ray, node.child1);\n    hit2 = Intersect(ray, node.child2);\n\n    return the closer of hit1, hit2;\n}\n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#basic-radiometry","title":"\u8f90\u5c04\u5ea6\u91cf\u5b66(Basic radiometry)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#radiometry","title":"\u4e3a\u4ec0\u4e48\u8981\u5b66Radiometry","text":"<ul> <li>\u5982\u4e4b\u524d\u5728\u4f5c\u4e1a3\u91cc\u9762\u6709<code>Light intensity = 10</code>, <code>10</code>\u662f\u4ec0\u4e48?</li> <li>\u5e03\u6797\u51af\u6a21\u578b\u662f\u4e0d\u771f\u5b9e\u7684, Whitted style\u4e5f\u662f\u4e0d\u771f\u5b9e\u7684</li> <li>\u8f90\u5c04\u5ea6\u91cf\u5b66\u5c31\u662f\u8981\u771f\u5b9e</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#radiometry_1","title":"\u4ec0\u4e48\u662fRadiometry","text":"<ul> <li>Measurement system and units for illumination</li> <li>Accurately measure the spatial properties of light</li> <li>New terms: Radiant flux, intensity, irradiance, radiance</li> <li>Perform lighting calculations in a physically correct manner</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_14","title":"\u540d\u8bcd\u89e3\u91ca","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#radiant-energy-and-fluxpower","title":"Radiant Energy and Flux(Power)","text":"<ul> <li>\u5927\u6982, Energy\u662f\u80fd\u91cf, Flux\u662f\u529f\u7387(\u901a\u91cf?)</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#radiant-intensity","title":"Radiant Intensity","text":"<ul> <li>power per unit solid angle</li> </ul> <p>\u4ec0\u4e48\u662f\u7acb\u4f53\u89d2: \u5f27\u5ea6\u5236\u5728\u4e09\u7ef4\u7a7a\u95f4\u7684\u5ef6\u4f38</p> <p></p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#irradiance","title":"\u8f90\u5c04\u7167\u5ea6(Irradiance)","text":"<p>\u7c7b\u4f3c\u4e8e\u901a\u91cf\u7684\u6982\u5ff5,\u5e73\u65b9\u8870\u51cf</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#radiance","title":"\u8f90\u5c04\u7387(Radiance)","text":"<p>\u5b9a\u4e49: \u6bcf\u5355\u4f4d\u7acb\u4f53\u89d2\u6bcf\u5355\u4f4d\u6295\u5f71\u9762\u79ef\u7684\u80fd\u91cf</p> <p></p> <p>Recall</p> <ul> <li>Irradiance: \u6bcf\u5355\u4f4d\u6295\u5f71\u9762\u79ef\u7684\u80fd\u91cf</li> <li>intensity: \u6bcf\u5355\u4f4d\u7acb\u4f53\u89d2\u7684\u80fd\u91cf</li> </ul> <p>so</p> <ul> <li>Radiance: \u6bcf\u5355\u4f4d\u7acb\u4f53\u89d2\u7684Irradiance</li> <li>Radiance: \u6bcf\u5355\u4f4d\u6295\u5f71\u9762\u79ef\u7684Intensity</li> </ul> <p>Radiance\u65e0\u975e\u5c31\u662f\u5728Irradiance\u7684\u57fa\u7840\u52a0\u4e86\u4e00\u4e2a\u65b9\u5411\u6027</p> <p>Irradiance\u5c31\u662f\u5bf9\u5404\u4e2a\u65b9\u5411\u7684Radiance\u7684\u79ef\u5206</p> <p>\u6211\u4eec\u5e0c\u671b\u6709\u4e00\u4e2a\u51fd\u6570\u80fd\u591f\u5b9a\u4e49\u4e00\u4e2a\u70b9\u80fd\u5411\u4e0d\u540c\u7684\u70b9\u53cd\u5c04\u591a\u5c11\u80fd\u91cf</p> <p>\u4ece\u5404\u4e2a\u65b9\u5411\u63a5\u6536\u5230\u7684irradiance, \u53cd\u5c04\u5230\u67d0\u4e00\u4e2a\u65b9\u5411\u7684radiance\u4e0a\u53bb</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#brdf","title":"\u53cc\u5411\u53cd\u5c04\u5206\u5e03\u51fd\u6570(BRDF)","text":"<p>\u901a\u4fd7\u5b9a\u4e49: \u5fae\u5c0f\u9762\u79ef\\(dA\\)\u4ece\u67d0\u4e00\u4e2a\u5fae\u5c0f\u7acb\u4f53\u89d2\\(d\\omega_i\\)\u63a5\u6536\u5230\u7684irradiance\u4f1a\u53cd\u5c04\u591a\u5c11radiance\u5230\u5404\u4e2a\u4e0d\u540c\u7684\u7acb\u4f53\u89d2\u4e0a\u53bb</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_15","title":"\u53cd\u5c04\u65b9\u7a0b","text":"\\[L_r(p,\\omega_r)=\\int_{H^2}f_r(p,\\omega_r\\rightarrow \\omega_i)L_i(p,\\omega_i)\\cos\\theta_id\\omega_i\\] <p>\u540e\u9762\u4e09\u9879\\(L_i(p,\\omega_i)\\cos\\theta_id\\omega_i\\)\u79ef\u5206\u7684\u53ef\u4ee5\u770b\u51fa\u662f\u5355\u4f4d\u9762\u79efdA\u4e2d\u6536\u5230\u7684\u6240\u6709irradiance</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_16","title":"\u6e32\u67d3\u65b9\u7a0b","text":"<p>\u6574\u4e2a\u573a\u666f\u4e0d\u6b62\u4e00\u675f\u5149\u7ebf, \u5149\u7ebf\u53cd\u5c04\u51fa\u6765\u8fd8\u4f1a\u4e0d\u65ad\u53cd\u5c04, \u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b</p> <p>\u4e14\u6709\u4e9b\u7269\u4f53\u4e0d\u4ec5\u53ef\u4ee5\u53cd\u5c04\u5149\u7ebf, \u81ea\u5df1\u672c\u8eab\u4e5f\u53ef\u4ee5\u53d1\u5149</p> \\[L_{o}\\left(p, \\omega_{o}\\right)=L_{e}\\left(p, \\omega_{o}\\right)+\\int_{\\Omega^{+}} L_{i}\\left(p, \\omega_{i}\\right) f_{r}\\left(p, \\omega_{i}, \\omega_{o}\\right)\\left(n \\cdot \\omega_{i}\\right) \\mathrm{d} \\omega_{i}\\] <p>\u5176\u4e2d\\((n\\cdot \\omega_i)=\\cos\\theta_i\\)</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#monte-carlo-integration","title":"\u8499\u7279\u5361\u6d1b\u79ef\u5206(Monte Carlo integration)","text":"<p>\u4e00\u4e2a\u7528\u6765\u6c42\u5b9a\u79ef\u5206\u7684\u65b9\u6cd5, \u4e0d\u5173\u5fc3\u51fd\u6570\u7684\u89e3\u6790\u5f0f\u662f\u5982\u4f55\u7684, \u53ea\u9700\u8981\u80fd\u7b97\u51fa\u79ef\u5206\u7684\u7ed3\u679c\u5373\u53ef</p> <p>\u57fa\u672c\u601d\u60f3: \u5728\u79ef\u5206\u57df\u4e0a\u968f\u673a\u53d6\u6837, \u628a\u6574\u4e2a\u79ef\u5206\u57df\u5f53\u6210\u662f\u4e00\u4e2a\u957f\u65b9\u5f62\u8ba1\u7b97\u51fa\u79ef\u5206\u7ed3\u679c, \u628a\u6240\u6709\u53d6\u6837\u7684\u79ef\u5206\u7ed3\u679c\u6c42\u5e73\u5747</p> \\[\\int f(x)dx=\\frac{1}{N}\\sum^{N}_{i=1}\\frac{f(X_i)}{p(X_i)},\\ X_i\\sim p(x)\\] <p>\u5176\u4e2dp(x)\u662fpdf(\u6982\u7387\u5bc6\u5ea6\u51fd\u6570)</p> <p>\u597d\u5904\u662f\u4e0d\u7528\u7ba1\u79ef\u5206\u57df\u4e86, \u56e0\u4e3a\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5c31\u9650\u5b9a\u4e86\u79ef\u5206\u57df</p> <p>\u6e32\u67d3\u65b9\u7a0b\u4e24\u5927\u96be\u70b9: </p> <ol> <li>\u79ef\u5206\u7684\u8ba1\u7b97\\(\\rightarrow\\)\u8499\u7279\u5361\u6d1b\u79ef\u5206</li> <li>\u9012\u5f52\u7684\u8ba1\u7b97</li> </ol> <p>\u5f15\u8fdb\u8499\u7279\u5361\u6d1b\u79ef\u5206\u4e4b\u540e, \u6e32\u67d3\u65b9\u7a0b\u4e3a\u7ea6\u7b49\u4e8e:</p> \\[L_{o}\\left(p, \\omega_{o}\\right)=L_{e}\\left(p, \\omega_{o}\\right)+\\frac{1}{N} \\sum_{i=1}^{N}\\frac {L_{i}\\left(p, \\omega_{i}\\right) f_{r}\\left(p, \\omega_{i}, \\omega_{o}\\right)\\left(n \\cdot \\omega_{i}\\right)}{p(\\omega_i)}\\] <p>\u6545\u53ef\u4f5c\u4f2a\u4ee3\u7801: </p> <p>(\u53ea\u8003\u8651\u975e\u5149\u6e90)</p> <pre><code>shade(p, wo)\n    Randomly choose N direction wi~pdf\n    Lo = 0.0\n    For each wi\n        Trace a ray r(p, wi)\n        If ray r hit the light\n            Lo += (1 / N) * L_i * f_r * cosine / pdf(wi)\n        Else If ray r hit an object at q\n            Lo += (1 / N) * shade(q, -wi) * f_r * cosine / pdf(wi)\n    Return Lo\n</code></pre> <p>\u4f46\u6b64\u65b9\u6cd5\u6709\u4e24\u4e2a\u5f88\u4e25\u91cd\u7684\u5f0a\u7aef</p> <ol> <li>\u5149\u7ebf\u6570\u91cf\u7206\u70b8: \u5b83\u7684\u5f00\u9500\u662fN\u7684\u6307\u6570\u7ea7\u589e\u957f, \u6211\u4eec\u60f3\u8981\u8ba9\u4ed6\u4e0d\u662f\u6307\u6570\u7ea7\u589e\u957f, \u6211\u4eec\u53ef\u4ee5\u8ba9N=1, \u8fd9\u5c31\u662f\u8def\u5f84\u8ffd\u8e2a\u7684\u601d\u60f3</li> <li>\u505c\u4e0d\u4e0b\u6765: \u4fc4\u7f57\u65af\u8f6e\u76d8\u8d4c</li> </ol>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_17","title":"\u8def\u5f84\u8ffd\u8e2a","text":"<p>\u8def\u5f84\u8ffd\u8e2a\u7531\u4e8eN=1, \u751f\u6210\u7684\u56fe\u7247\u603b\u662f\u5f88noisy, \u867d\u7136\u89c4\u5b9a\u4e86\u5149\u53cd\u5c04\u7684\u5149\u675f\u4e3a1\u6761, \u4f46\u662fpixel\u53ef\u4ee5\u5411\u4e0d\u540c\u65b9\u5411\u53d1\u51fa\u5149\u7ebf, \u5373\u53d1\u51fa\u4e0d\u540c\u7684path, \u518d\u6c42\u5e73\u5747\u5373\u53ef</p> <p></p> <p>\u5982\u679c\u5149\u6e90\u5f88\u5c0f, \u53ef\u80fd\u8981\u53d1\u51fa\u5f88\u591a\u6761path\u624d\u80fd\u78b0\u5230\u5149\u6e90\u505c\u6b62\u9012\u5f52</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u6211\u4eec\u53ef\u4ee5\u5728\u5149\u6e90\u4e0a\u91c7\u6837</p> <p></p> <p></p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#materials-and-appearance","title":"\u6750\u8d28\u4e0e\u5916\u89c2(Materials and Appearance)","text":"<p>Material == BRDF, \u6750\u8d28\u51b3\u5b9a\u4e86\u5149\u5982\u4f55\u88ab\u53cd\u5c04</p> <ul> <li> <p>\u6f2b\u53cd\u5c04: </p> </li> <li> <p>\u51fa\u5c04\u7684radiance\u662f\u5747\u5300\u7684\\(\\rightarrow f_r=c(\u5e38\u91cf)\\), \u4e14\u53cd\u5c04\u524d\u540eirradiance\u4e0d\u53d8 </p> </li> <li> <p>\u7531\u53cd\u5c04\u65b9\u7a0b\u53ef\u4ee5\u8ba1\u7b97\u51fa\\(f_r=\\frac{\\rho}{\\pi}\\)</p> </li> <li> <p></p> </li> <li> <p>\u5149\u6cfd\u6750\u8d28(Glossy material)</p> </li> <li></li> <li> <p></p> </li> <li> <p>Ideal reflective / refractive material(BSDF*)</p> </li> <li>\u540c\u65f6\u5177\u6709\u53cd\u5c04\u548c\u6298\u5c04, \\(BSDF=BRDF+BTDF\\)</li> </ul> <p>\u83f2\u6d85\u5c14\u9879: </p> <ul> <li>\u53cd\u5c04\u7387\u53d6\u51b3\u4e8e\u5165\u5c04\u89d2, \u548cnormal\u6cd5\u7ebf\u65b9\u5411\u8d8a\u63a5\u8fd1\u5219\u8d8a\u5c11\u7684\u5149\u88ab\u53cd\u5c04</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#microfacet-material","title":"\u5fae\u8868\u9762\u6750\u8d28(Microfacet Material)","text":"<p>\u57fa\u4e8e\u5982\u4e0b\u5047\u8bbe\uff1a\u79bb\u5f97\u8db3\u591f\u8fdc\u7684\u65f6\u5019\uff0c\u5fae\u5c0f\u7684\u4e1c\u897f\u5f80\u5f80\u770b\u4e0d\u89c1\uff0c\u770b\u89c1\u7684\u662f\u6700\u540e\u6c47\u805a\u8d77\u6765\u603b\u4f53\u7684\u6837\u5b50, \u5373\u8fdc\u5904\u770b\u6750\u8d28, \u8fd1\u5904\u770b\u51e0\u4f55</p> <p></p> <ul> <li>F: \u83f2\u6d85\u5c14\u9879, \u786e\u5b9a\u6709\u591a\u5c11\u80fd\u91cf\u5c06\u4f1a\u88ab\u53cd\u5c04</li> <li>G: \u4fee\u6b63\u5fae\u8868\u9762\u53ef\u80fd\u4f1a\u4e92\u76f8\u906e\u6321\u7684\u60c5\u51b5, \u5982\u6b63\u9762\u770b\u7403, \u7403\u7684\u8fb9\u7f18\u90e8\u5206</li> <li>D: \u5fae\u8868\u9762\u6cd5\u7ebf\u7684\u5206\u5e03\u60c5\u51b5, \u5206\u5e03\u5f97\u6bd4\u8f83\u96c6\u4e2d\u5219\u955c\u9762, \u5206\u5e03\u5f97\u5206\u6563\u5219\u78e8\u7802(h\u662f\u534a\u7a0b\u5411\u91cf)</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#brdf_1","title":"\u518d\u8c08BRDF","text":"<p>\u5404\u5411\u540c\u6027: BRDF\u5728\u4e0d\u540c\u7684\u65b9\u4f4d\u89d2\u4fdd\u6301\u4e00\u81f4</p> <p>\u5404\u5411\u5f02\u6027: \u65b9\u4f4d\u89d2\u4e0d\u4e00\u6837\u65f6\uff0cBRDF\u4e0d\u4fdd\u6301\u4e00\u81f4(\u8fd9\u91cc\u6240\u8bf4\u7684\u65b9\u4f4d\u89d2\u662f\u6307\u76f8\u5bf9\u65b9\u4f4d\u89d2)</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#brdf_2","title":"BRDF\u7684\u5c5e\u6027:","text":"<ul> <li>\u975e\u8d1f</li> <li>\u7ebf\u6027\u53ef\u52a0</li> <li>\u53ef\u9006</li> <li>\u80fd\u91cf\u5b88\u6052</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#brdf_3","title":"\u5982\u4f55\u6d4b\u91cfBRDF","text":"<p>Motivation:</p> <ul> <li>Avoid need to develop / derive models \u4e0d\u7528\u8d39\u529b\u63a8\u6a21\u578b</li> <li>Automatically includes all of the scattering effects present</li> <li>Can accurately render with real-world materials</li> <li>Useful for product design, special effects, ...</li> <li>\u5b9e\u9645\u548c\u63a8\u7b97\u51fa\u6765\u7684\u7ecf\u5e38\u4f1a\u6709\u5f88\u5927\u5dee\u8ddd</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#color-and-perception","title":"\u989c\u8272\u548c\u611f\u77e5(color and perception)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#light-field-lumigraph","title":"\u5149\u573a(Light Field / Lumigraph)","text":"<p>\u900f\u955c\u6210\u50cf\uff1a\u4e09\u7ef4\u7269\u4f53\u5230\u4e8c\u4f4d\u5e73\u9762\u7684\u6295\u5f71\u3002</p> <p>\u4e09\u7ef4\u5230\u4e8c\u7ef4\u7684\u6295\u5f71\uff0c\u4f1a\u635f\u5931\u4e00\u4e2a\u7ef4\u5ea6\u7684\u4fe1\u606f\uff0c\u8fd9\u4e2a\u7ef4\u5ea6\u5e38\u79f0\u4e3a\u6df1\u5ea6\u8f74\u3002\u5b9e\u9645\u4e0a\u76f8\u673a\u6355\u83b7\u7684\u662f\u573a\u666f\u7a7a\u95f4\u4e2d\u5149\u7ebf\u7684\u8f90\u7167\u5ea6\u4fe1\u606f\u3002\u90a3\u4e48\u5149\u7ebf\u7684\u65b9\u5411\u4fe1\u606f\u4e5f\u4f1a\u4e22\u5931\uff0c\u4e5f\u5c31\u5931\u53bb\u4e86\u6df1\u5ea6\u4fe1\u606f\u3002</p> <p>\u5373\uff0c\u5149\u5b66\u900f\u955c\u6210\u50cf\u5bf9\u4e09\u7ef4\u573a\u666f\u538b\u7f29\u3001\u6295\u5f71\uff1a</p> <ul> <li>\u5149\u7ebf\u65b9\u5411\u4fe1\u606f\u4e22\u5931</li> <li>\u573a\u666f\u7684\u6df1\u5ea6\u4fe1\u606f\u4e22\u5931</li> </ul> <p>\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5149\u573a\u6210\u50cf</p> <ul> <li> <p>\u5149\u573a\uff1a\u662f\u8bb0\u5f55\u4e86\u7a7a\u95f4\u4e2d\u5149\u7ebf\u7684\u96c6\u5408\uff0c\u5305\u542b\u5149\u7ebf\u5728\u7a7a\u95f4\u4e2d\u7684\u4f4d\u7f6e\u548c\u89d2\u5ea6\u4fe1\u606f\u3002</p> </li> <li> <p>\u5149\u573a\u7684\u53d1\u5c55\u53ef\u4ee5\u63cf\u8ff0\u5982\u4e0b\uff1a</p> </li> <li> <p>Adelson EH\u7b49\u7528\u4e03\u7ef4\u5168\u5149\u51fd\u6570\\(P(\\theta,\\phi,\\lambda,t,V_X,V_Y,V_Z)\\)\u63cf\u8ff0\u4e86\u7a7a\u95f4\u4e2d\u7684\u5149\u573a\uff0c\u4e03\u7ef4\u5168\u5149\u51fd\u6570\u8fc7\u4e8e\u590d\u6742\u3001\u6570\u636e\u91cf\u5927\uff0c\u96be\u4ee5\u8bb0\u5f55\u4ee5\u53ca\u5b58\u50a8\u3002\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u7b80\u5316\u5904\u7406\u3002McMillan L \u7b49\u5c06\u7ef4\u5ea6\u964d\u5230\u4e86\u4e94\u7ef4\\(P(x,y,z,\\theta, \\phi)\\)\uff0c\u901a\u8fc7\u8bb0\u5f55RGB\u6765\u7b80\u5316\u6ce2\u957f  \uff0c\u901a\u8fc7\u8bb0\u5f55\u4e0d\u540c\u5e27\u4ee5\u7b80\u5316\u65f6\u95f4 t\u3002\u4e94\u7ef4\u5149\u573a\u8fd8\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u7b80\u5316\uff0c\u8fdb\u800c\u53d1\u5c55\u51fa\u9002\u7528\u4e8e\u5149\u5b66\u7cfb\u7edf\u7684\u5149\u573a\u53cc\u5e73\u9762\u53c2\u6570\u5316\u8868\u5f81\uff0c\u5373\u56db\u53c2\u6570\u5149\u573a\\(P(u,v,s,t)\\)\u3002\u5047\u8bbe\u4e00\u6761\u5149\u7ebf\u5728\u4e24\u4e2a\u4e0d\u5171\u9762\u7684\u5e73\u9762(\\(u,v\\))\u548c\u5e73\u9762(\\(s,t\\))\u5404\u6709\u4e00\u4e2a\u4ea4\u70b9\uff0c\u5219\u8be5\u5149\u7ebf\u53ef\u4ee5\u7528\u8fd9\u4e24\u4e2a\u4ea4\u70b9\u552f\u4e00\u8868\u793a\u3002Ng R \u5f15\u5165\u56fe\u50cf\u7684\u5750\u6807 (\\(x,y\\)) \uff0c\u5f62\u6210\u56db\u53c2\u6570\u5149\u573a \\(P(u,v,x,y)\\) \u8868\u793a\u5f62\u5f0f\u3002\u53cc\u5e73\u9762\u56db\u53c2\u6570\u5149\u573a\u53ef\u4ee5\u8868\u793a\u6210\u50cf\u6240\u9700\u8981\u7684\u6240\u6709\u5149\u7ebf\uff0c\u56e0\u6b64\u5149\u573a\u7684\u7406\u8bba\u7814\u7a76\u548c\u6210\u50cf\u7cfb\u7edf\u7684\u8bbe\u8ba1\u5927\u591a\u6570\u90fd\u4ee5\u5149\u573a\u53cc\u5e73\u9762\u6a21\u578b\u4e3a\u57fa\u7840\u5c55\u5f00\u3002</p> </li> <li> <p>\u5168\u5149\u51fd\u6570: \u6211\u4eec\u80fd\u770b\u5230\u7684\u6240\u6709\u4e1c\u897f\\(P(\\theta,\\phi,\\lambda,t,V_X,V_Y,V_Z)\\)</p> </li> <li>\\(\\theta,\\phi\\): \u5bf9\u5e94\u7403\u9762\u6781\u5750\u6807\u4e0b\u7684\\(\\theta,\\phi\\), \u5171\u540c\u8868\u793a\u4e00\u4e2a\u7403\u9762</li> <li>\\(\\lambda\\): \u5149\u7684\u6ce2\u957f, \u53cd\u6620\u4e86\u989c\u8272</li> <li>\\(t\\): \u65f6\u95f4</li> <li> <p>\\(V_X,V_Y,V_Z\\): \u89c2\u5bdf\u7684\u4f4d\u7f6e</p> </li> <li> <p>\u6700\u5927\u7684\u4f18\u52bf\u662f\u53ef\u4ee5\u5148\u62cd\u7167\u518d\u8c03\u6574\u53c2\u6570 :</p> </li> <li></li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_18","title":"\u989c\u8272","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#spdspectral-power-distribution","title":"SPD(Spectral Power Distribution \u5149\u8c31\u529f\u7387\u5206\u5e03)","text":"<ul> <li> <p>\u5177\u6709\u7ebf\u6027\u53ef\u52a0\u6027</p> </li> </ul> <p>\u989c\u8272\u662f\u4eba\u7684\u4e00\u79cd\u611f\u77e5(perception)\u800c\u4e0d\u662f\u5149\u7684\u56fa\u6709\u5c5e\u6027, \u5149\u7ebf\u6295\u5c04\u5230\u4eba\u7684\u773c\u775b\u91cc, \u7ecf\u8fc7\u4eba\u773c\u91cc\u7684\u4e09\u79cd\u5bf9\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u654f\u611f\u7684\u7ec6\u80de, \u5206\u522b\u5c06\u4e09\u4e2a\u5c5e\u6027\u503c(S, M, L)\u8fd4\u56de\u5927\u8111, \u4eba\u8111\u624d\u80fd\u77e5\u9053\u5149\u7ebf</p> <ul> <li>\u90a3\u4e48, \u6709\u6ca1\u6709\u4e00\u79cd\u53ef\u80fd\u662f\u4eba\u8111\u5904\u7406\u4e0d\u540c\u7684\u5149\u7ebf\u5f97\u5230\u76f8\u540c\u7684(S, M, L)\u5462? \u7b54\u6848\u662f\u6709\u53ef\u80fd, \u8fd9\u5c31\u53eb\u505a\u540c\u8272\u5f02\u8c31\u73b0\u8c61</li> <li>\u610f\u4e49: \u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u5149\u8c31\u8868\u73b0\u7269\u4f53, \u53ea\u8981\u80fd\u9a97\u8fc7\u4eba\u7684\u773c\u775b</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_19","title":"\u989c\u8272\u5982\u4f55\u6df7\u5408?","text":"<ul> <li>\u8ba1\u7b97\u673a\u91cc\u5e38\u7528\"\u52a0\u8272\u7cfb\u7edf\": \u5373RGB\u53ef\u52a0</li> <li>\u7136\u800c\u7531\u4e8eRGB\u4e09\u79cd\u989c\u8272\u662f\u4e09\u79cd\u56fa\u5b9a\u7684\u6ce2\u957f, \u90a3\u4e48\u5149\u8c31\u4e5f\u53ea\u6709\u56fa\u5b9a\u7684\u4e09\u6839\u7ebf, \u65e0\u6cd5\u5f62\u6210\u81ea\u7136\u754c\u90a3\u79cd\u8fde\u7eed\u7684\u5149\u8c31, \u8fd9\u5c31\u5bfc\u81f4\u4e86\u6709\u4e00\u4e9b\u989c\u8272\u65e0\u6cd5\u663e\u793a, \u4e3a\u6b64, \u6211\u4eec\u5f15\u5165CIE RGB, \u5373\u4f7f\u7528\u4e00\u4e2a\u5339\u914d\u51fd\u6570\u6765\u8f85\u52a9\u751f\u6210\u989c\u8272</li> <li></li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_20","title":"\u989c\u8272\u7a7a\u95f4","text":"<p>\u4e0d\u592a\u61c2, \u4ee5\u540e\u61c2\u4e86\u518d\u8865\u4e0a</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#animation","title":"\u52a8\u753b(Animation)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_21","title":"\u5173\u952e\u5e27","text":"<p>\u5f71\u54cd\u52a8\u753b\u6574\u4f53\u8d70\u5411\u7684\u5e27, \u4e2d\u95f4\u7684\u79f0\u4e3a\u8fc7\u6e21\u5e27, \u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u751f\u6210\u8fc7\u6e21\u5e27(\u901a\u8fc7\u63d2\u503c)</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_22","title":"\u7269\u7406\u6a21\u62df","text":"<p>\u53ea\u8981\u80fd\u591f\u6b63\u786e\u5efa\u7acb\u7269\u7406\u6a21\u578b\uff0c\u4e00\u5b9a\u53ef\u4ee5\u5f97\u51fa\u6b63\u786e\u7684\u7269\u7406\u6a21\u62df\u7ed3\u679c\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_23","title":"\u8d28\u70b9\u5f39\u7c27\u7cfb\u7edf","text":"<ul> <li>\u7406\u60f3\u5316\u5f39\u7c27: </li> <li>\u6b63\u5e38\u6709\u957f\u5ea6\u7684\u5f39\u7c27</li> <li>\u5f15\u5165\u963b\u5c3c</li> </ul> <p>\u5f39\u7c27\u7ed3\u6784\uff1a \u4e0d\u540c\u5f39\u7c27\u7684\u7ec4\u5408\uff0c\u4f1a\u6709\u4e0d\u540c\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u6a21\u62df\u4e0d\u540c\u7684\u7269\u54c1\u3002</p> <p>\u5e03\u6599\u6a21\u62df\u63a8\u5bfc\u8fc7\u7a0b</p> \u5e8f\u53f7 \u7ed3\u6784 \u8bf4\u660e 0 \u4e0d\u80fd\u6a21\u62df\u5e03\u6599\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5177\u5907\u5e03\u7684\u7279\u6027\uff08\u4e0d\u80fd\u62b5\u6297\u5207\u529b\u3001\u4e0d\u80fd\u62b5\u6297\u5bf9\u6298\u529b\uff08\u5e03\u6599\u591a\u5c11\u6709\u70b9\u62b5\u6297\u5bf9\u6298\u7684\u80fd\u529b\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u50cf\u7eb8\u4e00\u6837\u88ab\u6298\u53e0\uff09\uff09 1 \u6539\u8fdb\u4e86\u4e00\u70b9\uff0c\u867d\u7136\u80fd\u62b5\u6297\u56fe\u793a\u5bf9\u89d2\u7ebf\u7684\u5207\u529b\uff0c\u4f46\u662f\u5b58\u5728\u5404\u5411\u5f02\u6027\u3002\u4f9d\u7136\u4e0d\u80fd\u62b5\u6297\u6298\u53e0\u3002 2 \u53ef\u4ee5\u62b5\u6297\u5207\u529b\uff0c\u6709\u5404\u5411\u540c\u6027\uff0c\u4e0d\u6297\u5bf9\u6298 3 \u7ea2\u8272skip connection\uff0c\u6ce8\u610f\u7ea2\u7ebf\u7684\u529b\u6bd4\u8f83\u5c0f\u3002\u73b0\u5728\u53ef\u4ee5\u6bd4\u8f83\u597d\u7684\u6a21\u62df\u5e03\u6599 <p>\u200b       </p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_24","title":"\u7c92\u5b50\u7cfb\u7edf","text":"<ul> <li>\u5efa\u6a21\u4e00\u5806\u5fae\u5c0f\u7c92\u5b50\uff0c\u5b9a\u4e49\u6bcf\u4e2a\u7c92\u5b50\u4f1a\u53d7\u5230\u7684\u529b(\u7c92\u5b50\u4e4b\u95f4\u7684\u529b\u3001\u6765\u81ea\u5916\u90e8\u7684\u529b\u3001\u78b0\u649e\u7b49)</li> <li>\u5728\u6e38\u620f\u548c\u56fe\u5f62\u5b66\u4e2d\u975e\u5e38\u6d41\u884c\uff0c\u5f88\u597d\u7406\u89e3\u3001\u5b9e\u73b0</li> </ul> <p>\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u7b97\u6cd5</p> <ul> <li>\u52a8\u753b\u7684\u6bcf\u4e00\u5e27</li> <li>\u521b\u5efa\u65b0\u7684\u7c92\u5b50\uff08\u5982\u679c\u9700\u8981\uff09</li> <li>\u8ba1\u7b97\u6bcf\u4e2a\u7c92\u5b50\u7684\u53d7\u529b</li> <li>\u66f4\u65b0\u6bcf\u4e2a\u7c92\u5b50\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6</li> <li>\u7ed3\u675f\u67d0\u4e9b\u7c92\u5b50\u751f\u547d\uff08\u5982\u679c\u9700\u8981\uff09</li> <li>\u6e32\u67d3</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_25","title":"\u8fd0\u52a8\u5b66","text":"<p>\u53ef\u4ee5\u7c97\u5206\u4e3a\u6b63\u5411\u8fd0\u52a8\u5b66\u548c\u9006\u8fd0\u52a8\u5b66</p> <ul> <li>\u6b63\u5411\u8fd0\u52a8\u5b66: \u53ea\u8981\u5b9a\u4e49\u597d\u9aa8\u9abc\u8fde\u63a5\u65b9\u5f0f, \u77e5\u9053\u89d2\u5ea6\u5373\u53ef\u8ba1\u7b97\u51fa\u70b9\u7684\u4f4d\u7f6e</li> <li>\u9006\u8fd0\u52a8\u5b66: \u521b\u4f5c\u8005\u53ea\u9700\u8981\u8c03\u6574\u70b9\u7684\u4f4d\u7f6e, \u81ea\u52a8\u8ba1\u7b97\u51fa\u65cb\u8f6c\u89d2\u5ea6, \u4f18\u70b9\u662f\u4e0d\u7528\u8ba1\u7b97\u590d\u6742\u7684\u7269\u7406, \u7f3a\u70b9\u662f\u89e3\u4e0d\u552f\u4e00</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#rigging","title":"\u52a8\u753b\u7ed1\u5b9a(Rigging)","text":"<p>\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bf4\u662f\u9006\u8fd0\u52a8\u5b66\u7684\u5e94\u7528, \u6709\u70b9\u50cf\u63d0\u7ebf\u6728\u5076, \u634f\u8138?</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#motion-capture","title":"\u52a8\u4f5c\u6355\u6349(motion capture)","text":"<p>\u65e2\u7136\u53ef\u4ee5\u901a\u8fc7\u70b9\u63a7\u5236\u52a8\u753b, \u90a3\u4e48\u6211\u53ef\u4ee5\u6355\u6349\u4eba\u7684\u5b9e\u9645\u52a8\u4f5c, \u5e76\u53cd\u6620\u5230\u52a8\u753b\u91cc</p> <p>\u4f18\u70b9:</p> <ul> <li>\u5feb\u901f\u83b7\u5f97\u5927\u91cf\u771f\u5b9e\u6570\u636e</li> <li>\u975e\u5e38\u771f\u5b9e   \u7f3a\u70b9</li> <li>\u6602\u8d35\u3001\u51c6\u5907\u5de5\u4f5c\u9ebb\u70e6</li> <li>\u6355\u6349\u7684\u52a8\u753b\u8ddf\u9884\u671f\u827a\u672f\u9700\u8981\u4e0d\u592a\u7b26\u5408\uff0c\u9700\u8981\u8c03\u6574</li> <li>\u63a7\u5236\u70b9\u88ab\u906e\u6321\u95ee\u9898</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_26","title":"\u5355\u7c92\u5b50\u6a21\u62df","text":"<p>\u5b66\u4e60\u5355\u4e2a\u7c92\u5b50\u7684\u8fd0\u52a8\uff0c\u4e4b\u540e\u518d\u63a8\u5e7f\u5230\u591a\u7c92\u5b50\u7cfb\u7edf</p> <ul> <li>\u5047\u8bbe\u7c92\u5b50\u7684\u8fd0\u52a8\u7531\u901f\u5ea6\u77e2\u91cf\u573a\u51b3\u5b9a\uff0c\u901f\u5ea6\u573a\u662f\u5173\u4e8e\u4f4d\u7f6e\u548c\u65f6\u95f4\u7684\u51fd\u6570\uff1av(x, t)</li> <li>\u901f\u5ea6\u573a\uff1a\u5b9a\u4e49\u8d28\u70b9\u5728\u4efb\u4f55\u65f6\u523b\u5728\u573a\u4e2d\u4efb\u4f55\u4f4d\u7f6e\u7684\u901f\u5ea6\u3002\u7ed9\u4e2a\u4f4d\u7f6e\u548c\u65f6\u95f4\uff0c\u5c31\u80fd\u77e5\u9053\u901f\u5ea6</li> <li>\u5982\u4e0b\u56fe\uff0c\u7bad\u5934\u65b9\u5411\u662f\u901f\u5ea6\u65b9\u5411\uff0c\u66f2\u7ebf\u662f\u7c92\u5b50\u5728\u8fd9\u4e2a\u901f\u5ea6\u573a\u4e2d\u7684\u8fd0\u52a8\u8f68\u8ff9\uff08\u7c92\u5b500\u65f6\u523b\u4f4d\u7f6e\u77e5\u9053\uff0c\u4ee5\u540e\u6bcf\u4e2a\u65f6\u523b\u901f\u5ea6\u90fd\u6839\u636e\u901f\u5ea6\u573a\u8fdb\u884c\u53d8\u5316\uff0c\u7531\u4e8e\u901f\u5ea6\u53d8\u5316\uff0c\u4f4d\u7f6e\u4e5f\u4f1a\u8ddf\u968f\u65f6\u95f4\u4ea7\u751f\u53d8\u5316\uff0c\u4ece\u800c\u5f62\u6210\u7684\u8f68\u8ff9\uff09   </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_27","title":"\u5e38\u5fae\u5206\u65b9\u7a0b","text":"<p>\u5df2\u77e5\u901f\u5ea6\uff0c\u5efa\u7acb\u65b9\u7a0b\uff0c\u89e3\u5e38\u5fae\u5206\u65b9\u7a0b\u5c31\u53ef\u4ee5\u5f97\u5230\u4f4d\u7f6e\u91cf</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_28","title":"\u6b27\u62c9\u65b9\u6cd5","text":"<ul> <li>\u7528\u4e0a\u4e00\u65f6\u523b\u7684\u4fe1\u606f\u63a8\u5bfc\u8fd9\u4e00\u65f6\u523b\u7684\u4fe1\u606f(\u663e\u5f0f\u6b27\u62c9/\u524d\u5411\u6b27\u62c9)</li> <li>\u7528\u4e0b\u4e00\u65f6\u523b\u7684\u4fe1\u606f\u63a8\u5bfc\u8fd9\u4e00\u65f6\u523b\u7684\u4fe1\u606f(\u9690\u5f0f\u6b27\u62c9/\u540e\u5411\u6b27\u62c9)</li> <li>\u5f88\u5e38\u7528\u3001\u975e\u5e38\u4e0d\u51c6\u786e\u3001\u975e\u5e38\u4e0d\u7a33\u5b9a</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_29","title":"\u53ef\u4ee5\u7528\u4ec0\u4e48\u65b9\u6cd5\u6d88\u9664\u4e0d\u7a33\u5b9a\u6027?","text":"<ul> <li>\u4e2d\u70b9\u65b9\u6cd5</li> <li>\u81ea\u9002\u5e94\u6b65\u957f</li> <li>\u9f99\u683c\u5e93\u5854\u65b9\u6cd5(Runge-Kutta)</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_30","title":"\u521a\u4f53\u6a21\u62df","text":"<p>\u6a21\u62df\u521a\u4f53\u5f88\u7b80\u5355</p> <ul> <li>\u521a\u4f53\u4e0d\u4f1a\u53d1\u751f\u5f62\u53d8</li> <li>\u7c7b\u4f3c\u4e8e\u7c92\u5b50\u7cfb\u7edf\uff0c\u521a\u4f53\u76f8\u5f53\u4e8e\u5185\u90e8\u6240\u6709\u7c92\u5b50\u4ee5\u76f8\u540c\u65b9\u5f0f\u8fd0\u52a8</li> <li>\u4e0d\u540c\u7684\u662f\u521a\u4f53\u7684\u6a21\u62df\u4e2d\uff0c\u4f1a\u8003\u8651\u66f4\u591a\u7684\u5c5e\u6027</li> <li>\u6709\u4ee5\u4e0b\u5c5e\u6027\uff0c\u53ef\u4ee5\u6839\u636e\u524d\u9762\u63d0\u5230\u7684\u6b27\u62c9\u65b9\u6cd5\u6216\u8005\u5404\u79cd\u5176\u4ed6\u7a33\u5b9a\u6027\u597d\u7684\u65b9\u6cd5\u5f97\u51fa\u7ecf\u8fc7\u0394t\u4ee5\u540e\u7684\u4f4d\u7f6e\u3001\u89d2\u5ea6\u7b49\u4fe1\u606f</li> </ul> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#_31","title":"\u6d41\u4f53\u6a21\u62df","text":"<p>\u901a\u8fc7\u5f62\u6210\u4e00\u4e9b\u5c0f\u7403\uff0c\u901a\u8fc7\u5b83\u4eec\u7684\u4f4d\u7f6e\u6765\u6a21\u62df\u6c34\u548c\u6d6a\u82b1\u3002\u57fa\u4e8e\u4f4d\u7f6e\u7684\u65b9\u6cd5\u4e0d\u662f\u7269\u7406\u7684\uff0c\u6ca1\u6709\u80fd\u91cf\u635f\u5931\uff0c\u867d\u7136\u53ef\u4ee5\u4eba\u4e3a\u7684\u52a0\u5165\u80fd\u91cf\u8870\u51cf \u4e3b\u8981\u601d\u60f3</p> <ul> <li>\u6c34\u662f\u7531\u4e00\u4e2a\u4e2a\u521a\u4f53\u5c0f\u7403\u7ec4\u6210\u7684</li> <li>\u6c34\u4e0d\u80fd\u88ab\u538b\u7f29</li> <li>\u4efb\u4f55\u4e00\u4e2a\u65f6\u523b\uff0c\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5bc6\u5ea6\u53d1\u751f\u53d8\u5316\uff08\u4e0d\u540c\u4e8e\u5e73\u9759\u6c34\u65f6\u8be5\u7a7a\u95f4\u7684\u5c0f\u7403\u7684\u5bc6\u5ea6\uff09\uff0c\u5c31\u5fc5\u987b\u901a\u8fc7\u79fb\u52a8\u5c0f\u7403\u7684\u4f4d\u7f6e\u8fdb\u884c\u5bc6\u5ea6\u4fee\u6b63</li> <li>\u9700\u8981\u77e5\u9053\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5bc6\u5ea6\u68af\u5ea6\uff08\u8fd9\u662f\u673a\u5668\u5b66\u4e60\u7684\u68af\u5ea6\u4e0b\u964d\uff09</li> <li>gradient descent\u68af\u5ea6\u4e0b\u964d</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#vs-eulerian-vs-lagrangian","title":"\u6b27\u62c9 vs \u62c9\u683c\u6717\u65e5 (Eulerian vs Lagrangian)","text":"<p>\u62c9\u683c\u6717\u65e5\u65b9\u6cd5\u53c8\u53eb\u8d28\u70b9\u6cd5</p> <p>\u6b27\u62c9\u6cd5\u53c8\u53eb\u7f51\u683c\u6cd5(\u548c\u4e0a\u9762\u89e3\u5e38\u5fae\u5206\u65b9\u7a0b\u7684\u6b27\u62c9\u65b9\u6cd5\u65e0\u5173)</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/#mterial-point-methodmpm","title":"Mterial Point Method\uff08MPM\uff09","text":"<p>\u628a\u6b27\u62c9\u6cd5\u548c\u62c9\u683c\u6717\u65e5\u6cd5\u6df7\u5408\u5728\u4e00\u8d77</p> <ul> <li>\u62c9\u683c\u6717\u65e5\u6cd5\uff1a\u8003\u8651\u6bcf\u4e2a\u7c92\u5b50\u90fd\u5e26\u6709\u4e00\u4e9b\u6750\u8d28\u5c5e\u6027</li> <li>\u6b27\u62c9\u6cd5\uff1a\u7528\u7f51\u683c\u505a\u6570\u503c\u79ef\u5206\u5904\u7406</li> <li>\u6df7\u5408\uff1a\u7c92\u5b50\u628a\u5c5e\u6027\u4f20\u7ed9\u7f51\u683c\uff0c\u7f51\u683c\u8ba1\u7b97\u5904\u7406\u66f4\u65b0\u540e\u8fd4\u8fd8\u7ed9\u7c92\u5b50</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/","title":"GAMES202 \u9ad8\u8d28\u91cf\u5b9e\u65f6\u6e32\u67d3","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture1-introduce","title":"Lecture1 Introduce","text":"<p>\u5b9e\u65f6\uff1a30fps\u4ee5\u4e0a </p> <p>Interactive\uff1a10fps\u5de6\u53f3\uff0c\u4e00\u79d2\u4e00\u5e27\u4e24\u79d2\u4e00\u5e27is also acceptable</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture2-review","title":"Lecture2 Review","text":"<p>\u6e32\u67d3\u7ba1\u7ebf\uff1a\u6e32\u67d3\u5c31\u662f\u7531\u6a21\u578b\u6570\u636e\u53d8\u6210\u56fe\u50cf\u6570\u636e\u7684\u8fc7\u7a0b\uff0c\u800c\u6e32\u67d3\u7ba1\u7ebf\u8bbe\u8ba1\u5c31\u662f\u73b0\u5728\u7684gpu\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u9996\u5148\u7269\u4f53\u5728\u5728\u6a21\u578b\u6570\u636e\u4e2d\u4f1a\u88ab\u8868\u793a\u4e3a\u4e00\u7cfb\u5217\u7684\u70b9\u548c\u5176\u8fde\u63a5\u5173\u7cfb\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u52a0\u8f7d\u5230gpu\u7684\u663e\u5b58\u4e2d\uff08VBO\uff09\uff0c\u7136\u540e\u8fdb\u884c\u4e3b\u8981\u7684\u4e24\u4e2a\u9636\u6bb5\uff0c\u5206\u522b\u662f\u51e0\u4f55\u9636\u6bb5\u548c\u5149\u6805\u5316\u9636\u6bb5\u3002</p> <ul> <li> <p>\u9996\u5148\u662f\u51e0\u4f55\u9636\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u9876\u70b9\u8fdb\u884c\u5904\u7406</p> </li> <li> <p>\u9996\u5148\u4f7f\u7528vertex shader\u6765\u5904\u7406\u8fd9\u4e9b\u9876\u70b9\uff0c\u5c06\u4ed6\u4eec\u4ece\u4e16\u754c\u5750\u6807\u53d8\u5316\u5230NDC\uff08model-view-projection\uff09\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u4e00\u4e9b\u4fe1\u606f\u5904\u7406\uff0c\u5982\u5149\u7167\u3001\u9634\u5f71\u7b49\uff1b</p> </li> <li> <p>\u63a5\u4e0b\u6765\u662f\u66f2\u9762\u7ec6\u5206\u7740\u8272\u5668\u8fdb\u884c\u66f2\u9762\u7ec6\u5206\uff08loop\u7b97\u6cd5\u6216\u8005catmull-Clark\u7b97\u6cd5\uff09\u6216\u8005\u66f2\u9762\u7b80\u5316\uff08\u574d\u7f29\uff0c\u4e8c\u6b21\u8bef\u5dee\uff09</p> </li> <li> <p>\u7136\u540e\u662f\u51e0\u4f55\u7740\u8272\u5668\uff0c\u7531\u4e8e\u5e76\u884c\u5316\u4f4e\uff0c\u8fd9\u91cc\u53ea\u9002\u5408\u8fdb\u884c\u9876\u70b9\u7684\u589e\u5220\u7b49\u9876\u70b9\u7740\u8272\u5668\u505a\u4e0d\u5230\u7684\u4e8b</p> </li> <li> <p>\u63a5\u4e0b\u6765\u662f\u51e0\u4f55\u9636\u6bb5\u7684\u6700\u540e\u4e00\u6b65\uff0c\u9876\u70b9\u540e\u5904\u7406\uff0c\u5c06ndc\u4e2d\u7684\u6807\u51c6\u8bbe\u5907\u5750\u6807\u8f6c\u6362\u4e3a\u5c4f\u5e55\u5750\u6807\uff0c\u628a\u9876\u70b9\u4fe1\u606f\u5b58\u5165\u663e\u5b58\u4e2d</p> </li> <li> <p>\u73b0\u5728\u5f00\u59cb\u5149\u6805\u5316\u9636\u6bb5</p> </li> <li> <p>\u7b2c\u4e00\u6b65\u56fe\u5143\u7ec4\u88c5\uff0c\u5c06\u9876\u70b9\u8fde\u63a5\u6210\u9762\u3001\u7ebf</p> </li> <li>\u7b2c\u4e8c\u6b65\u904d\u5386\u4e09\u89d2\u5f62\u5149\u6805\u5316\uff0c\u5c06\u4e09\u89d2\u5f62\u201c\u6253\u6563\u201d\u5230\u50cf\u7d20\uff08\u7247\u5143\uff09\u91cc\uff0c\u8fd9\u91cc\u53ef\u80fd\u4f1a\u7528\u5230\u63d2\u503c\u3001\u6297\u952f\u9f7f</li> <li>\u7b2c\u4e09\u6b65\u4f7f\u7528\u7247\u5143\u7740\u8272\u5668\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u529f\u80fd\u53ef\u4ee5\u5b9e\u73b0\uff0c\u6bd4\u5982Phong/Blinn Phong\u7b49\u5149\u7167\u6a21\u578b\uff0c\u53ef\u4ee5\u81ea\u7531\u5730\u6839\u636e\u9876\u70b9\u6570\u636e\u83b7\u5f97\u60f3\u8981\u7684\u989c\u8272</li> <li>\u7b2c\u56db\u6b65\u6df7\u5408\uff0c\u8fdb\u884c\u5404\u79cd\u6d4b\u8bd5\uff0c\u5982\u88c1\u526a\u6d4b\u8bd5\uff08\u9009\u62e9\u8981\u6e32\u67d3\u7684\u90e8\u5206\uff09\u3001\u900f\u660e\u6d4b\u8bd5\uff08\u5728OpenGL ES3.0\u4e2d\u88ab\u5220\u9664\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e0a\u8fdb\u884c\uff09\u3001\u6a21\u677f\u6d4b\u8bd5\uff08\u540c\u6837\u662f\u9009\u62e9\u8981\u6e32\u67d3\u7684\u90e8\u5206\uff09\u3001\u6df1\u5ea6\u6d4b\u8bd5\uff08\u5728\u67d0\u4e9b\u5b9e\u73b0\u4e2d\u4f1a\u4f7f\u7528early-z\u7684\u65b9\u6cd5\uff0c\u5373\u5148\u8fdb\u884c\u6df1\u5ea6\u6d4b\u8bd5\u9009\u62e9\u9700\u8981\u7684\u7247\u5143\uff0c\u4f46\u8fd9\u53c8\u4f1a\u5bfc\u81f4\u900f\u660e\u7269\u4f53\u51fa\u73b0\u95ee\u9898\uff0c\u9700\u8981\u4e00\u4e9bhack\uff09\u3001\u900f\u660e\u5ea6\u6df7\u5408\u3001\u6296\u52a8</li> </ul> <p>\u901a\u8fc7\u4e86\u6240\u6709\u6d4b\u8bd5\u7247\u5143\uff08\u50cf\u7d20\uff09\u4e5f\u4e0d\u662f\u76f4\u63a5\u753b\u5230\u5c4f\u5e55\u4e0a\u53bb\u7684\uff0c\u5176\u5b9e\u8fd9\u4e9b\u50cf\u7d20\u53ef\u4ee5\u8f93\u51fa\u5230\u4efb\u4f55\u7eb9\u7406\u56fe\u3001\u7f13\u51b2\u6216\u8005\u5c4f\u5e55\u4e0a\u53bb\uff0c\u4e0d\u8fc7\u76f4\u63a5\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u753b\u9762\u6495\u88c2\uff0c\u8fd9\u5c31\u9700\u8981\u8fdb\u884c\u5782\u76f4\u540c\u6b65\uff0c\u5373\u8f93\u51fa\u5230\u4e00\u4e2abuffer\u4e2d\uff0c\u7b49\u5f85buffer\u5b8c\u5168\u6e32\u67d3\u5b8c\u6bd5\u518d\u4ea4\u6362\u5f53\u524d\u663e\u793a\u7684buffer\u548c\u521a\u521a\u6e32\u67d3\u597d\u7684buffer\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u53cc\u91cd\u7f13\u51b2\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture3-shadow1","title":"Lecture3 Shadow(1)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#shadow-mapping","title":"Shadow Mapping","text":"<ul> <li>\u4e24\u8d9f\uff082-pass\uff09\u7b97\u6cd5</li> <li>\u56fe\u50cf\u7a7a\u95f4\u7b97\u6cd5\uff0c\u4e0d\u9700\u8981\u77e5\u9053\u573a\u666f\u4e2d\u7684\u51e0\u4f55\uff0c\u4f46\u4f1a\u5bfc\u81f4\u81ea\u906e\u6321\u73b0\u8c61\u548c\u8d70\u6837\uff08\u672c\u8d28\u90fd\u662fshadow map\u7684\u5206\u8fa8\u7387\u592a\u591f\u9ad8\uff09</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#approximation-in-rtr","title":"Approximation in RTR","text":"<p>\u5728\u5b9e\u65f6\u6e32\u67d3\u4e2d\uff0c\u6211\u4eec\u66f4\u5173\u5fc3\u201c\u8fd1\u4f3c\u201d\u76f8\u7b49</p> <p>\u5b9e\u65f6\u6e32\u67d3\u4e2d\u4e00\u4e2a\u91cd\u8981\u7684\u8fd1\u4f3c\uff1a\\(\\int_{\\Omega} f(x) g(x) \\mathrm{d} x \\approx \\frac{\\int_{\\Omega} f(x) \\mathrm{d} x}{\\int_{\\Omega} \\mathrm{d} x} \\cdot \\int_{\\Omega} g(x) \\mathrm{d} x\\)</p> <p>\u6240\u4ee5\u53ef\u4ee5\u628a\u6e32\u67d3\u65b9\u7a0b\u91cc\u7684visibility\u9879\u5355\u72ec\u63d0\u51fa\u6765</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#pcsspercentage-closer-soft-shadows","title":"PCSS\uff08Percentage closer soft shadows)","text":"<p>\u8f6f\u9634\u5f71\uff08\u9634\u5f71\u7684\u754c\u9650\u5f88\u6a21\u7cca\uff09</p> <p>PCF\uff08Percentage Closer Filtering\uff09\uff1a\u6700\u5148\u63d0\u51fa\u6765\u662f\u4e3a\u4e86\u89e3\u51b3\u6297\u952f\u9f7f\uff0c\u540e\u6765\u53d1\u73b0\u5728\u8f6f\u9634\u5f71\u4e0a\u4e5f\u6709\u5e94\u7528\uff0c\u505a\u6cd5\u662f\u8ba1\u7b97\u7740\u8272\u70b9\u4e0eshadow map\u4e2d\u8be5\u70b9\u6df1\u5ea6\u503c\u7684\u6bd4\u8f83\u7684\u65f6\u5019\uff0c\u4e0d\u4ec5\u91c7\u6837\u8be5\u50cf\u7d20\u70b9\u7684\u6df1\u5ea6\u503c\uff0c\u540c\u65f6\u91c7\u6837\u5468\u8fb9\u591a\u4e2ashadow map\u70b9\u6df1\u5ea6\u503c\uff0c\u9010\u4e00\u6bd4\u8f83\u5e76\u6c42\u5e73\u5747\u503c\uff0c\u4ece\u800c\u83b7\u5f97\u4e86\u4e00\u4e2a\u4ece0\u52301\u7684\u8fde\u7eed\u5206\u5e03\uff0c\u80fd\u591f\u8868\u73b0\u4e0d\u540c\u660e\u6697\u7a0b\u5ea6\u7684\u9634\u5f71\u3002</p> <p>PCSS\uff1a\u4e0d\u540c\u906e\u6321\u7269\u7684\u6df1\u5ea6\u51b3\u5b9a\u4e0d\u540c\u7684Filter size</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture4-shadow2","title":"Lecture4 Shadow(2)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#vssm-variance-soft-shadow-mapping","title":"VSSM (Variance soft shadow mapping)","text":"<p>\u5229\u7528\u6b63\u6001\u5206\u5e03\u51fd\u6570\u6765\u6c42PCSS\u4e2d\u201c\u6743\u201d\u7684\u8fd1\u4f3c\u503c</p> <p>\u65b9\u5dee\u53ef\u4ee5\u7528\u516c\u5f0f\\(Var(X)=E(X^2)-E^2(X)\\)\uff0c\u5176\u4e2d\\(X^2\\)\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u7528shadow map\u7684\u4e00\u4e2a\u901a\u9053\u5b58\u50a8</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture5-1ibl","title":"Lecture5 \u73af\u5883\u5149\u7167(1)\uff08IBL\uff09","text":"<p>\u6709\u5411\u8ddd\u79bb\u573aSDF\uff0c\u53ef\u4ee5\u628a\u5b9a\u4e49\u4e2d\u7684\u201c\u5b89\u5168\u8ddd\u79bb\u201d\u6362\u6210\u201c\u5b89\u5168\u89d2\u5ea6\u201d\u5373\u53ef\u7528\u4e8eshadow</p> <p></p> <p></p> <p>\u8be5\u65b9\u6cd5\u53ebsplit sum approximation</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture6-2","title":"Lecture6 \u73af\u5883\u5149\u7167(2)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#spherical-harmonics","title":"\u7403\u8c10\u51fd\u6570\uff08Spherical Harmonics\uff09","text":"<p>\u7528\u4e00\u7cfb\u5217\u5b9a\u4e49\u5728\u7a7a\u95f4\u4e2d\u7684\u4e8c\u7ef4\u57fa\u51fd\u6570\uff08\u53ea\u9700\u8981\u4e24\u7ef4\u5373\u53ef\u8868\u793a   \u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u65b9\u5411\uff09\u53bb\u62df\u5408\u4e00\u4e2a\u4e09\u7ef4\u7a7a\u95f4\u51fd\u6570</p> <p>PRT(Precomputed Radiance Transfer)\uff1a</p> <ul> <li> <p>\u6211\u4eec\u628arendering equation\u5206\u4e3a\u4e24\u90e8\u5206,lighting \u548c light transport.</p> </li> <li> <p>\u5047\u8bbe\u5728\u6e32\u67d3\u65f6\u573a\u666f\u4e2d\u53ea\u6709lighting\u9879\u4f1a\u53d1\u751f\u53d8\u5316(\u65cb\u8f6c,\u66f4\u6362\u5149\u7167\u7b49),\u7531\u4e8elighting\u662f\u4e00\u4e2a\u7403\u9762\u51fd\u6570,\u56e0\u6b64\u53ef\u4ee5\u7528\u57fa\u51fd\u6570\u6765\u8868\u793a,\u5728\u9884\u8ba1\u7b97\u9636\u6bb5\u8ba1\u7b97\u51falighting.</p> </li> <li> <p>\u800clight transport(visibility\u548cbrdf)\u662f\u4e0d\u53d8\u7684,\u56e0\u6b64\u76f8\u5f53\u4e8e\u5bf9\u4efb\u4e00shading point\u6765\u8bf4,light transport\u9879\u56fa\u5b9a\u7684,\u53ef\u4ee5\u8ba4\u4e3a\u662fshading point\u81ea\u5df1\u7684\u6027\u8d28,light transport\u603b\u4f53\u6765\u8bf4\u8fd8\u662f\u4e00\u4e2a\u7403\u9762\u51fd\u6570,\u56e0\u6b64\u4e5f\u53ef\u4ee5\u5199\u6210\u57fa\u51fd\u6570\u5f62\u5f0f,\u662f\u53ef\u4ee5\u9884\u8ba1\u7b97\u51fa\u7684.</p> </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture7-1","title":"Lecture7 \u5168\u5c40\u5149\u7167(1)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#rsmreflective-shadow-maps","title":"RSM\uff08Reflective Shadow Maps\uff09","text":"<p>\u672c\u8d28\u4e0a\u8fd8\u662f\u5e94\u7528\u4e00\u4e2ashadow map\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u53ea\u5b58\u6df1\u5ea6\u503c\uff0c\u8fd8\u8981\u5b58\u4e16\u754c\u5750\u6807\u3001\u6cd5\u7ebf\u3001flux</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lpvlight-propagation-volumes","title":"LPV\uff08Light Propagation Volumes\uff09","text":"<p>Steps:</p> <ol> <li>\u77e5\u9053\u54ea\u4e9b\u70b9\u4f5c\u4e3a\u6b21\u7ea7\u5149\u6e90(virtual light point)\uff08\u63a5\u53d7\u76f4\u63a5\u5149\u7167\uff09</li> <li>\u4f7f\u7528RSM</li> <li>\u6ce8\u5165(inject)\u5230\u573a\u666f\u4e2d\u76843D\u683c\u5b50\u4e2d</li> <li>\u5212\u5206\u573a\u666f\u4e3a3D\u7eb9\u7406</li> <li>\u904d\u5386\u6bcf\u4e2a\u683c\u5b50\uff0c\u627e\u5230\u5305\u542b\u5728\u5176\u4e2d\u7684\u6b21\u7ea7\u5149\u6e90</li> <li>\u5c06\u6b21\u7ea7\u5149\u6e90\u7684\u56db\u9762\u516b\u65b9\u7684radiance\u52a0\u8d77\u6765\uff0c\u7528sh\u8868\u793a\uff082\u9636\u53734\u4e2a\u6570\u53ef\u8868\u793a\u4e00\u4e2a\u683c\u5b50\uff09</li> <li>\u4f20\u64ad\uff08propagation)</li> <li>\u4e00\u4e2a\u683c\u5b50\u4f20\u64ad\u5230\u76f8\u90bb\u7684\u516d\u4e2a\u683c\u5b50\u4e2d\u53bb\uff08\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u8ba4\u4e3a\u662fdiffuse\uff09</li> <li>\u540c\u6837\u52a0\u8d77\u6765\u7528sh\u8868\u793a</li> <li>\u91cd\u590d\u8fed\u4ee3\u76f4\u5230\u7a33\u5b9a\uff0c\u5927\u6982\u4e09\u56db\u6b21\uff08\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u56db\u8d9f\u7684\u7b97\u6cd5\uff09</li> <li>\u6e32\u67d3</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u7740\u8272\u70b9\uff0c\u627e\u5230\u4ed6\u6240\u4f4d\u4e8e\u7684\u683c\u5b50</li> <li>\u83b7\u53d6\u8be5\u683c\u5b50\u6240\u6709\u5165\u5c04\u7684radiance</li> <li>\u7740\u8272</li> </ol> <p>\u95ee\u9898\uff1a\u5f53\u683c\u5b50\u5212\u5206\u5f97\u6bd4\u8f83\u5927\u65f6\uff0c\u53ef\u80fd\u683c\u5b50\u5185\u90e8\u4f1a\u6709\u906e\u6321\u5173\u7cfb\uff0c\u4ee5\u81f3\u4e8e\u9519\u8bef\u5730\u5411\u6240\u6709\u516d\u4e2a\u9762propagation\u4e86\uff0c\u4f46\u662f\u82e5\u5212\u5206\u5f97\u6bd4\u8f83\u5c0f\uff0c\u5f88\u5927\u5e45\u589e\u52a0\u6027\u80fd\u6d88\u8017\uff0c\u4f46\u662f\u53ef\u4ee5\u81ea\u9002\u5e94\u683c\u5b50\u7684\u5927\u5c0f</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#vxgivoxel-global-illumination","title":"VXGI\uff08Voxel Global Illumination\uff09","text":"<p>\u4e5f\u662f\u4e24\u8d9f\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u4e0eRSM\u6709\u4e00\u4e9b\u533a\u522b\uff1a</p> <ol> <li>\u6b21\u7ea7\u5149\u6e90\uff1aRSM\u4e2d\u662fTexel\uff0cVXGI\u4e2d\u662fVoxel</li> <li>\u5149\u7ebf\uff1aRSM\u4e2d\u662f\u4f20\u64ad\uff08\u4ece\u5149\u6e90\u51fa\u53d1\uff09\uff0cVXGI\u4e2d\u662f\u8ffd\u8e2a\uff1a\u4ece\u76f8\u673a\u51fa\u53d1\uff0c\u6253\u5230\u6bcf\u4e00\u4e2apixel\u4e0a,\u6839\u636epixel\u4e0a\u4ee3\u8868\u7684\u7269\u4f53\u6750\u8d28\u505a\u51fa\u4e0d\u540c\u7684\u64cd\u4f5c,\u5982\u679c\u662fglossy\u5219\u6253\u51fa\u4e00\u4e2a\u9525\u5f62\u533a\u57df,diffuse\u5219\u6253\u51fa\u82e5\u5e72\u4e2a\u9525\u5f62\u533a\u57df,\u6253\u51fa\u7684\u9525\u5f62\u533a\u57df\u4e0e\u573a\u666f\u4e2d\u4e00\u4e9b\u5df2\u7ecf\u5b58\u5728\u7684voxel\u76f8\u4ea4,\u8fd9\u4e9bvoxel\u5bf9\u4e8eShading point\u7684\u8d21\u732e\u53ef\u4ee5\u7b97\u51fa\u6765,\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u5bf9\u6bcf\u4e00\u4e2ashading point\u90fd\u505a\u4e00\u4e2acone tracing,\u53ef\u60f3\u800c\u77e5,\u8fd9\u4e2a\u901f\u5ea6\u6bd4\u8d77LPV\u6765\u8bf4\u662f\u5f88\u6162\u7684,\u4f46\u662f\u662f\u53ef\u4ee5\u4f18\u5316\u7684,\u6682\u4e14\u4e0d\u63d0.</li> </ol> <p>\u5177\u4f53\u6b65\u9aa4\uff1a</p> <ol> <li>Light pass\uff1a\u8bb0\u5f55\u7684\u662f\u76f4\u63a5\u5149\u6e90\u4ece\u54ea\u4e9b\u8303\u56f4\u6765\uff08\u7eff\u8272\u90e8\u5206\uff09\uff0c\u8bb0\u5f55\u5404\u4e2a\u53cd\u5c04\u8868\u9762\u7684\u6cd5\u7ebf\uff08\u6a59\u8272\u90e8\u5206\uff09\uff0c\u901a\u8fc7\u8f93\u5165\u65b9\u5411\u548c\u6cd5\u7ebf\u8303\u56f4\u4e24\u4e2a\u4fe1\u606f\u7136\u540e\u901a\u8fc7\u8868\u9762\u7684\u6750\u8d28\uff0c\u6765\u51c6\u786e\u7684\u7b97\u51fa\u51fa\u5c04\u7684\u5206\u5e03\uff0c\u8fd9\u6837\u5c31\u6bd4LPV\u8ba4\u4e3a\u683c\u5b50\u8868\u9762\u662fdiffuse\u518d\u7528SH\u6765\u538b\u7f29\u7684\u65b9\u6cd5\u8981\u51c6\u786e\uff0c\u7136\u540e\u5efa\u7acb\u66f4\u9ad8\u5c42\u7ea7\u683c\u5b50\u7684\u8fd9\u4e9b\u7279\u6027\u3002</li> </ol> <p></p> <ol> <li> <p>Camera pass\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u50cf\u7d20\uff0c\u77e5\u9053\u4e86Camera Ray\u7684\u65b9\u5411\u3002</p> </li> <li> <p>\u5bf9\u4e8eGlossy\u7684\u8868\u9762\uff0c\u5411\u53cd\u5c04\u65b9\u5411\u8ffd\u8e2a\u51fa\u4e00\u4e2a\u9525\u5f62(cone)\u533a\u57df\uff1b\u57fa\u4e8e\u8ffd\u8e2a\u51fa\u7684\u5706\u9525\u9762\u7684\u5927\u5c0f\uff0c\u5bf9\u683c\u5b50\u7684\u5c42\u7ea7\u8fdb\u884c\u67e5\u8be2\uff0c\u5c31\u662f\u5bf9\u4e8e\u573a\u666f\u4e2d\u7684\u6240\u6709\u4f53\u7d20\u90fd\u8981\u5224\u65ad\u662f\u4e0d\u662f\u4e0e\u8fd9\u4e2a\u9525\u5f62\u76f8\u4ea4\uff0c\u5982\u679c\u76f8\u4ea4\u7684\u8bdd\u5c31\u8981\u628a\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u7684\u95f4\u63a5\u5149\u7167\u7684\u8d21\u732e\u7b97\u51fa\u6765(\u6211\u4eec\u5b58\u50a8\u4e86\u4f53\u7d20\u7684\u5149\u7167\u8f93\u5165\u65b9\u5411\u548c\u6cd5\u7ebf\u65b9\u5411,\u56e0\u6b64\u53ef\u4ee5\u7b97\u51fa\u5176\u8f93\u51fa\u7684radiance,\u5c06cone\u533a\u57df\u5185\u6240\u6709\u4f53\u7d20\u7684radiance\u90fd\u7b97\u51fa\u6765\u4ece\u800c\u5728shading point\u5f97\u5230\u95f4\u63a5\u5149\u7167)\uff0c\u4e5f\u5c31\u662f\u6839\u636e\u4f20\u64ad\u51fa\u7684\u8ddd\u79bb\u8fdc\u8fd1\u627e\u5bf9\u5e94\u5c42\u7ea7\u7684\u4f53\u7d20\uff0c\u7136\u540e\u627e\u8986\u76d6\u7684\u8303\u56f4\u3002</p> <p></p> </li> <li> <p>\u5bf9\u4e8ediffuse\u7684\u60c5\u51b5\u6765\u8bf4,\u901a\u5e38\u8003\u8651\u6210\u82e5\u5e72\u5706\u9525\uff0c\u5ffd\u7565\u5706\u9525Tracing\u65f6\u7684\u91cd\u53e0\u548c\u7a7a\u9699</p> <p></p> </li> </ol> <p>\u603b\u7ed3\uff1a</p> <p>LPV\u662f\u628a\u6240\u6709\u7684\u6b21\u7ea7\u5149\u6e90\u53d1\u51fa\u7684Radiance\u4f20\u64ad\u5230\u4e86\u573a\u666f\u4e2d\u7684\u6240\u6709\u4f4d\u7f6e\uff0c\u53ea\u9700\u8981\u505a\u4e00\u6b21\u4ece\u800c\u8ba9\u573a\u666f\u6bcf\u4e2aVoxel\u90fd\u6709\u81ea\u5df1\u7684radiance\uff0c\u4f46\u662f\u7531\u4e8eLPV\u4f7f\u7528\u76843D\u7f51\u683c\u7279\u6027\uff0c\u5e76\u4e14\u91c7\u7528\u4e86SH\u8fdb\u884c\u8868\u793a\u548c\u538b\u7f29\uff0c\u56e0\u6b64\u7ed3\u679c\u5e76\u4e0d\u51c6\u786e\uff0c\u800c\u4e14\u7531\u4e8e\u4f7f\u7528\u4e86SH\u56e0\u6b64\u53ea\u80fd\u8003\u8651diffuse\u7684,\u4f46\u662f\u901f\u5ea6\u662f\u5f88\u5feb\u7684\u3002</p> <p>VXGI\u628a\u573a\u666f\u7684\u6b21\u7ea7\u5149\u6e90\u8bb0\u5f55\u4e3a\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff0c\u5bf9\u4e8e\u4e00\u4e2aShading Point\uff0c\u6211\u4eec\u8981\u53bb\u901a\u8fc7Corn Tracing\u627e\u5230\u54ea\u4e9b\u6b21\u7ea7\u5149\u6e90\u80fd\u591f\u7167\u4eae\u8fd9\u4e2a\u70b9\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture8-2","title":"Lecture8 \u5168\u5c40\u5149\u7167(2)","text":"<p>\u5c4f\u5e55\u7a7a\u95f4\uff08screen space\uff09</p> <p>\u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b\u6211\u4eec\u8bb2\u4e86\u8fd9\u4e48\u591a\u7684\u51e0\u79cd\u65b9\u6cd5\u90fd\u662f\u4ec0\u4e48\u7c7b\u578b\u7684:</p> <ul> <li>LPV\u548cVXGI\u662f\u5c5e\u4e8e\u57283D\u7a7a\u95f4\u7684GI</li> <li>RSM\u662f\u5c5e\u4e8e\u5728\u56fe\u50cf\u7a7a\u95f4\u7684GI</li> <li>SSAO\u548cSSDO\u662f\u5c5e\u4e8e\u5c4f\u5e55\u7a7a\u95f4\u7684GI</li> </ul> <p>\u4ec0\u4e48\u662f\u5c4f\u5e55\u7a7a\u95f4\uff1a</p> <ol> <li>\u4f7f\u7528\u7684\u6240\u6709\u4fe1\u606f\u90fd\u6765\u81ea\u201c\u5c4f\u5e55\u201d\uff0c\u4e5f\u5c31\u662f\u505a\u5168\u5c40\u5149\u7167\u4e4b\u524d\u5c4f\u5e55\u4e0a\u80fd\u770b\u5230\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4e5f\u5c31\u662f\u505a\u5168\u5c40\u5149\u7167\u4e4b\u524d\u7684\u76f4\u63a5\u5149\u7167\u4fe1\u606f\uff1b</li> <li>\u6362\u4e00\u4e2a\u89d2\u5ea6\u8bf4\uff0c\u662f\u5df2\u7ecf\u6e32\u67d3\u8fc7\u7684\u573a\u666f\u7684\u540e\u5904\u7406</li> <li>\u4e3a\u4e86\u4e0e\u6b64\u533a\u522b\u6211\u4eec\u628aRSM\u4e0eSM\u7684\u65b9\u6cd5\u79f0\u4e3a\u56fe\u50cf\u7a7a\u95f4\uff0c\u56e0\u4e3a\u4fe1\u606f\u662f\u6765\u81ea\u4ece\u706f\u5149\u770b\u5411\u7684\u573a\u666f \u6240\u83b7\u5f97\u7684\u4fe1\u606f\u3002</li> </ol>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#ssaoscreen-space-ambient-occlusion","title":"SSAO\uff08Screen Space Ambient Occlusion \u5c4f\u5e55\u7a7a\u95f4\u73af\u5883\u5149\u906e\u853d\uff09","text":"<p>\u4e3a\u4ec0\u4e48\u8981AO?</p> <ol> <li>\u6613\u5b9e\u73b0</li> <li>\u52a0\u5f3a\u4e86\u7269\u4f53\u7684\u76f8\u5bf9\u4f4d\u7f6e\u611f</li> </ol> <p>\u4ec0\u4e48\u662fSSAO?</p> <ol> <li>\u4e00\u4e2a\u5168\u5c40\u5149\u7167\u7684\u8fd1\u4f3c</li> <li>\u5728\u5c4f\u5e55\u7a7a\u95f4\u4e0b</li> </ol> <p>\u5173\u952eidea\uff1a</p> <ol> <li>\u6211\u4eec\u4e0d\u77e5\u9053\u95f4\u63a5\u5149\u7167</li> <li>\u5047\u8bbe\u4efb\u4f55\u70b9\u6765\u81ea\u4efb\u4f55\u65b9\u5411\u7684\u95f4\u63a5\u5149\u7167\u90fd\u662f\u4e00\u6837\u7684\u4e00\u4e2a\u5e38\u6570\uff0c\u7c7b\u4f3c\u4e8ephong\u6a21\u578b\u4e2dambient</li> <li>\u4f46\u662f\u4e0d\u89c1\u5f97\u4efb\u4f55\u65b9\u5411\u90fd\u80fd\u63a5\u53d7\u5230\u4e0a\u8ff0\u7684\u95f4\u63a5\u5149\u7167\uff0c\u6240\u4ee5\u9700\u8981\u8003\u8651visibility </li> </ol> <p>\u539f\u7406\uff1a</p> <p></p> <p>\u600e\u6837\u5728SS\u4e0b\uff1f</p> <p></p> <p>tips\uff1a\u5982\u679c\u6709\u6cd5\u7ebf\u4fe1\u606f\uff0c\u5219\u662fHBAO(Horizon Based Ambient Occlusion)\uff0c\u53ef\u4ee5\u9632\u6b62\u51fa\u73b0\u4e24\u7269\u4f53\u9694\u5f97\u5f88\u8fdc\u4e5f\u53d1\u751fAO</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture9-3","title":"Lecture9 \u5168\u5c40\u5149\u7167(3)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#ssdoscreen-space-directional-occlusion","title":"SSDO\uff08Screen Space Directional Occlusion)","text":"<p>\u4ec0\u4e48\u662f\uff1f</p> <ol> <li>SSAO\u7684\u63d0\u9ad8</li> <li>\u8003\u8651\u5f97\u66f4\u52a0\u7cbe\u51c6</li> </ol> <p>\u5173\u952eIdea\uff1a</p> <ol> <li> <p>\u4e0d\u7528\u5047\u8bbe\u5165\u5c04\u5149\u662f\u5e38\u91cf</p> </li> <li> <p>\u4e00\u4e9b\u5165\u5c04\u5149\u7684\u4fe1\u606f\u662f\u5df2\u7ecf\u77e5\u9053\u7684</p> </li> <li> <p>\u5f88\u50cfRSM\uff0c\u4f46\u4e0d\u662ffrom RSM\uff0c\u800c\u662ffrom \u76f8\u673a</p> </li> <li> <p>\u7c7b\u4f3c\u8def\u5f84\u8ffd\u8e2a\uff0c\u8003\u8651\u4e0eSSAO\u7684\u6bd4\u8f83\uff0c\u5b8c\u5168\u76f8\u53cd\u7684\u601d\u60f3\uff1a</p> </li> </ol> <p></p> <p>\u95ee\u9898\uff1a</p> <ol> <li>\u53ea\u80fd\u5c0f\u8303\u56f4\u7684GI</li> <li>\u9700\u8981visibility</li> <li>P\u70b9\u5bf9\u4e8e\u534a\u7403\u4e0a\u7684\u70b9\u53ef\u89c1\u6027\u662f\u901a\u8fc7Camera\u5bf9\u8fd9\u4e9b\u70b9\u7684\u53ef\u89c1\u6027\u6765\u8fd1\u4f3c\u8ba1\u7b97\u7684\uff0c\u5b58\u5728\u4e8e\u5c4f\u5e55\u7a7a\u95f4\u4e2d\u4e22\u5931\u4fe1\u606f\u7684\u95ee\u9898</li> </ol>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#ssrscreen-space-reflection","title":"SSR\uff08Screen Space Reflection\uff09","text":"<p>\u8bf4\u662fReflection\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u662fRay-tracing</p> <p>\u4ec0\u4e48\u662f\uff1f</p> <ol> <li>\u4ecd\u7136\u662f\u4e00\u79cd\u5728RTR\u4e2d\u5b9e\u73b0GI\u7684\u65b9\u5f0f</li> <li>\u662f\u5728\u5c4f\u5e55\u7a7a\u95f4\u4e2d\u505a\u5149\u7ebf\u8ffd\u8e2a</li> <li>\u4e0d\u9700\u8981\u77e5\u90533D\u7a7a\u95f4\u4e2d\u7684\u4e09\u89d2\u5f62\u3001\u7f51\u683c\u3001\u52a0\u901f\u7ed3\u6784\u7b493D\u4fe1\u606f\uff0c\u53ea\u9700\u8981\u5c4f\u5e55\u7a7a\u95f4\u4e2d\u5df2\u6709\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u4ececamera\u770b\u53bb\u573a\u666f\u7684\u5f97\u5230\u7684\u8fd9\u6837\u4e00\u5c42\u201c\u58f3\u201d\u3002</li> </ol> <p>\u4e24\u4e2a\u57fa\u672c\u4efb\u52a1\uff1a</p> <ol> <li>\u7531\u4e8e\u6211\u4eec\u8ba4\u4e3a\u5b83\u662fscreen space raytracing,\u6211\u4eec\u8003\u8651\u7684\u662f\u4efb\u4f55\u5149\u7ebf(\u4e0d\u5355\u5355\u662f\u53cd\u5c04\u5149)\u4e0e\u573a\u666f\u4e2d\u8fd9\u5c42\u58f3\u53bb\u505a\u6c42\u4ea4.</li> <li>\u627e\u5230\u4ea4\u70b9\u540e,\u7b97\u51fa\u5bf9shading point\u7684\u8d21\u732e\u503c.</li> </ol> <p>\u7740\u8272\u65f6\uff1a</p> <p>\u8fd9\u90e8\u5206\u4e0e\u8def\u5f84\u8ffd\u8e2a\u7684\u65b9\u6cd5\u5b8c\u5168\u76f8\u540c\uff0c\u4ec5\u4ec5\u662f\u628a\u5149\u7ebf\u4e0e\u573a\u666f\u6c42\u4ea4\u53d8\u6210\u4e86\u5149\u7ebf\u4e0e\u201c\u58f3\u201d\u6c42\u4ea4\uff0c\u56e0\u6b64\u8def\u5f84\u8ffd\u8e2a\u7684\u7b97\u6cd5\u5728\u8fd9\u91cc\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u3002</p> <p>\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ashading point\uff0c\u770b\u5230\u7684radicance\u5c31\u662f\u5bf9\u534a\u7403\u8fdb\u884c\u79ef\u5206,\u5982\u679c\u662fspecular\u7684\u7269\u4f53,\u90a3\u4e48\u76f8\u5f53\u4e8e\u5149\u7ebf\u6253\u5230\u7269\u4f53\u7684\u54ea\u91cc,\u5c31\u7528\u5b83\u6240\u53d1\u51fa\u7684radiance\u5c31\u53ef\u4ee5.</p> <p></p> <p>\u5982\u679c\u662fglossy\u60c5\u51b5\u4e0b,\u540c\u6837\u7684\u7528\u8499\u7279\u5361\u6d1b\u591a\u91c7\u6837\u51e0\u6839\u5149\u7ebf,\u4e0d\u7ba1\u600e\u4e48\u6240\u6253\u5230\u7684\u7269\u4f53\u53cd\u5c04\u8fc7\u6765\u7684radiance,\u4e00\u5b9a\u5c31\u662fshading point\u70b9\u63a5\u6536\u5230\u7684incident radiance.</p> <p>\u8fd9\u91cc\u6211\u4eec\u540c\u6837\u9700\u8981\u5047\u8bbe\u53cd\u5c04\u7269/\u6b21\u7ea7\u5149\u6e90 \u662fDiffuse\u7684\u60c5\u51b5,\u5730\u677f\u4e4b\u7c7b\u7684\u63a5\u6536\u7269\u53ef\u4ee5\u662f\u4efb\u4f55\u7269\u4f53.</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture10-1","title":"Lecture10 \u57fa\u4e8e\u7269\u7406\u7684\u6750\u8d28(1)","text":"<p>\u5b9e\u65f6\u6e32\u67d3\u4e2d\u7684\u6750\u8d28\uff1a</p> <ol> <li>\u57fa\u4e8e\u7269\u4f53\u8868\u9762\u4e0a\u5b9a\u4e49\u7684\u6750\u8d28</li> <li>\u5fae\u8868\u9762</li> <li>Disney Principled BRDF\u8ba1\u7b97\u91cf\u6bd4\u8f83\u8f7b\u91cf\u7ea7\uff0c\u56e0\u6b64\u867d\u7136\u4ea7\u751f\u521d\u8877\u662f\u4e3a\u4e86\u80fd\u591f\u7528\u4e8e\u79bb\u7ebf\u6e32\u67d3,\u4f46\u4e5f\u53ef\u4ee5\u8fd0\u7528\u5728\u5b9e\u65f6\u6e32\u67d3\u4e2d\uff0c\u8fd9\u5957\u6750\u8d28\u7684\u79cd\u7c7b\u591a\u6548\u679c\u4e5f\u5f88\u4e0d\u9519,\u4f46\u4e5f\u4e0d\u662fPBR\uff0c\u662f\u57fa\u4e8eartist\u7684\u89d2\u5ea6\u6765\u8003\u8651\u7684\u3002</li> <li>\u57fa\u4e8e\u4f53\u79ef\u4e0a\u5b9a\u4e49\u7684\u6750\u8d28:</li> <li>\u7531\u4e8e\u5149\u7ebf\u4f1a\u8fdb\u5165\u5230\u4e91,\u70df,\u96fe,\u76ae\u80a4,\u5934\u53d1\u7b49\u4f53\u79ef\u91cc,\u5728RTR\u4e2d\u57fa\u4e8e\u4f53\u79ef\u4e0a\u8981\u6bd4\u57fa\u4e8e\u8868\u9762\u7684\u56f0\u96be\u8bb8\u591a,\u6211\u4eec\u5927\u90e8\u5206\u8003\u8651\u7684\u8fd8\u662f\u5149\u7ebf\u5728\u8fd9\u4e9b\u4f53\u79ef\u4e2d\u4f5c\u7528\u4e00\u6b21(single)\u548c\u591a\u6b21(multiple)\u7684\u5206\u79bb\u8003\u8651\u65b9\u6cd5,\u8fd9\u4e2a\u5728\u4e0b\u8282\u8bfe\u5b66\u4e60.</li> </ol>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#microfacet-brdf","title":"Microfacet BRDF","text":"\\[f(i,o)=\\frac {F(i,h)G(i,o,h)D(h)}{4(n,i)(n,o)}\\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#f-the-fresnel-term","title":"F : The Fresnel Term \u83f2\u6d85\u5c14\u9879","text":"<p>\u8868\u793a\u89c2\u5bdf\u89d2\u5ea6\u4e0e\u53cd\u5c04\u7684\u5173\u7cfb(\u4ece\u4e00\u4e2a\u89d2\u5ea6\u770b\u53bb\u4f1a\u6709\u591a\u5c11\u7684\u80fd\u91cf\u88ab\u53cd\u5c04)</p> <p>\u6709\u591a\u5c11\u80fd\u91cf\u88ab\u53cd\u5c04\u53d6\u51b3\u4e8e\u5165\u5c04\u5149\u7684\u89d2\u5ea6\uff0c\u5f53\u5165\u5c04\u65b9\u5411\u63a5\u8fd1grazing angle\u63a0\u5c04\u89d2\u5ea6\u7684\u65f6\u5019\uff0c\u5149\u7ebf\u662f\u88ab\u53cd\u5c04\u7684\u6700\u591a\u7684,\u4e5f\u5c31\u662f\u5f53\u4f60\u7684\u5165\u5c04\u65b9\u5411\u4e0e\u6cd5\u7ebf\u51e0\u4e4e\u5782\u76f4\u65f6\u5019,\u53cd\u5c04\u7684radiance\u662f\u6700\u591a\u7684.</p> <p>\u7531\u4e8e\u5149\u8def\u7684\u53ef\u9006\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u773c\u775b\u770b\u8fc7\u53bb\u7684\u65b9\u5411\u662f\u5149\u7ebf\u5165\u5c04\u65b9\u5411\u3002</p> <p></p> <p>\u6700\u53f3\u8fb9\u7684\u63a5\u8fd1\u5982grazing angle</p> <p>\u4e0b\u9762\u662f\u5bf9\u4e8e\u7edd\u7f18\u4f53\u53cd\u5c04\u7387\u4e0e\u89d2\u5ea6\u7684\u5173\u7cfb:</p> <p>\u4ee5\u6cb3\u9762\u4e3a\u4f8b,\u8ba9\u4f60\u5165\u5c04\u65b9\u5411\u4e0e\u6cb3\u9762\u6cd5\u7ebf\u5e73\u884c,\u5219\u4f1a\u76f4\u63a5\u770b\u5230\u6cb3\u5e95;\u5982\u679c\u5165\u5c04\u65b9\u5411\u4e0e\u6cb3\u9762\u6cd5\u7ebf\u5782\u76f4,\u5219\u80fd\u6700\u5927\u7a0b\u5ea6\u770b\u5230\u53cd\u5c04\u51fa\u7684\u5929\u7a7a\u4e4b\u7c7b\u7684.</p> <p></p> <p>\u7edd\u7f18\u4f53\u53cd\u5c04\u7387\u4e0e\u89d2\u5ea6\u7684\u5173\u7cfb</p> <p>\u4e0b\u9762\u662f\u5bf9\u4e8e\u5bfc\u4f53\u53cd\u5c04\u7387\u4e0e\u89d2\u5ea6\u7684\u5173\u7cfb\uff0c\u4e0e\u7edd\u7f18\u4f53\u4e0d\u540c\uff0c\u90e8\u5206\u4f1a\u51fa\u73b0\u53cd\u5e38\u73b0\u8c61</p> <p></p> <p>\u5bfc\u4f53\u53cd\u5c04\u7387\u4e0e\u89d2\u5ea6\u7684\u5173\u7cfb</p> <p>\u83f2\u6d85\u5c14\u9879\u544a\u8bc9\u6211\u4eec\u6709\u767e\u5206\u4e4b\u591a\u5c11\u7684\u80fd\u91cf\u4f1a\u88ab\u53cd\u5c04\u51fa\u6765.</p> <p>\u83f2\u6d85\u5c14\u9879\u7684\u63a8\u5bfc\u65f6\u8981\u8003\u8651\u5149\u7ebf\u7684S\u6781\u5316\u548cP\u6781\u5316\u6548\u679c\uff0c\u516c\u5f0f\u6bd4\u8f83\u590d\u6742,\u56e0\u4e3a\u8981\u8003\u8651\u4e0d\u540c\u4ecb\u8d28,\u5982\u4ece\u7a7a\u6c14\u5230\u7269\u4f53\u8868\u9762,\u5404\u81ea\u7684\u6298\u5c04\u7387\u548c\u5165\u5c04\u89d2\u6298\u5c04\u89d2\uff0c\u6700\u7ec8\u63a8\u5bfc\u51fa\u4e0b\u56fe\u4e2d\u7684\u516c\u5f0f\u3002</p> <p></p> <p>\u4f46\u6211\u4eec\u5e73\u5e38\u4e0d\u7528\u8fd9\u4e2a,\u800c\u662f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u8fd1\u4f3c\uff1aSchlick\u2019s approximation</p> <p></p> <p>\u6211\u4eec\u4e4b\u524d\u8bb2\u8fc7:</p> <p>\u5f53\u03b8-&gt;90\u5ea6,cos\u03b8=0,\u5219R(\u03b8)=1;</p> <p>\u5f53\u03b8-&gt;0\u5ea6,cos\u03b8=1,\u5219R(\u03b8)=R0;</p> <p>\u5176\u4e2dR0(\u57fa\u7840\u53cd\u5c04\u7387)\u53d6\u51b3\u4e8e\u7269\u4f53,\u4e0d\u540c\u7269\u4f53\u7684R0\u5404\u4e0d\u76f8\u540c.</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#d-normal-distribution-function","title":"D : Normal Distribution Function \u8868\u9762\u5206\u5e03\u51fd\u6570","text":"<p>\u51b3\u5b9a\u8fd9\u4e00\u9879\u7684\u662f\u4e0d\u540c\u5fae\u8868\u9762\u671d\u5411\u7684\u6cd5\u7ebf\u5206\u5e03\uff1b</p> <p>\u5f53\u671d\u5411\u6bd4\u8f83\u96c6\u4e2d\u7684\u65f6\u5019\u4f1a\u5f97\u5230Glossy\u7684\u7ed3\u679c,\u5982\u679c\u671d\u5411\u7279\u522b\u96c6\u4e2d\u6307\u5411\u65f6\u8ba4\u4e3a\u662fspecular\u7684.</p> <p>\u5e38\u7528\u7684\u6709beckmann\u548cGGX\u6a21\u578b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#beckmann","title":"beckmann\uff1a","text":"<p>\u5176\u76ee\u7684\u4e3a\u4e86\u63cf\u8ff0\u6cd5\u7ebf\u5206\u5e03\uff0c\u56e0\u6b64\u80af\u5b9a\u662f\u4e00\u4e2a\u5173\u4e8e\u6cd5\u7ebf\u65b9\u5411h\u7684\u51fd\u6570\uff0c\u800ch\u662f\u534a\u7403\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u65b9\u5411\uff0c\u7136\u540e\u63cf\u8ff0\u8fd9\u4e00\u65b9\u5411\u5bf9\u5e94\u7684\u503c\u662f\u591a\u5c11\uff0c\u8fd9\u5c31\u662fNDF\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u7ed9\u5b9a\u5411\u91cfh\uff0c\u5982\u679c\u6211\u4eec\u7684\u5fae\u5e73\u9762\u4e2d\u670935%\u4e0e\u5411\u91cf\u210e\u53d6\u5411\u4e00\u81f4\uff0c\u5219\u6cd5\u7ebf\u5206\u5e03\u51fd\u6570\u6216\u8005\u8bf4NDF\u5c06\u4f1a\u8fd4\u56de0.35\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#ggx","title":"GGX","text":"<p>Beckmann\u6a21\u578b\u7684NDF\u66f2\u7ebf\u4e0eGGX\u6a21\u578b\u7684NDF\u66f2\u7ebf\u76f8\u6bd4\u6709\u4e00\u4e2a\u660e\u663e\u7684\u7279\u70b9:</p> <p>Long tail \u957f\u5c3e\u6027\u8d28:</p> <p>\u4f1a\u5f88\u5feb\u8870\u51cf\uff0c\u4f46\u662f\u8870\u51cf\u5230\u4e00\u5b9a\u7a0b\u5ea6\u7684\u65f6\u5019\u8870\u51cf\u901f\u5ea6\u4f1a\u53d8\u6162,\u53ef\u4ee5\u770b\u5230\u5373\u4f7f\u5230\u4e86grazing angle(90\u5ea6)\u65f6\u4ecd\u4e0d\u4e3a0\u3002</p> <p></p> <p>\u8fd9\u4f1a\u5e26\u6765\u4e24\u4e2a\u597d\u5904:</p> <ol> <li>Beckmann\u7684\u9ad8\u5149\u4f1a\u9010\u6e10\u6d88\u5931,\u800cGGX\u7684\u9ad8\u5149\u4f1a\u51cf\u5c11\u800c\u4e0d\u4f1a\u6d88\u5931,\u8fd9\u5c31\u610f\u5473\u7740\u9ad8\u5149\u7684\u5468\u56f4\u6211\u4eec\u770b\u5230\u4e00\u79cd\u5149\u6655\u7684\u73b0\u8c61.</li> <li>GGX\u9664\u4e86\u9ad8\u5149\u90e8\u5206,\u5176\u4f59\u90e8\u5206\u4f1a\u50cfDiffuse\u7684\u611f\u89c9. </li> </ol> <p></p> <p>Beckmann\u6a21\u578b\u4e0eGGX\u6a21\u578b\u7684\u5b9e\u9645\u6548\u679c\u5bf9\u6bd4\u5982\u56fe\u3002</p> <p>\u76f8\u540c\u7684\u7c97\u7cd9\u7a0b\u5ea6\u4e0bGGX\u7684\u6548\u679c\u66f4\u52a0\u81ea\u7136,\u56e0\u4e3along tail\u6027\u8d28\u5bfc\u81f4\u9ad8\u5149\u5230\u975e\u9ad8\u5149\u6709\u4e00\u4e2a\u67d4\u548c\u7684\u8fc7\u6e21\u72b6\u6001,\u800c\u975eBeckmann\u7684\u9ad8\u5149\u5230\u8fbegrazing angle\u540e\u621b\u7136\u800c\u6b62,\u6211\u4eec\u5e0c\u671b\u7684\u662f\u50cfGGX\u4e00\u6837\u7684\u6548\u679c.</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#g-geometry-term","title":"G : Geometry term \u81ea\u906e\u6321","text":"<p>\u53ef\u4ee5\u89e3\u51b3\u8fb9\u7f18\u975e\u5e38\u4eae\u7684\u95ee\u9898</p> <p>Kulla-Conty Approximation</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture11-2","title":"Lecture11 \u57fa\u4e8e\u7269\u7406\u7684\u6750\u8d28(2)","text":"<p>\u653e\u4e2a\u94fe\u63a5\uff0c\u6709\u70b9\u61d2\u5f97\u505a</p> <p>GAMES202 \u9ad8\u8d28\u91cf\u5b9e\u65f6\u6e32\u67d3\u7b14\u8bb0Lecture11\uff1aReal-Time Physically-Based Materials (Surface models cont.) - \u77e5\u4e4e (zhihu.com)</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture12-1","title":"Lecture12 \u5149\u7ebf\u8ffd\u8e2a(1)","text":"<p>RTRT: Real-Time-Ray-Tracing\uff0c\u6700\u91cd\u8981\u7684\u5de5\u4f5c\u662f\u964d\u566a\uff0c\u56e0\u4e3a\u7b97\u529b\u53ea\u80fd\u652f\u63011spp\uff081 sample per pixel)</p> <p>\u800c\u964d\u566a\u6700\u91cd\u8981\u7684idea\u662fTemporal\uff08\u65f6\u95f4\u4e0a\uff09</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES202/#lecture13-2","title":"Lecture13 \u5149\u7ebf\u8ffd\u8e2a(2)","text":"<p>\u6ee4\u6ce2\uff0c\u53cc\u8fb9\u6ee4\u6ce2\uff0c\u8054\u5408\u53cc\u8fb9\u6ee4\u6ce2</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/","title":"LearnOpenGL","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_1","title":"\u4f60\u597d,\u7a97\u53e3!","text":"<pre><code>#include &lt;glad/glad.h&gt;//\u5fc5\u987b\u8981\u5148include glad\n#include &lt;GLFW/glfw3.h&gt;\n\n#define WIDTH  800//\u5b9a\u4e49\u7a97\u4f53\u548c\u89c6\u53e3\u521d\u59cb\u7684\u5bbd\u5ea6\n#define HEIGHT 600//\u5b9a\u4e49\u7a97\u4f53\u548c\u89c6\u53e3\u521d\u59cb\u7684\u9ad8\u5ea6\n\n/*\u5f53\u7528\u6237\u8c03\u6574\u7a97\u53e3\u7684\u5c3a\u5bf8\u7684\u540c\u65f6\u5fc5\u987b\u8981\u8c03\u6574\u89c6\u53e3\u7684\u5c3a\u5bf8\u4e0e\u4e4b\u5bf9\u5e94,\u4e0d\u7136\u4e0d\u4f1a\u51fa\u73b0\u5408\u9002\u7684\u6e32\u67d3\u7ed3\u679c*/\nvoid frambuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n    glViewport(0,0,width,height);\n}\n/*\u5224\u65ad\u7528\u6237\u662f\u5426\u6309\u4e0besc\u952e,\u5982\u679c\u6309\u4e0b\u5219setwindowshouldclose*/\nvoid ProcessInput(GLFWwindow* window)\n{\n    if(glfwGetKey(window, GLFW_KEY_ESCAPE)){\n        glfwSetWindowShouldClose(window, true);\n    }\n}\n\nint main()\n{\n    glfwInit();//\u521d\u59cb\u5316glfw\u5e93,GLFW \u7684\u4e3b\u8981\u529f\u80fd\u662f\u521b\u5efa\u5e76\u7ba1\u7406\u7a97\u53e3\u548c OpenGL \u4e0a\u4e0b\u6587\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);//\u8bbe\u7f6eglfw\u7684\u7248\u672c\u53f73.3(major)\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);//\u8bbe\u7f6eglfw\u7684\u7248\u672c\u53f73.3(minor)\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);//\u8bbe\u7f6e\u6838\u5fc3\u6a21\u5f0f,\u4e0d\u517c\u5bb9\u65e7\u51fd\u6570\n    GLFWwindow* window = glfwCreateWindow(WIDTH,HEIGHT,\"just try\", NULL, NULL);//\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\n    glfwMakeContextCurrent(window);//\u5c06window\u7a97\u53e3\u8bbe\u7f6e\u4e3aCurrent\n    gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);//\u521d\u59cb\u5316GLAD,GLAD\u7684\u4f5c\u7528\u662f\u7ba1\u7406OpenGL\u7684\u51fd\u6570\u6307\u9488\n    glViewport(0, 0, WIDTH, HEIGHT);//\u544a\u8bc9OpenGL\u89c6\u53e3\u7684\u5c3a\u5bf8(\u50cf\u7d20\u7684\u4e2a\u6570\u4e3aWIDTH * HEIGHT)\n    glfwSetFramebufferSizeCallback(window, frambuffer_size_callback);//\u6ce8\u518c\u56de\u8c03\u51fd\u6570framebuffer_size_callback\n\n    //Render loop\n    while(!glfwWindowShouldClose(window))\n    {\n        //\u8f93\u5165------------------------------\n        ProcessInput(window);\n\n        //\u6e32\u67d3\u6307\u4ee4--------------------------\n        glClearColor(0.2f,0.3f,0.3f,1.0f);//\u8bbe\u7f6e\u7528\u4ec0\u4e48\u989c\u8272\u6e05\u7a7a\u5c4f\u5e55\n        glClear(GL_COLOR_BUFFER_BIT);//\u6e05\u695a\u6307\u5b9a\u7684\u7f13\u51b2(\u8fd9\u91cc\u662f\u989c\u8272\u7f13\u51b2)\n\n\n        //\u68c0\u67e5\u5e76\u8c03\u7528\u4e8b\u4ef6,\u4ea4\u6362\u7f13\u51b2------------\n\n        /*\u68c0\u67e5\u662f\u5426\u89e6\u53d1\u4e8b\u4ef6(\u6bd4\u5982\u952e\u76d8\u8f93\u5165,\u9f20\u6807\u79fb\u52a8\u7b49),\u66f4\u65b0\u7a97\u53e3\u72b6\u6001,\u5e76\u8c03\u7528\u56de\u8c03\u51fd\u6570*/\n        glfwPollEvents();\n        /**\n         * \u4e3a\u4e86\u907f\u514d\u56fe\u50cf\u95ea\u70c1\u7684\u95ee\u9898,\u4f7f\u7528\u53cc\u7f13\u51b2\n         * \u524d\u7f13\u51b2\u4fdd\u5b58\u7740\u6700\u7ec8\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u5b83\u4f1a\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\uff1b\u800c\u6240\u6709\u7684\u7684\u6e32\u67d3\u6307\u4ee4\u90fd\u4f1a\u5728\u540e\u7f13\u51b2\u4e0a\u7ed8\u5236\n         * \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u4ea4\u6362\u524d\u7f13\u51b2\u548c\u540e\u7f13\u51b2\n         */\n        glfwSwapBuffers(window);\n    }\n\n    glfwTerminate();//\u7ed3\u675f\u8fdb\u7a0b,\u56de\u6536\u5185\u5b58\n    return 0;\n}\n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_2","title":"\u4f60\u597d,\u4e09\u89d2\u5f62!","text":"<ul> <li>\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61: Vertex Array Object, VAO</li> <li>\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61: Vertex Buffer Object, VBO</li> <li>\u5143\u7d20\u7f13\u51b2\u5bf9\u8c61: Element Buffer Object, EBO</li> <li>(\u53c8\u79f0)\u7d22\u5f15\u7f13\u51b2\u5bf9\u8c61: Index Buffer Object, IBO</li> </ul> <p>3D\u5750\u6807\u8f6c\u4e3a2D\u5750\u6807\u7684\u5904\u7406\u8fc7\u7a0b\u662f\u7531OpenGL\u7684\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u7ba1\u7406\u7684.</p> <p>\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u53ef\u4ee5\u88ab\u5212\u5206\u4e3a\u4e24\u4e2a\u4e3b\u8981\u90e8\u5206\uff1a\u7b2c\u4e00\u90e8\u5206\u628a\u4f60\u76843D\u5750\u6807\u8f6c\u6362\u4e3a2D\u5750\u6807\uff0c\u7b2c\u4e8c\u90e8\u5206\u662f\u628a2D\u5750\u6807\u8f6c\u53d8\u4e3a\u5b9e\u9645\u7684\u6709\u989c\u8272\u7684\u50cf\u7d20\u3002</p> <p>2D\u5750\u6807\u548c\u50cf\u7d20\u4e5f\u662f\u4e0d\u540c\u7684\uff0c2D\u5750\u6807\u7cbe\u786e\u8868\u793a\u4e00\u4e2a\u70b9\u57282D\u7a7a\u95f4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u800c2D\u50cf\u7d20\u662f\u8fd9\u4e2a\u70b9\u7684\u8fd1\u4f3c\u503c\uff0c2D\u50cf\u7d20\u53d7\u5230\u4f60\u7684\u5c4f\u5e55/\u7a97\u53e3\u5206\u8fa8\u7387\u7684\u9650\u5236\u3002</p> <p>OpenGL\u7740\u8272\u5668\u662f\u7528OpenGL\u7740\u8272\u5668\u8bed\u8a00(OpenGL Shading Language, GLSL)\u5199\u6210\u7684</p> <p>\u4e0b\u9762\uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u7684\u6bcf\u4e2a\u9636\u6bb5\u7684\u62bd\u8c61\u5c55\u793a\u3002\u8981\u6ce8\u610f\u84dd\u8272\u90e8\u5206\u4ee3\u8868\u7684\u662f\u6211\u4eec\u53ef\u4ee5\u6ce8\u5165\u81ea\u5b9a\u4e49\u7684\u7740\u8272\u5668\u7684\u90e8\u5206\u3002</p> <p></p> <p>\u4ee5\u4e0b\u7684\u5185\u5bb9\u5341\u5206\u91cd\u8981,\u9700\u8981\u53cd\u590d\u8bb0\u5fc6,\u5728\u6b64\u6211\u4e0d\u4f5c\u63d0\u70bc</p> <p>\u5982\u4f60\u6240\u89c1\uff0c\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u5305\u542b\u5f88\u591a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u90fd\u5c06\u5728\u8f6c\u6362\u9876\u70b9\u6570\u636e\u5230\u6700\u7ec8\u50cf\u7d20\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\u5904\u7406\u5404\u81ea\u7279\u5b9a\u7684\u9636\u6bb5\u3002\u6211\u4eec\u4f1a\u6982\u62ec\u6027\u5730\u89e3\u91ca\u4e00\u4e0b\u6e32\u67d3\u7ba1\u7ebf\u7684\u6bcf\u4e2a\u90e8\u5206\uff0c\u8ba9\u4f60\u5bf9\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u4e2a\u5927\u6982\u4e86\u89e3\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_3","title":"\u9876\u70b9\u5c5e\u6027","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u4f20\u90123\u4e2a3D\u5750\u6807\u4f5c\u4e3a\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u7684\u8f93\u5165\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u8fd9\u4e2a\u6570\u7ec4\u53eb\u505a\u9876\u70b9\u6570\u636e(Vertex Data)\uff1b\u9876\u70b9\u6570\u636e\u662f\u4e00\u7cfb\u5217\u9876\u70b9\u7684\u96c6\u5408\u3002\u4e00\u4e2a\u9876\u70b9(Vertex)\u662f\u4e00\u4e2a3D\u5750\u6807\u7684\u6570\u636e\u7684\u96c6\u5408\u3002\u800c\u9876\u70b9\u6570\u636e\u662f\u7528\u9876\u70b9\u5c5e\u6027(Vertex Attribute)\u8868\u793a\u7684\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u6211\u4eec\u60f3\u7528\u7684\u6570\u636e\uff0c\u4f46\u662f\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u8fd8\u662f\u5047\u5b9a\u6bcf\u4e2a\u9876\u70b9\u53ea\u7531\u4e00\u4e2a3D\u4f4d\u7f6e(\u8bd1\u6ce81)\u548c\u4e00\u4e9b\u989c\u8272\u503c\u7ec4\u6210\u7684\u5427\u3002</p> <pre><code>\u8bd1\u6ce81\n\n\u5f53\u6211\u4eec\u8c08\u8bba\u4e00\u4e2a\u201c\u4f4d\u7f6e\u201d\u7684\u65f6\u5019\uff0c\u5b83\u4ee3\u8868\u5728\u4e00\u4e2a\u201c\u7a7a\u95f4\u201d\u4e2d\u6240\u5904\u5730\u70b9\u7684\u8fd9\u4e2a\u7279\u6b8a\u5c5e\u6027\uff1b\u540c\u65f6\u201c\u7a7a\u95f4\u201d\u4ee3\u8868\u7740\u4efb\u4f55\u4e00\u79cd\u5750\u6807\u7cfb\uff0c\u6bd4\u5982x\u3001y\u3001z\u4e09\u7ef4\u5750\u6807\u7cfb\uff0cx\u3001y\u4e8c\u7ef4\u5750\u6807\u7cfb\uff0c\u6216\u8005\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684x\u548cy\u7684\u7ebf\u6027\u5173\u7cfb\uff0c\u53ea\u4e0d\u8fc7\u4e8c\u7ef4\u5750\u6807\u7cfb\u662f\u4e00\u4e2a\u6241\u6241\u7684\u5e73\u9762\u7a7a\u95f4\uff0c\u800c\u4e00\u6761\u76f4\u7ebf\u662f\u4e00\u4e2a\u5f88\u7626\u7684\u957f\u957f\u7684\u7a7a\u95f4\u3002\n</code></pre> <pre><code>\u4e3a\u4e86\u8ba9OpenGL\u77e5\u9053\u6211\u4eec\u7684\u5750\u6807\u548c\u989c\u8272\u503c\u6784\u6210\u7684\u5230\u5e95\u662f\u4ec0\u4e48\uff0cOpenGL\u9700\u8981\u4f60\u53bb\u6307\u5b9a\u8fd9\u4e9b\u6570\u636e\u6240\u8868\u793a\u7684\u6e32\u67d3\u7c7b\u578b\u3002\u6211\u4eec\u662f\u5e0c\u671b\u628a\u8fd9\u4e9b\u6570\u636e\u6e32\u67d3\u6210\u4e00\u7cfb\u5217\u7684\u70b9\uff1f\u4e00\u7cfb\u5217\u7684\u4e09\u89d2\u5f62\uff1f\u8fd8\u662f\u4ec5\u4ec5\u662f\u4e00\u4e2a\u957f\u957f\u7684\u7ebf\uff1f\u505a\u51fa\u7684\u8fd9\u4e9b\u63d0\u793a\u53eb\u505a\u56fe\u5143(Primitive)\uff0c\u4efb\u4f55\u4e00\u4e2a\u7ed8\u5236\u6307\u4ee4\u7684\u8c03\u7528\u90fd\u5c06\u628a\u56fe\u5143\u4f20\u9012\u7ed9OpenGL\u3002\u8fd9\u662f\u5176\u4e2d\u7684\u51e0\u4e2a\uff1aGL_POINTS\u3001GL_TRIANGLES\u3001GL_LINE_STRIP\u3002\n</code></pre> <pre><code>float vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n    0.5f, -0.5f, 0.0f,\n    0.0f, 0.5f, 0.0f\n};\n\nunsigned int VBO;\nglGenBuffers(1, &amp;VBO);//\u7528\u4e00\u4e2a\u7f13\u51b2ID(1)\u751f\u6210\u4e86\u4e00\u4e2aVBO\u5bf9\u8c61\nglBindBuffer(GL_ARRAY_BUFFER, VBO);//\u628a\u65b0\u521b\u5efa\u7684\u7f13\u51b2\u7ed1\u5b9a\u5230GL_ARRAY_BUFFER\u76ee\u6807\u4e0a\n/**\n * GL_STATIC_DRAW \uff1a\u6570\u636e\u4e0d\u4f1a\u6216\u51e0\u4e4e\u4e0d\u4f1a\u6539\u53d8\n * GL_DYNAMIC_DRAW\uff1a\u6570\u636e\u4f1a\u88ab\u6539\u53d8\u5f88\u591a\n * GL_STREAM_DRAW \uff1a\u6570\u636e\u6bcf\u6b21\u7ed8\u5236\u65f6\u90fd\u4f1a\u6539\u53d8\n */\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_4","title":"\u9876\u70b9\u7740\u8272\u5668","text":"<p>\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u7684\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f\u9876\u70b9\u7740\u8272\u5668(Vertex Shader)\uff0c\u5b83\u628a\u4e00\u4e2a\u5355\u72ec\u7684\u9876\u70b9\u4f5c\u4e3a\u8f93\u5165\u3002\u9876\u70b9\u7740\u8272\u5668\u4e3b\u8981\u7684\u76ee\u7684\u662f\u628a3D\u5750\u6807\u8f6c\u4e3a\u53e6\u4e00\u79cd3D\u5750\u6807\uff08\u540e\u9762\u4f1a\u89e3\u91ca\uff09\uff0c\u540c\u65f6\u9876\u70b9\u7740\u8272\u5668\u5141\u8bb8\u6211\u4eec\u5bf9\u9876\u70b9\u5c5e\u6027\u8fdb\u884c\u4e00\u4e9b\u57fa\u672c\u5904\u7406\u3002</p> <pre><code>const char *vertexShaderSource = \"#version 330 core\\n\"\n\"layout (location = 0) in vec3 aPos;\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n\"}\\0\";\nunsigned int vertexShader;\nvertexShader = glCreateShader(GL_VERTEX_SHADER);\nglShaderSource(vertexShader, 1, &amp;vertexShaderSource, NULL);\nglCompileShader(vertexShader);\n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_5","title":"\u56fe\u5143\u88c5\u914d","text":"<p>\u56fe\u5143\u88c5\u914d(Primitive Assembly)\u9636\u6bb5\u5c06\u9876\u70b9\u7740\u8272\u5668\u8f93\u51fa\u7684\u6240\u6709\u9876\u70b9\u4f5c\u4e3a\u8f93\u5165\uff08\u5982\u679c\u662fGL_POINTS\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u9876\u70b9\uff09\uff0c\u5e76\u6240\u6709\u7684\u70b9\u88c5\u914d\u6210\u6307\u5b9a\u56fe\u5143\u7684\u5f62\u72b6\uff1b\u672c\u8282\u4f8b\u5b50\u4e2d\u662f\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_6","title":"\u51e0\u4f55\u7740\u8272\u5668","text":"<p>\u56fe\u5143\u88c5\u914d\u9636\u6bb5\u7684\u8f93\u51fa\u4f1a\u4f20\u9012\u7ed9\u51e0\u4f55\u7740\u8272\u5668(Geometry Shader)\u3002\u51e0\u4f55\u7740\u8272\u5668\u628a\u56fe\u5143\u5f62\u5f0f\u7684\u4e00\u7cfb\u5217\u9876\u70b9\u7684\u96c6\u5408\u4f5c\u4e3a\u8f93\u5165\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u4ea7\u751f\u65b0\u9876\u70b9\u6784\u9020\u51fa\u65b0\u7684\uff08\u6216\u662f\u5176\u5b83\u7684\uff09\u56fe\u5143\u6765\u751f\u6210\u5176\u4ed6\u5f62\u72b6\u3002\u4f8b\u5b50\u4e2d\uff0c\u5b83\u751f\u6210\u4e86\u53e6\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_7","title":"\u5149\u6805\u5316\u9636\u6bb5","text":"<p>\u51e0\u4f55\u7740\u8272\u5668\u7684\u8f93\u51fa\u4f1a\u88ab\u4f20\u5165\u5149\u6805\u5316\u9636\u6bb5(Rasterization Stage)\uff0c\u8fd9\u91cc\u5b83\u4f1a\u628a\u56fe\u5143\u6620\u5c04\u4e3a\u6700\u7ec8\u5c4f\u5e55\u4e0a\u76f8\u5e94\u7684\u50cf\u7d20\uff0c\u751f\u6210\u4f9b\u7247\u6bb5\u7740\u8272\u5668(Fragment Shader)\u4f7f\u7528\u7684\u7247\u6bb5(Fragment)\u3002\u5728\u7247\u6bb5\u7740\u8272\u5668\u8fd0\u884c\u4e4b\u524d\u4f1a\u6267\u884c\u88c1\u5207(Clipping)\u3002\u88c1\u5207\u4f1a\u4e22\u5f03\u8d85\u51fa\u4f60\u7684\u89c6\u56fe\u4ee5\u5916\u7684\u6240\u6709\u50cf\u7d20\uff0c\u7528\u6765\u63d0\u5347\u6267\u884c\u6548\u7387\u3002</p> <pre><code>OpenGL\u4e2d\u7684\u4e00\u4e2a\u7247\u6bb5\u662fOpenGL\u6e32\u67d3\u4e00\u4e2a\u50cf\u7d20\u6240\u9700\u7684\u6240\u6709\u6570\u636e\u3002\n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_8","title":"\u7247\u6bb5\u7740\u8272\u5668","text":"<p>\u7247\u6bb5\u7740\u8272\u5668\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8ba1\u7b97\u4e00\u4e2a\u50cf\u7d20\u7684\u6700\u7ec8\u989c\u8272\uff0c\u8fd9\u4e5f\u662f\u6240\u6709OpenGL\u9ad8\u7ea7\u6548\u679c\u4ea7\u751f\u7684\u5730\u65b9\u3002\u901a\u5e38\uff0c\u7247\u6bb5\u7740\u8272\u5668\u5305\u542b3D\u573a\u666f\u7684\u6570\u636e\uff08\u6bd4\u5982\u5149\u7167\u3001\u9634\u5f71\u3001\u5149\u7684\u989c\u8272\u7b49\u7b49\uff09\uff0c\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u88ab\u7528\u6765\u8ba1\u7b97\u6700\u7ec8\u50cf\u7d20\u7684\u989c\u8272\u3002</p> <pre><code>const char *fragmentShaderSource = \"#version 330 core\\n\"\n\"out vec4 FragColor;\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"\n\"}\\n\";\nunsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &amp;fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#alphablending","title":"Alpha\u6d4b\u8bd5\u548c\u6df7\u5408(Blending)","text":"<p>\u5728\u6240\u6709\u5bf9\u5e94\u989c\u8272\u503c\u786e\u5b9a\u4ee5\u540e\uff0c\u6700\u7ec8\u7684\u5bf9\u8c61\u5c06\u4f1a\u88ab\u4f20\u5230\u6700\u540e\u4e00\u4e2a\u9636\u6bb5\uff0c\u6211\u4eec\u53eb\u505aAlpha\u6d4b\u8bd5\u548c\u6df7\u5408(Blending)\u9636\u6bb5\u3002\u8fd9\u4e2a\u9636\u6bb5\u68c0\u6d4b\u7247\u6bb5\u7684\u5bf9\u5e94\u7684\u6df1\u5ea6\uff08\u548c\u6a21\u677f(Stencil)\uff09\u503c\uff08\u540e\u9762\u4f1a\u8bb2\uff09\uff0c\u7528\u5b83\u4eec\u6765\u5224\u65ad\u8fd9\u4e2a\u50cf\u7d20\u662f\u5176\u5b83\u7269\u4f53\u7684\u524d\u9762\u8fd8\u662f\u540e\u9762\uff0c\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u4e22\u5f03\u3002\u8fd9\u4e2a\u9636\u6bb5\u4e5f\u4f1a\u68c0\u67e5alpha\u503c\uff08alpha\u503c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7269\u4f53\u7684\u900f\u660e\u5ea6\uff09\u5e76\u5bf9\u7269\u4f53\u8fdb\u884c\u6df7\u5408(Blend)\u3002\u6240\u4ee5\uff0c\u5373\u4f7f\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u8ba1\u7b97\u51fa\u6765\u4e86\u4e00\u4e2a\u50cf\u7d20\u8f93\u51fa\u7684\u989c\u8272\uff0c\u5728\u6e32\u67d3\u591a\u4e2a\u4e09\u89d2\u5f62\u7684\u65f6\u5019\u6700\u540e\u7684\u50cf\u7d20\u989c\u8272\u4e5f\u53ef\u80fd\u5b8c\u5168\u4e0d\u540c\u3002</p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u56fe\u5f62\u6e32\u67d3\u7ba1\u7ebf\u975e\u5e38\u590d\u6742\uff0c\u5b83\u5305\u542b\u5f88\u591a\u53ef\u914d\u7f6e\u7684\u90e8\u5206\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u573a\u5408\uff0c\u6211\u4eec\u53ea\u9700\u8981\u914d\u7f6e\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u5c31\u884c\u4e86\u3002\u51e0\u4f55\u7740\u8272\u5668\u662f\u53ef\u9009\u7684\uff0c\u901a\u5e38\u4f7f\u7528\u5b83\u9ed8\u8ba4\u7684\u7740\u8272\u5668\u5c31\u884c\u4e86\u3002</p> <p>\u5728\u73b0\u4ee3OpenGL\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49\u81f3\u5c11\u4e00\u4e2a\u9876\u70b9\u7740\u8272\u5668\u548c\u4e00\u4e2a\u7247\u6bb5\u7740\u8272\u5668\uff08\u56e0\u4e3aGPU\u4e2d\u6ca1\u6709\u9ed8\u8ba4\u7684\u9876\u70b9/\u7247\u6bb5\u7740\u8272\u5668\uff09\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u521a\u5f00\u59cb\u5b66\u4e60\u73b0\u4ee3OpenGL\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u4e3a\u5728\u4f60\u80fd\u591f\u6e32\u67d3\u81ea\u5df1\u7684\u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e4b\u524d\u5df2\u7ecf\u9700\u8981\u4e86\u89e3\u4e00\u5927\u5806\u77e5\u8bc6\u4e86\u3002\u5728\u672c\u8282\u7ed3\u675f\u4f60\u6700\u7ec8\u6e32\u67d3\u51fa\u4f60\u7684\u4e09\u89d2\u5f62\u7684\u65f6\u5019\uff0c\u4f60\u4e5f\u4f1a\u4e86\u89e3\u5230\u975e\u5e38\u591a\u7684\u56fe\u5f62\u7f16\u7a0b\u77e5\u8bc6\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_9","title":"\u7740\u8272\u5668\u7a0b\u5e8f","text":"<p>\u5728\u5199\u597d\u4e86\u5404\u4e2a\u7740\u8272\u5668\u5e76\u7f16\u8bd1\u4e4b\u540e,\u63a5\u4e0b\u6765\u7684\u6b65\u9aa4\u5c31\u662f\u94fe\u63a5\u4e86</p> <pre><code>unsigned int shaderProgram;\nshaderProgram = glCreateProgram();\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n</code></pre> <p>\u5230\u7684\u7ed3\u679c\u5c31\u662f\u4e00\u4e2a\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528glUseProgram\u51fd\u6570\uff0c\u7528\u521a\u521b\u5efa\u7684\u7a0b\u5e8f\u5bf9\u8c61\u4f5c\u4e3a\u5b83\u7684\u53c2\u6570\uff0c\u4ee5\u6fc0\u6d3b\u8fd9\u4e2a\u7a0b\u5e8f\u5bf9\u8c61\uff1a</p> <pre><code>glUseProgram(shaderProgram);\n</code></pre> <p>\u5728glUseProgram\u51fd\u6570\u8c03\u7528\u4e4b\u540e\uff0c\u6bcf\u4e2a\u7740\u8272\u5668\u8c03\u7528\u548c\u6e32\u67d3\u8c03\u7528\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u7a0b\u5e8f\u5bf9\u8c61\uff08\u4e5f\u5c31\u662f\u4e4b\u524d\u5199\u7684\u7740\u8272\u5668)\u4e86\u3002</p> <p>\u5bf9\u4e86\uff0c\u5728\u628a\u7740\u8272\u5668\u5bf9\u8c61\u94fe\u63a5\u5230\u7a0b\u5e8f\u5bf9\u8c61\u4ee5\u540e\uff0c\u8bb0\u5f97\u5220\u9664\u7740\u8272\u5668\u5bf9\u8c61\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5b83\u4eec\u4e86\uff1a</p> <pre><code>glDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u628a\u8f93\u5165\u9876\u70b9\u6570\u636e\u53d1\u9001\u7ed9\u4e86GPU\uff0c\u5e76\u6307\u793a\u4e86GPU\u5982\u4f55\u5728\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u5904\u7406\u5b83\u3002\u5c31\u5feb\u8981\u5b8c\u6210\u4e86\uff0c\u4f46\u8fd8\u6ca1\u7ed3\u675f\uff0cOpenGL\u8fd8\u4e0d\u77e5\u9053\u5b83\u8be5\u5982\u4f55\u89e3\u91ca\u5185\u5b58\u4e2d\u7684\u9876\u70b9\u6570\u636e\uff0c\u4ee5\u53ca\u5b83\u8be5\u5982\u4f55\u5c06\u9876\u70b9\u6570\u636e\u94fe\u63a5\u5230\u9876\u70b9\u7740\u8272\u5668\u7684\u5c5e\u6027\u4e0a\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9OpenGL\u600e\u4e48\u505a\u3002</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_10","title":"\u94fe\u63a5\u9876\u70b9\u5c5e\u6027","text":"<pre><code>unsigned int VBO, VAO;\nglGenVertexArrays(1, &amp;VAO);\nglGenBuffers(1, &amp;VBO);\n// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).\nglBindVertexArray(VAO);\n\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind\nglBindBuffer(GL_ARRAY_BUFFER, 0); \n\n// You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other\n// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.\nglBindVertexArray(0); \n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_11","title":"\u6e90\u4ee3\u7801","text":"<p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b:</p> <pre><code>#include &lt;glad/glad.h&gt;//\u5fc5\u987b\u8981\u5148include glad\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;iostream&gt;\n#define WIDTH  800//\u5b9a\u4e49\u7a97\u4f53\u548c\u89c6\u53e3\u521d\u59cb\u7684\u5bbd\u5ea6\n#define HEIGHT 600//\u5b9a\u4e49\u7a97\u4f53\u548c\u89c6\u53e3\u521d\u59cb\u7684\u9ad8\u5ea6\n\n/*\u5f53\u7528\u6237\u8c03\u6574\u7a97\u53e3\u7684\u5c3a\u5bf8\u7684\u540c\u65f6\u5fc5\u987b\u8981\u8c03\u6574\u89c6\u53e3\u7684\u5c3a\u5bf8\u4e0e\u4e4b\u5bf9\u5e94,\u4e0d\u7136\u4e0d\u4f1a\u51fa\u73b0\u5408\u9002\u7684\u6e32\u67d3\u7ed3\u679c*/\nvoid frambuffer_size_callback(GLFWwindow* window, int width, int height)\n{\nglViewport(0,0,width,height);\n}\n/*\u5224\u65ad\u7528\u6237\u662f\u5426\u6309\u4e0besc\u952e,\u5982\u679c\u6309\u4e0b\u5219setwindowshouldclose*/\nvoid ProcessInput(GLFWwindow* window)\n{\nif(glfwGetKey(window, GLFW_KEY_ESCAPE)){\n    glfwSetWindowShouldClose(window, true);\n}\n}\n\nint main()\n{\nglfwInit();//\u521d\u59cb\u5316glfw\u5e93,GLFW \u7684\u4e3b\u8981\u529f\u80fd\u662f\u521b\u5efa\u5e76\u7ba1\u7406\u7a97\u53e3\u548c OpenGL \u4e0a\u4e0b\u6587\nglfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);//\u8bbe\u7f6eglfw\u7684\u7248\u672c\u53f73.3(major)\nglfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);//\u8bbe\u7f6eglfw\u7684\u7248\u672c\u53f73.3(minor)\nglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);//\u8bbe\u7f6e\u6838\u5fc3\u6a21\u5f0f,\u4e0d\u517c\u5bb9\u65e7\u51fd\u6570\nGLFWwindow* window = glfwCreateWindow(WIDTH,HEIGHT,\"just try\", NULL, NULL);//\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\nglfwMakeContextCurrent(window);//\u5c06window\u7a97\u53e3\u8bbe\u7f6e\u4e3aCurrent\ngladLoadGLLoader((GLADloadproc)glfwGetProcAddress);//\u521d\u59cb\u5316GLAD,GLAD\u7684\u4f5c\u7528\u662f\u7ba1\u7406OpenGL\u7684\u51fd\u6570\u6307\u9488\nglViewport(0, 0, WIDTH, HEIGHT);//\u544a\u8bc9OpenGL\u89c6\u53e3\u7684\u5c3a\u5bf8(\u50cf\u7d20\u7684\u4e2a\u6570\u4e3aWIDTH * HEIGHT)\nglfwSetFramebufferSizeCallback(window, frambuffer_size_callback);//\u6ce8\u518c\u56de\u8c03\u51fd\u6570framebuffer_size_callback\n\n\nfloat vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n    0.5f, -0.5f, 0.0f,\n    0.0f, 0.5f, 0.0f\n};\n\n\n\n\nconst char *vertexShaderSource = \"#version 330 core\\n\"\n\"layout (location = 0) in vec3 aPos;\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n\"}\\0\";\nunsigned int vertexShader;\nvertexShader = glCreateShader(GL_VERTEX_SHADER);\nglShaderSource(vertexShader, 1, &amp;vertexShaderSource, NULL);\nglCompileShader(vertexShader);\n\nconst char *fragmentShaderSource = \"#version 330 core\\n\"\n\"out vec4 FragColor;\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"\n\"}\\n\\0\";\n\nunsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &amp;fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n\n\nunsigned int shaderProgram;\nshaderProgram = glCreateProgram();\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n\nunsigned int VBO, VAO;\nglGenVertexArrays(1, &amp;VAO);\nglGenBuffers(1, &amp;VBO);\n// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).\nglBindVertexArray(VAO);\n\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind\nglBindBuffer(GL_ARRAY_BUFFER, 0); \n\n// You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other\n// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.\nglBindVertexArray(0); \n\n//Render loop\nwhile(!glfwWindowShouldClose(window))\n{\n    //\u8f93\u5165------------------------------\n    ProcessInput(window);\n\n    //\u6e32\u67d3\u6307\u4ee4--------------------------\n    glClearColor(0.2f,0.3f,0.3f,1.0f);//\u8bbe\u7f6e\u7528\u4ec0\u4e48\u989c\u8272\u6e05\u7a7a\u5c4f\u5e55\n    glClear(GL_COLOR_BUFFER_BIT);//\u6e05\u695a\u6307\u5b9a\u7684\u7f13\u51b2(\u8fd9\u91cc\u662f\u989c\u8272\u7f13\u51b2)\n\n    glUseProgram(shaderProgram);\n    glBindVertexArray(VAO);\n    glDrawArrays(GL_TRIANGLES, 0, 3);\n\n    //\u68c0\u67e5\u5e76\u8c03\u7528\u4e8b\u4ef6,\u4ea4\u6362\u7f13\u51b2------------\n\n    /**\n     * \u4e3a\u4e86\u907f\u514d\u56fe\u50cf\u95ea\u70c1\u7684\u95ee\u9898,\u4f7f\u7528\u53cc\u7f13\u51b2\n     * \u524d\u7f13\u51b2\u4fdd\u5b58\u7740\u6700\u7ec8\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u5b83\u4f1a\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\uff1b\u800c\u6240\u6709\u7684\u7684\u6e32\u67d3\u6307\u4ee4\u90fd\u4f1a\u5728\u540e\u7f13\u51b2\u4e0a\u7ed8\u5236\n     * \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u4ea4\u6362\u524d\u7f13\u51b2\u548c\u540e\u7f13\u51b2\n     */\n    glfwSwapBuffers(window);\n    /*\u68c0\u67e5\u662f\u5426\u89e6\u53d1\u4e8b\u4ef6(\u6bd4\u5982\u952e\u76d8\u8f93\u5165,\u9f20\u6807\u79fb\u52a8\u7b49),\u66f4\u65b0\u7a97\u53e3\u72b6\u6001,\u5e76\u8c03\u7528\u56de\u8c03\u51fd\u6570*/\n    glfwPollEvents();\n}\n\nglDeleteVertexArrays(1, &amp;VAO);\nglDeleteBuffers(1, &amp;VBO);\nglDeleteProgram(shaderProgram);\n\nglfwTerminate();//\u7ed3\u675f\u8fdb\u7a0b,\u56de\u6536\u5185\u5b58\nreturn 0;\n}\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c:</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/LearnOpenGL/#_12","title":"\u5143\u7d20\u7f13\u51b2\u5bf9\u8c61","text":"<pre><code>#include &lt;glad/glad.h&gt;//\u5fc5\u987b\u8981\u5148include glad\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;iostream&gt;\n#define WIDTH  800//\u5b9a\u4e49\u7a97\u4f53\u548c\u89c6\u53e3\u521d\u59cb\u7684\u5bbd\u5ea6\n#define HEIGHT 600//\u5b9a\u4e49\u7a97\u4f53\u548c\u89c6\u53e3\u521d\u59cb\u7684\u9ad8\u5ea6\n\n/*\u5f53\u7528\u6237\u8c03\u6574\u7a97\u53e3\u7684\u5c3a\u5bf8\u7684\u540c\u65f6\u5fc5\u987b\u8981\u8c03\u6574\u89c6\u53e3\u7684\u5c3a\u5bf8\u4e0e\u4e4b\u5bf9\u5e94,\u4e0d\u7136\u4e0d\u4f1a\u51fa\u73b0\u5408\u9002\u7684\u6e32\u67d3\u7ed3\u679c*/\nvoid frambuffer_size_callback(GLFWwindow* window, int width, int height)\n{\nglViewport(0,0,width,height);\n}\n/*\u5224\u65ad\u7528\u6237\u662f\u5426\u6309\u4e0besc\u952e,\u5982\u679c\u6309\u4e0b\u5219setwindowshouldclose*/\nvoid ProcessInput(GLFWwindow* window)\n{\nif(glfwGetKey(window, GLFW_KEY_ESCAPE)){\n    glfwSetWindowShouldClose(window, true);\n}\n}\n\nint main()\n{\nglfwInit();//\u521d\u59cb\u5316glfw\u5e93,GLFW \u7684\u4e3b\u8981\u529f\u80fd\u662f\u521b\u5efa\u5e76\u7ba1\u7406\u7a97\u53e3\u548c OpenGL \u4e0a\u4e0b\u6587\nglfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);//\u8bbe\u7f6eglfw\u7684\u7248\u672c\u53f73.3(major)\nglfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);//\u8bbe\u7f6eglfw\u7684\u7248\u672c\u53f73.3(minor)\nglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);//\u8bbe\u7f6e\u6838\u5fc3\u6a21\u5f0f,\u4e0d\u517c\u5bb9\u65e7\u51fd\u6570\nGLFWwindow* window = glfwCreateWindow(WIDTH,HEIGHT,\"just try\", NULL, NULL);//\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\nglfwMakeContextCurrent(window);//\u5c06window\u7a97\u53e3\u8bbe\u7f6e\u4e3aCurrent\ngladLoadGLLoader((GLADloadproc)glfwGetProcAddress);//\u521d\u59cb\u5316GLAD,GLAD\u7684\u4f5c\u7528\u662f\u7ba1\u7406OpenGL\u7684\u51fd\u6570\u6307\u9488\nglViewport(0, 0, WIDTH, HEIGHT);//\u544a\u8bc9OpenGL\u89c6\u53e3\u7684\u5c3a\u5bf8(\u50cf\u7d20\u7684\u4e2a\u6570\u4e3aWIDTH * HEIGHT)\nglfwSetFramebufferSizeCallback(window, frambuffer_size_callback);//\u6ce8\u518c\u56de\u8c03\u51fd\u6570framebuffer_size_callback\n\n\nfloat vertices[] = {\n        0.5f,  0.5f, 0.0f,  // top right\n        0.5f, -0.5f, 0.0f,  // bottom right\n    -0.5f, -0.5f, 0.0f,  // bottom left\n    -0.5f,  0.5f, 0.0f   // top left \n};\nunsigned int indices[] = {  // note that we start from 0!\n    0, 1, 3,  // first Triangle\n    1, 2, 3   // second Triangle\n};\n\n\n\n\nconst char *vertexShaderSource = \"#version 330 core\\n\"\n\"layout (location = 0) in vec3 aPos;\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n\"}\\0\";\nunsigned int vertexShader;\nvertexShader = glCreateShader(GL_VERTEX_SHADER);\nglShaderSource(vertexShader, 1, &amp;vertexShaderSource, NULL);\nglCompileShader(vertexShader);\n\nconst char *fragmentShaderSource = \"#version 330 core\\n\"\n\"out vec4 FragColor;\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"\n\"}\\n\\0\";\n\nunsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &amp;fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n\n\nunsigned int shaderProgram;\nshaderProgram = glCreateProgram();\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n\nunsigned int VBO, VAO, EBO;\nglGenVertexArrays(1, &amp;VAO);\nglGenBuffers(1, &amp;VBO);\nglGenBuffers(1, &amp;EBO);\n// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).\nglBindVertexArray(VAO);\n\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind\nglBindBuffer(GL_ARRAY_BUFFER, 0); \n\n// You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other\n// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.\nglBindVertexArray(0); \n\n// glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n\n//Render loop\nwhile(!glfwWindowShouldClose(window))\n{\n    //\u8f93\u5165------------------------------\n    ProcessInput(window);\n\n    //\u6e32\u67d3\u6307\u4ee4--------------------------\n    glClearColor(0.2f,0.3f,0.3f,1.0f);//\u8bbe\u7f6e\u7528\u4ec0\u4e48\u989c\u8272\u6e05\u7a7a\u5c4f\u5e55\n    glClear(GL_COLOR_BUFFER_BIT);//\u6e05\u695a\u6307\u5b9a\u7684\u7f13\u51b2(\u8fd9\u91cc\u662f\u989c\u8272\u7f13\u51b2)\n\n    glUseProgram(shaderProgram);\n    glBindVertexArray(VAO);\n    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n\n    //\u68c0\u67e5\u5e76\u8c03\u7528\u4e8b\u4ef6,\u4ea4\u6362\u7f13\u51b2------------\n\n    /**\n     * \u4e3a\u4e86\u907f\u514d\u56fe\u50cf\u95ea\u70c1\u7684\u95ee\u9898,\u4f7f\u7528\u53cc\u7f13\u51b2\n     * \u524d\u7f13\u51b2\u4fdd\u5b58\u7740\u6700\u7ec8\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u5b83\u4f1a\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\uff1b\u800c\u6240\u6709\u7684\u7684\u6e32\u67d3\u6307\u4ee4\u90fd\u4f1a\u5728\u540e\u7f13\u51b2\u4e0a\u7ed8\u5236\n     * \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u4ea4\u6362\u524d\u7f13\u51b2\u548c\u540e\u7f13\u51b2\n     */\n    glfwSwapBuffers(window);\n    /*\u68c0\u67e5\u662f\u5426\u89e6\u53d1\u4e8b\u4ef6(\u6bd4\u5982\u952e\u76d8\u8f93\u5165,\u9f20\u6807\u79fb\u52a8\u7b49),\u66f4\u65b0\u7a97\u53e3\u72b6\u6001,\u5e76\u8c03\u7528\u56de\u8c03\u51fd\u6570*/\n    glfwPollEvents();\n}\n\nglDeleteVertexArrays(1, &amp;VAO);\nglDeleteBuffers(1, &amp;VBO);\nglDeleteBuffers(1, &amp;EBO);\nglDeleteProgram(shaderProgram);\n\nglfwTerminate();//\u7ed3\u675f\u8fdb\u7a0b,\u56de\u6536\u5185\u5b58\nreturn 0;\n}\n</code></pre>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/","title":"SSR\u7b97\u6cd5\u5c0f\u8bb0(Screen-Space-Reflection)","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/#_1","title":"\u4f55\u8c13\u5168\u5c40\u5149\u7167","text":"<ul> <li> <p>\u5168\u5c40\u5149\u7167=\u76f4\u63a5\u5149\u7167+\u95f4\u63a5\u5149\u7167\uff0c\u662f\u6307\u901a\u8fc7\u6a21\u62df\u5149\u7ebf\u7684\u4f20\u64ad\u8def\u5f84\uff0c\u5c06\u7269\u4f53\u53cd\u5c04\u7684\u95f4\u63a5\u5149\u7eb3\u5165\u8ba1\u7b97\uff0c\u4ece\u800c\u63d0\u9ad8\u7ed3\u679c\u771f\u5b9e\u611f\u7684\u4e00\u79cd\u6e32\u67d3\u6280\u672f\uff08\u5982\u56fe\u4e2d\u91d1\u5c5e\u7403\u7684\u7126\u6563\uff0c\u8721\u70db\u7684\u6b21\u8868\u9762\uff09</p> </li> <li> <p>\u5b9e\u65f6\u6e32\u67d3\u4e2d\u7684\u5168\u5c40\u5149\u7167\uff0c\u4e00\u822c\u5c31\u662f\u6307\u5982\u4f55\u7b80\u5355\u800c\u5feb\u901f\u5730\u8ba1\u7b97\u6bd4\u76f4\u63a5\u5149\u7167\u591a\u4e00\u6b21bounce\u7684\u5149\u7167\u7ed3\u679c</p> </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/#_2","title":"\u5c4f\u5e55\u7a7a\u95f4\u65b9\u6cd5","text":"<p>\u9996\u5148\u6211\u4eec\u8981\u5f04\u6e05\u695a\u5c4f\u5e55\u7a7a\u95f4\u65b9\u6cd5\u7684\u6982\u5ff5\uff0c\u5c4f\u5e55\u7a7a\u95f4\u5b9e\u65f6\u6e32\u67d3\uff0c\u662f\u6307\u5229\u7528\u5728\u6240\u6709pass\u6e32\u67d3\u5b8c\u6210\u4e4b\u524d\u5404\u4e2a\u5e27\u7f13\u51b2\u4e2d\u7684\u4fe1\u606f\uff0c\u5bf9\u5df2\u6e32\u67d3\u7ed3\u679c\u52a0\u4ee5\u4fee\u6539\u7684\u6e32\u67d3\u65b9\u6cd5\u3002</p> <p>\u4f34\u968f\u7740\u5ef6\u8fdf\u6e32\u67d3\u7684\u5174\u8d77\uff0c\u66f4\u591a\u7684\u4fe1\u606f\u5f97\u4ee5\u5728\u5c4f\u5e55\u7a7a\u95f4\u53d6\u5f97\uff0c\u56e0\u6b64\u4e5f\u5ef6\u4f38\u51fa\u8bb8\u591a\u4e0d\u540c\u7684\u7b97\u6cd5\uff0c\u8fd9\u4e9b\u7b97\u6cd5\u4e00\u822c\u90fd\u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a</p> <ul> <li>\u80fd\u591f\u5f88\u65b9\u4fbf\u7684\u652f\u6301\u5404\u79cd\u6ee4\u6ce2\u7b97\u6cd5</li> <li>\u89e3\u9664\u4e86\u573a\u666f\u590d\u6742\u5ea6\u5bf9\u7b97\u6cd5\u7684\u9650\u5236</li> <li>\u4f1a\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u4fe1\u606f\u4e22\u5931\uff08\u56e0\u4e3a\u53ea\u80fd\u83b7\u5f97\u4e00\u4e9b\u76f8\u673a\u89c2\u5bdf\u5f97\u5230\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u906e\u6321\u8d8a\u591a\uff0c\u8d8a\u6709\u53ef\u80fd\u53d1\u751f\u4fe1\u606f\u4e22\u5931\uff09</li> </ul> <p>\u5e38\u89c1\u7684\u5c4f\u5e55\u7a7a\u95f4\u65b9\u6cd5\u6709AO,SSAO,HBAO,SSDO,\u90fd\u662f\u57fa\u4e8e\u5c4f\u5e55\u7a7a\u95f4\u7684\u73af\u5883\u5149\u906e\u853d\u63d0\u51fa\u7684GI\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u4f46\u5b83\u4eec\u5bf9\u4e8e\u95f4\u63a5\u5149\u7167\u7684\u7406\u89e3\u90fd\u6ca1\u6709\u89e6\u53ca\u5230\u95ee\u9898\u7684\u672c\u8d28\u3002\u56de\u987e\u4e00\u4e0b\u6211\u4eec\u4e00\u5f00\u59cb\u5bf9\u4e8e\u5168\u5c40\u5149\u7167\u7684\u5b9a\u4e49\uff0c\u5b83\u7684\u6838\u5fc3\u662f\u5982\u4f55\u901a\u8fc7\u6a21\u62df\u5149\u7ebf\u7684\u4f20\u64ad\u8def\u5f84\u6765\u8ba1\u7b97\u6bd4\u76f4\u63a5\u5149\u7167\u591a\u4e00\u6b21bounce\u7684\u5149\u7167\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60f3\u8981\u5728\u5c4f\u5e55\u7a7a\u95f4\u5f97\u5230\u4e00\u4e2a\u66f4\u52a0\u771f\u5b9e\u7684\u7ed3\u679c\uff0c\u8fd8\u662f\u5f97\u9760\u5149\u7ebf\u8ffd\u8e2a\u624d\u80fd\u5b9e\u73b0\u3002\u6258 \u5ef6\u8fdf\u6e32\u67d3 \u7684\u798f\uff0c\u73b0\u5728\u7684\u5c4f\u5e55\u7a7a\u95f4\u5df2\u7ecf\u57fa\u672c\u5177\u5907\u4e86\u6240\u6709\u6a21\u62df\u5149\u7ebf\u5f39\u5c04\u7684\u6761\u4ef6\uff08\u6cd5\u7ebf\uff0c\u6df1\u5ea6\uff0cbalabala\uff09\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u4e0e\u7269\u4f53\u6c42\u4ea4\u505ashading\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u4ecb\u7ecd\u7684\u6700\u540e\u4e00\u79cd\u65b9\u6cd5\u2014\u2014SSR\uff08\u5c4f\u5e55\u7a7a\u95f4\u53cd\u5c04\uff0cscreen-space relfections\uff09</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/#ssr","title":"SSR\u7b97\u6cd5\u7684\u57fa\u672c\u539f\u7406","text":"<ul> <li> <p>\u5bf9\u4e8e\u5c4f\u5e55\u7a7a\u95f4\u4e0a\u7684\u7269\u4f53\u7684\u6bcf\u4e2a\u50cf\u7d20\uff0c\u6839\u636e\u8be5\u50cf\u7d20\u5bf9\u5e94\u7684\u6cd5\u7ebf\u548c\u89c6\u7ebf\u4fe1\u606f\uff0c\u6c42\u89e3\u51fa\u53cd\u5c04\u5411\u91cf\uff1b</p> </li> <li> <p>\u5f53\u524d\u70b9\u6cbf\u7740\u53cd\u5c04\u5411\u91cf\u5728\u5c4f\u5e55\u7a7a\u95f4\u8fdb\u884c\u6b65\u8fdb\uff0c\u5224\u65ad\u6b65\u8fdb\u540e\u7684\u5750\u6807\u6df1\u5ea6\u4e0e\u6df1\u5ea6\u7f13\u5b58\u4e2d\u5b58\u50a8\u7684\u7269\u4f53\u6df1\u5ea6\u662f\u5426\u76f8\u4ea4\uff1b</p> </li> <li> <p>\u82e5\u76f8\u4ea4\uff0c\u53d6\u4ea4\u70b9\u5904\u7684\u7269\u4f53\u989c\u8272\u4f5c\u4e3a\u6700\u7ec8\u7684\u53cd\u5c04\u989c\u8272\uff1b</p> </li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/#ssr_1","title":"SSR\u7684\u4f18\u7f3a\u70b9","text":"<ul> <li>\u4f18\u70b9:</li> <li>\u9488\u5bf9\u4efb\u4f55\u9762\u90fd\u53ef\u4ee5\u5b9e\u65f6\u53cd\u5c04\uff0c\u4e0d\u9700\u8981\u6c42\u5e73\u9762\u3002</li> <li>\u4e0d\u9700\u8981\u989d\u5916\u7684DrawCall\uff0c\u6ca1\u6709Planar Reflection\u90a3\u79cd\u7ffb\u500dDC\u7684\u95ee\u9898\uff0c\u8ba1\u7b97\u90fd\u5728GPU\uff0c\u89e3\u653eCPU\u3002(\u4ec0\u4e48\u662fDrawCall?)</li> <li>\u53ea\u9700\u8981\u989d\u5916\u7684\u540e\u5904\u7406Pass\u5904\u7406\uff0c\u65e0\u9700\u5927\u89c4\u6a21\u6539\u52a8\u5f15\u64ce\u7ba1\u7ebf\uff0c\u5bb9\u6613\u96c6\u6210\u3002(\u4ec0\u4e48\u662fPass?\u4e3a\u4ec0\u4e48\u5bb9\u6613\u96c6\u6210?\u600e\u4e48\u96c6\u6210?)</li> <li>\u53ef\u4ee5\u4e0eReflection Probe\u7b49\u7ed3\u5408\u4f7f\u7528\u3002(\u4ec0\u4e48\u662fReflection Probe?)</li> <li>\u7f3a\u70b9:</li> <li>\u9700\u8981\u5168\u5c4f\u6df1\u5ea6\u548c\u5168\u5c4f\u6cd5\u7ebf\uff0c\u5ef6\u8fdf\u6e32\u67d3\u7ba1\u7ebf\u4e2d\u662f\u53ef\u4ee5\u514d\u8d39\u62ff\u5230\u7684\uff01\u4f46\u662f\u524d\u5411\u6e32\u67d3\u7684\u8bdd\uff0c\u9700\u8981\u989d\u5916\u6e32\u67d3\u4e00\u904dDepthNormalMap\u3002</li> <li>Shader\u4e2d\u9700\u8981\u8fdb\u884cRayMarching\uff0c\u5bf9\u4e8eGPU\u7684\u8d1f\u8f7d\u8f83\u5927\uff0c\u4e14\u6b65\u8fdb\u662f\u6709\u4e00\u5b9a\u6b65\u957f\u7684\uff0c\u5b83\u672c\u8eab\u4e0d\u53ef\u80fd\u975e\u5e38\u7cbe\u786e\u3002</li> <li>\u6548\u679c\u5b58\u5728\u81ea\u8eab\u7f3a\u9677\uff0c\u7531\u4e8e\u53ea\u6709\u5c4f\u5e55\u53ef\u89c1\u7684\u7269\u4f53\u4fe1\u606f\uff0c\u4e0d\u5728\u5c4f\u5e55\u5185\u7684\uff0c\u5c31\u5b8c\u5168\u4e0d\u4f1a\u53cd\u5c04\u3002\u8fd9\u5c5e\u4e8e\u6280\u672f\u672c\u8eab\u7684\u74f6\u9888\u3002(\u4fe1\u606f\u4e22\u5931)</li> <li>\u786c\u8fb9\u95ee\u9898</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/#ssr_2","title":"SSR\u5728\u6e32\u67d3\u7ba1\u7ebf\u4e2d","text":"<p>\u4e3b\u8981\u5e94\u7528\u573a\u666f\u662f\u7247\u5143\u7740\u8272\u5668\u4e2d</p> <p>\u7247\u5143\u7740\u8272\u5668\uff1a</p> <ul> <li>\u7247\u5143\u7740\u8272\u5668\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u53ef\u7f16\u7a0b\u7740\u8272\u5668\u9636\u6bb5\uff0c\u524d\u9762\u7684\u5149\u6805\u5316\u9636\u6bb5\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4f1a\u5f71\u54cd\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u503c\uff0c\u800c\u662f\u4f1a\u4ea7\u751f\u4e00\u7cfb\u5217\u7684\u6570\u636e\u4fe1\u606f\uff0c\u7528\u6765\u8868\u8ff0\u4e00\u4e2a\u4e09\u89d2\u7f51\u683c\u662f\u600e\u6837\u8986\u76d6\u6bcf\u4e2a\u50cf\u7d20\u7684\uff0c\u800c\u7247\u5143\u5c31\u8d1f\u8d23\u5b58\u50a8\u8fd9\u6837\u4e00\u7cfb\u5217\u4fe1\u606f\uff0c\u771f\u6b63\u4f1a\u5bf9\u4ea7\u751f\u5f71\u54cd\u7684\u662f\u4e0b\u4e00\u4e2a\u9636\u6bb5\u9010\u7247\u5143\u64cd\u4f5c\u3002</li> <li>\u7247\u5143\u7740\u8272\u5668\u7684\u8f93\u5165\u662f\u4e0a\u4e00\u4e2a\u9636\u6bb5\u5bf9\u9876\u70b9\u4fe1\u606f\u8fdb\u884c\u63d2\u503c\u7684\u7ed3\u679c\uff08\u662f\u6839\u636e\u4ece\u9876\u70b9\u7740\u8272\u5668\u8f93\u51fa\u7684\u6570\u636e\u63d2\u503c\u5f97\u5230\u7684\uff09\uff0c\u800c\u5b83\u7684\u8f93\u51fa\u662f\u50cf\u7d20\u989c\u8272\u503c\u3002\u8fd9\u4e00\u9636\u6bb5\u53ef\u4ee5\u5b8c\u6210\u5f88\u591a\u91cd\u8981\u7684\u6e32\u67d3\u6280\u672f\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u6280\u672f\u6709\u7eb9\u7406\u91c7\u6837\u3001\u9010\u7247\u5149\u7167\u8ba1\u7b97\u7b49\uff0c\u8986\u76d6\u7247\u5143\u7684\u7eb9\u7406\u5750\u6807\u662f\u901a\u8fc7\u524d\u8ff0\u7684\u9636\u6bb5\u7684\u9876\u70b9\u6570\u636e\u63d2\u503c\u5f97\u5230\u7684\u3002</li> </ul> <p>\u5177\u4f53\u672c\u4eba\u6982\u62ec\u5982\u4e0b:</p> <ul> <li>\u901a\u8fc7\u5e27\u7f13\u51b2\u4e2d\u7684\u4fe1\u606f(\u6df1\u5ea6\u7f13\u51b2,\u989c\u8272\u7f13\u51b2\u7b49),\u5e94\u7528\\(Ray \\  Marching\\)\u5224\u65ad\u7ebf\u4e0e\u9762\u662f\u5426\u76f8\u4ea4</li> <li>\u66f4\u6df1\u5c42\u6b21\u7684\u7406\u89e3\u89c1\u3010\u8bba\u6587\u590d\u73b0\u3011Efficient GPU Screen-Space Ray Tracing - \u77e5\u4e4e (zhihu.com),\u975e\u5e38\u91cd\u8981!!!(\u6211\u8fd8\u6ca1\u6709\u5403\u900f)</li> </ul> <p>\u76f8\u4ea4:\u53ea\u6709\u5f53\u5149\u7ebf\u6b65\u8fdb\u7684\u6df1\u5ea6\\(Ray.z\\)\u5927\u4e8e\u91c7\u6837\u5f97\u5230\u7684\u6df1\u5ea6\\(D e p t h\\) +\u4e00\u4e2a\u504f\u79fb\uff0c\u4e14\\(Ray.z\\)\u5c0f\u4e8e\u6df1\u5ea6\\(D e p t h\\)+\u50cf\u7d20\u539a\u5ea6\uff0c\u624d\u4e3a\u76f8\u4ea4\u6d4b\u8bd5\uff0c\u5373\u51fb\u4e2d\u3002</p> <ul> <li>\u4e4b\u540e\u4fbf\u662f\u91c7\u6837\u7eb9\u7406:\u5f53\u76f8\u4ea4\u6d4b\u8bd5\u6210\u529f\uff0c\u5373\u627e\u5230\u53cd\u5c04\u4ea4\u70b9\u3002\u63a5\u4e0b\u6765\u5c31\u9700\u8981\u53bb\u53d6\u76f8\u4ea4\u70b9\u7684\u7269\u4f53\u989c\u8272\u4f5c\u4e3a\u6700\u7ec8\u7684\u53cd\u5c04\u989c\u8272\u3002\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u53bb\u91c7\u6837\u5386\u53f2\u5e27\u7684\u989c\u8272\u7f13\u51b2\uff0c\u6d89\u53ca\u5230 \u65f6\u95f4\u6297\u952f\u9f7f \u4e2d\u4ecb\u7ecd\u5230\u7684Motion Vector Buffer\uff0c\u901a\u8fc7\u901f\u5ea6\u7f13\u5b58\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u5f53\u524d\u5e27UV\u5728\u4e0a\u4e00\u5e27\u7684UV\uff0c\u8fdb\u800c\u53bb\u91c7\u6837\u5386\u53f2\u5e27\u989c\u8272\u7f13\u51b2\u3002</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/#_3","title":"\u7ed3\u8bed","text":"<p>\u6c34\u5e73\u6709\u9650,\u5c1a\u672a\u80fd\u5403\u900fSSR\u539f\u7406,\u672a\u6d89\u53ca\u5230Hi-Z Screen-Space Reflections(\u52a0\u901f\u5149\u8ffd),SSSR(Stochastic Screen Space Reflections),\u66f4\u591a\u76f8\u5173\u77e5\u8bc6\u89c1\u4e0b\u9762\u7ed9\u51fa\u7684\u53c2\u8003\u8d44\u6599,\u5e76\u8bf7\u5584\u7528\u641c\u7d22\uff1a\uff09</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/SSR%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0%28Screen-Space-Reflection%29/#_4","title":"\u53c2\u8003\u8d44\u6599","text":"<p>\u3010\u8bba\u6587\u590d\u73b0\u3011Efficient GPU Screen-Space Ray Tracing - \u77e5\u4e4e (zhihu.com)</p> <p>GAMES202\u9ad8\u8d28\u91cf\u5b9e\u65f6\u6e32\u67d3-\u4e2a\u4eba\u7b14\u8bb0\uff1a\u5b9e\u65f6\u5168\u5c40\u5149\u7167 - \u77e5\u4e4e (zhihu.com)</p> <p>(13\u6761\u6d88\u606f) \u56fe\u5f62\u5b66\u57fa\u7840|\u5c4f\u5e55\u7a7a\u95f4\u53cd\u5c04(SSR)_\u6851\u676593\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p> <p>(13\u6761\u6d88\u606f) \u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b14\u8bb0\uff08\u4e00\uff09\u6e32\u67d3\u7ba1\u7ebf\u6982\u8ff0_\u5c11\u4fa0\u53ea\u7528\u5200\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p> <p>(40 \u5c01\u79c1\u4fe1 / 80 \u6761\u6d88\u606f) \u57fa\u4e8e\u5f53\u524d\u5b9e\u65f6\u4e91\u6e32\u67d3\u7684\u7279\u70b9\uff0c\u7528\u6237\u4f53\u9a8c\uff08\u6548\u679c\u3001\u6548\u7387)\u4e3b\u8981\u53d7\u5230\u54ea\u4e9b\u5f71\u54cd\uff1f - \u77e5\u4e4e (zhihu.com)</p>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E6%A0%87%E5%87%86%E5%BA%93%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/","title":"C++\u6807\u51c6\u5e93\u4f53\u7cfb\u7ed3\u6784\u4e0e\u5185\u6838\u5206\u6790","text":"<p>\u6240\u8c13\u6cdb\u578b\u7f16\u7a0b(GP, Generic Programming), \u5c31\u662f\u4f7f\u7528\u6a21\u677f\u4e3a\u4e3b\u8981\u5de5\u5177\u6765\u7f16\u5199\u7a0b\u5e8f.</p> <p>\u800cSTL(Standard Template Library \u6807\u51c6\u6a21\u677f\u5e93)\u662fGP\u6700\u6210\u529f\u7684\u4f5c\u54c1</p> <ul> <li>C++\u6807\u51c6\u5e93\u7684header files \u4e0d\u5e26.h, \u4f8b\u5982 <code>#include &lt;vector&gt;</code></li> <li>\u65b0\u5f0fC header files \u4e0d\u5e26.h, \u4f8b\u5982<code>#include &lt;cstdio&gt;</code></li> <li>\u65e7\u5f0fC header files(\u5e26\u6709.h)\u4ecd\u7136\u53ef\u7528, \u4f8b\u5982<code>#include &lt;stdio.h&gt;</code></li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E6%A0%87%E5%87%86%E5%BA%93%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/#stl","title":"STL\u4f53\u7cfb\u7ed3\u6784\u57fa\u7840\u4ecb\u7ecd","text":"<p>STL\u516d\u5927\u90e8\u4ef6:</p> <ul> <li>\u5bb9\u5668(Containers)</li> <li>\u5206\u914d\u5668(Allocators)</li> <li>\u7b97\u6cd5(Algorithm)</li> <li>\u8fed\u4ee3\u5668(Iterators)</li> <li>\u9002\u914d\u5668(Adapters)</li> <li>\u4eff\u51fd\u5f0f(Functors)</li> </ul> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nint main()\n{\n    int ia[6] = {1, 2, 3, 4, 5, 6};\n    vector&lt;int,allocator&lt;int&gt;&gt; v1(ia, ia + 6);\n\n    cout &lt;&lt;   (v1.begin(), v1.end(), not1(bind2nd(less&lt;int&gt;(), 3)));\n\n    return 0;\n}\n</code></pre> <p>STL\u7684\u5bb9\u5668\u57fa\u672c\u4e0a\u90fd\u662f\u91c7\u7528\u7684\"\u524d\u95ed\u540e\u5f00\"\u533a\u95f4, \u5373begin\u662f\u5934, end\u662f\u5c3e\u7684\u6700\u540e\u4e00\u4e2a</p>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E6%A0%87%E5%87%86%E5%BA%93%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/#_1","title":"\u5bb9\u5668\u4e4b\u5206\u7c7b\u53ca\u5404\u79cd\u6d4b\u8bd5","text":"<p>\u4e3a\u4e86\u9009\u7528\u66f4\u9ad8\u6548\u7684\u5bb9\u5668, \u6211\u4eec\u9700\u8981\u4e86\u89e3\u5404\u79cd\u5bb9\u5668\u7684\u7279\u6027</p> <p>\u4e24\u5927\u79cd\u7c7b:</p> <ul> <li>Sequence Containers(\u5faa\u5e8f\u5f0f\u5bb9\u5668): Array, Vector, Deque, List, Forward-List(\u6570\u5217\u548c\u94fe\u8868)</li> <li>Associative Containers(\u5173\u8054\u5f0f\u5bb9\u5668): Set/Multiset, Map/MultiMap(\u7ea2\u9ed1\u6811)</li> <li> <p>Unordered Containers(\u4e0d\u5b9a\u5e8f\u5f0f\u5bb9\u5668): Unordered Set, Unordered map(\u54c8\u5e0c\u8868)</p> </li> <li> <p>vector \u7684\u5185\u5b58\u589e\u957f\u662f\u4e24\u500d\u589e\u957f, \u800c\u589e\u957f\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u5728\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\u5f00\u8f9f\u7a7a\u95f4, \u518d\u62f7\u8d1d\u8fc7\u53bb, \u662f\u4e00\u4e2a\u975e\u5e38\u7f13\u6162\u7684\u8fc7\u7a0b</p> </li> <li> <p>algorithm\u4e2d\u7684\u7b97\u6cd5\u90fd\u662f\u5168\u5c40\u51fd\u6570, \u53ef\u4ee5\u5728\u8c03\u7528\u65f6\u663e\u793a\u5730\u6307\u51fa\u5b83\u662f\u5168\u5c40\u51fd\u6570, \u5373\u5728\u51fd\u6570\u540d\u524d\u52a0\u53cc\u5192\u53f7: <code>::find(c.begin(), c.end(), target);</code>, \u5982\u679c\u4e0d\u52a0\u53cc\u5192\u53f7, \u7f16\u8bd1\u5668\u4e5f\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u5bfb\u627e\u5bfb\u627e\u4e0d\u5230\u7684\u65f6\u5019\u8f6c\u5411\u53bb\u5bfb\u627e\u5168\u5c40\u51fd\u6570.   </p> </li> <li> <p>\u6709\u5168\u5c40\u51fd\u6570sort, \u6709\u7684\u5bb9\u5668\u81ea\u5e26\u7684\u4e5f\u6709sort, \u5982\u679c\u6709\u81ea\u5e26\u7684sort\u8bf7\u7528\u81ea\u5e26\u7684</p> </li> <li> <p>queue\u548cstack\u7684\u5bb9\u5668\u5e95\u5c42\u5b9e\u73b0\u662f\u7528deque, \u56e0\u4e3adeque\u529f\u80fd\u66f4\u5f3a\u5927, \u6240\u4ee5\u5f88\u591a\u4eba\u628a\u5b83\u4eec(stack\u548cqueue)\u79f0\u4e3a\u5bb9\u5668\u7684\u9002\u914d\u5668(Container Adapters)</p> </li> <li> <p>\u7531\u4e8estack\u548cqueue\u7684\u7279\u6027, c++\u4e0d\u63d0\u4f9b\u4ed6\u7684\u8fed\u4ee3\u5668, \u9632\u6b62\u4f60\u7834\u574f\u8fd9\u4e2a\u5bb9\u5668\u7684\u7279\u6027</p> </li> <li>\u5173\u8054\u5f0f\u5bb9\u5668multiset/set, \u7ea2\u9ed1\u6811, \u63d2\u5165\u6162, \u67e5\u627e\u5feb</li> <li> <p>multimap/map, \u7ea2\u9ed1\u6811, \u548cset\u7684\u533a\u522b: \u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6570\u636e, \u4e00\u4e2a\u662f\u503c\u4e00\u4e2a\u662f\u952e</p> </li> <li> <p>\u5728\u4e0d\u5b9a\u5e8f\u5f0f\u5bb9\u5668\u4e2d, \u82e5\u67d0\u4e00\u4e2abucket\u4e2d\u7684\u5143\u7d20\u6570\u8d85\u8fc7\u4e86bucket\u7684\u6570\u91cf, \u5219\u9700\u8981\u91cd\u6392 </p> </li> <li> <p>multi\u4ee3\u8868\u5176\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d, \u6ca1\u6709multi\u5219\u4e0d\u53ef\u4ee5\u91cd\u590d(key\u548cvalue\u90fd\u91cd\u590d\u624d\u91cd\u590d)</p> </li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E6%A0%87%E5%87%86%E5%BA%93%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/#_2","title":"\u5206\u914d\u5668","text":"<p>\u5bb9\u5668\u80cc\u540e\u9700\u8981\u5206\u914d\u5668\u652f\u6301\u5176\u5185\u5b58\u7684\u5206\u914d, \u4f60\u4e0d\u7528\u5199\u5bb9\u5668\u5df2\u7ecf\u6709\u4e86\u9ed8\u8ba4\u7684\u5206\u914d\u5668</p> <ul> <li>\u5bb9\u5668\u90fd\u662f\u6807\u51c6\u5e93\u89c4\u5b9a\u7684</li> <li>\u5bb9\u5668\u90fd\u662f\u6709\u6a21\u677f\u7684\u4e14\u6a21\u677f\u6709\u7b2c\u4e8c\u53c2\u6570, \u4e14\u90fd\u6709\u9ed8\u8ba4\u5206\u914d\u5668</li> <li><code>std::allocator</code>\u5728<code>&lt;memory&gt;</code>\u4e0b, \u82e5\u8981\u4f7f\u7528\u5176\u4ed6\u7684allocator, \u8bf7\u81ea\u884c<code>#include &lt;ext/...&gt;</code></li> <li>\u4e0d\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528\u5206\u914d\u5668, \u5206\u914d\u5668\u6700\u597d\u90fd\u8981\u642d\u914d\u5bb9\u5668\u4f7f\u7528</li> <li>\u56e0\u4e3a\u5206\u914d\u5668\u9700\u8981free\u7684\u65f6\u5019\u9700\u8981\u6307\u660e\u5f53\u521d\u5206\u914d\u591a\u5927\u7684\u5185\u5b58, \u8fd9\u663e\u7136\u662f\u4e0d\u4eba\u6027\u5316\u7684, \u4e0d\u5982\u4f7f\u7528<code>malloc/free</code>\u6216<code>new/delete</code></li> </ul> <p>\u5e38\u89c4\u8fdb\u884c\u5185\u5b58\u5206\u914d\u4f7f\u7528<code>malloc/free</code>\u65f6, \u9664\u4e86\u4f60\u5b9a\u4e49\u7684<code>size</code>\u8fd8\u8981\u6709\u4e00\u90e8\u5206\u7684\u7a7a\u95f4\u4f5c\u4e3acookie, (\u4f60\u9700\u8981\u77e5\u9053malloc\u7684\u5185\u5b58\u7684\u5927\u5c0f), \u6700\u57fa\u7840\u7684\u5206\u914d\u5668\u5c31\u662f\u8c03\u7528malloc\u548cfree, \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u60f3\u5230, \u5bf9\u4e8e\u4e00\u4e2a\u5bb9\u5668\u8fdb\u884cmalloc\u65f6, \u5e76\u4e0d\u9700\u8981\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2acookie(\u56e0\u4e3a\u4ed6\u4eec\u7684\u5927\u5c0f\u603b\u662f\u786e\u5b9a\u597d\u4e86\u7684), \u53ef\u4ee5\u4e00\u4e0b\u5206\u914d\u4e00\u5927\u5757, \u518d\u5728\u5185\u90e8\u5207\u5272, \u8fd9\u6837\u53ef\u4ee5\u7701\u4e0b\u5f88\u591a\u5185\u5b58</p> <p>\u8fd9\u91cc\u662f\u4e00\u4e9b\u901f\u901a\uff1a</p> <ul> <li> <p>list\uff1a\u53cc\u5411\u94fe\u8868\uff0c\u6709\u4e00\u4e2a\u5360\u4f4d\u7684\u7a7a\u8282\u70b9\uff0cend\u6307\u5411\u5b83\uff0c\u9002\u5408\u589e\u5220\u573a\u666f\uff0c\u4e0d\u652f\u6301\u4e0b\u6807\u8bbf\u95ee</p> </li> <li> <p>vector\uff1a\u5185\u5b58\u4e2d\u8fde\u7eed\uff0c\u652f\u6301\u4e0b\u6807\u8bbf\u95ee\uff0c\u6709capacity\u548csize\uff0c\u4e00\u822c\u4e24\u500d\u6269\u5bb9</p> </li> <li> <p>array\uff1a\u7b80\u5355\u5c01\u88c5\uff0c\u751a\u81f3\u6ca1\u6709\u6784\u9020\u4e0e\u6790\u6784\u51fd\u6570\uff0c\u76ee\u7684\u662f\u5c06\u6570\u7ec4\u4e0estl\u7684\u4e00\u4e9b\u7b97\u6cd5\u517c\u5bb9</p> </li> <li> <p>deque\uff1a\u53cc\u7aef\u961f\u5217\uff0c\u6709\u4e00\u4e2a\u53eb\u505amap\u7684\u6210\u5458\uff0c\u662f\u4e00\u4e2aT**\u7c7b\u578b\uff0c\u4e3a\u63a7\u5236\u4e2d\u5fc3\uff0c\u6307\u5411\u4e00\u4e2a\u4e2abuffer\u3002deque\u5728\u5185\u5b58\u4e2d\u7247\u6bb5\u8fde\u7eed\uff0c\u4f46\u662f\u7531\u4e8e\u63a7\u5236\u4e2d\u5fc3\u7684\u5b58\u5728\uff0c\u5bf9\u4f7f\u7528\u8005\u8fde\u7eed</p> </li> <li> <p>queue\u548cstack\uff1adeque\u7684\u9002\u914d\u5668\uff08\u5e95\u5c42\u5bb9\u5668\u662fdeque\uff09\uff0c\u7531\u4e8equeue\u548cstack\u7684\u8fdb\u51fa\u662f\u4e25\u683c\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5185\u90e8\u6ca1\u6709\u5b9a\u4e49\u8fed\u4ee3\u5668\u3002\u5b9e\u9645\u4e0aqueue\u548cstack\u7684\u5e95\u5c42\u5bb9\u5668\u662f\u53ef\u4ee5\u81ea\u5df1\u51b3\u5b9a\u7684\uff0cqueue\u548cstack\u7684\u5e95\u5c42\u5bb9\u5668\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e3alist;stack\u7684\u5e95\u5c42\u5bb9\u5668\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e3avector\uff0c\u8fd9\u4e9b\u5bb9\u5668\u90fd\u5b9e\u73b0queue\u548cstack\u5185\u90e8\u7528\u5230\u7684\u65b9\u6cd5\u3002\u5c31\u7b97\u6307\u5b9a\u4e86\u9519\u8bef\u7684\u5bb9\u5668\uff0c\u53ea\u8981\u6ca1\u6709\u8c03\u7528\u4e0d\u652f\u6301\u7684\u65b9\u6cd5\uff0c\u4ecd\u80fd\u7f16\u8bd1\u901a\u8fc7\uff0c\u8bf4\u660e\u7f16\u8bd1\u5668\u5728\u5904\u7406\u6a21\u677f\u662f\u4e0d\u4f1a\u8fdb\u884c\u5168\u9762\u7684\u68c0\u67e5</p> </li> <li> <p>rb_tree\uff1a\u7ea2\u9ed1\u6811\u7684\u5c01\u88c5\uff0c\u662f\u6709\u5e8f\u5bb9\u5668\uff0c\u63d0\u4f9b\u4e86\u8fed\u4ee3\u5668\uff0c\u4f46\u4e0d\u5e94\u8be5\u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u76f4\u63a5\u6539\u53d8\u5143\u7d20\u503c\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u63d2\u5165\u64cd\u4f5cinsert_unique\u548cinsert_equal</p> </li> <li> <p>set\u548cmultiset\uff1a\u4ee5rb_tree\u4e3a\u5e95\u5c42\u5bb9\u5668\uff0c\u6392\u5e8f\u7684\u4f9d\u636e\u662fkey\uff0cset\u548cmultiset\u7684key\u548cvalue\u4fdd\u6301\u4e00\u81f4\u3002\u7531\u4e8eset\u5fc5\u987b\u4fdd\u8bc1key\u72ec\u4e00\u65e0\u4e8c\uff0c\u6240\u4ee5\u63d2\u5165\u65f6\u8c03\u7528\u7684\u662frb_tree\u7684insert_unique\uff0c\u5728\u63d2\u5165\u91cd\u590dkey\u65f6\u4f1a\u63d2\u5165\u5931\u8d25\uff0c\u800cmultiset\u53ef\u4ee5\u4f7f\u7528insert_equal</p> </li> <li> <p>map\u548cmultimap\uff1a\u7c7b\u4f3cset\u4e0emultiset\uff0c\u53ea\u662fkey\u548cvalue\u4e0d\u5fc5\u4fdd\u6301\u4e00\u81f4</p> </li> <li> <p>hashtable\uff1a\u6700\u5f00\u59cb\u53ea\u670953\u4e2a\u6876,\u5f53\u5143\u7d20\u4e2a\u6570\u5927\u4e8e\u6876\u7684\u4e2a\u6570\u65f6,\u6876\u7684\u6570\u76ee\u6269\u5927\u4e3a\u6700\u63a5\u8fd1\u5f53\u524d\u6876\u6570\u4e24\u500d\u7684\u8d28\u6570,\u5b9e\u9645\u4e0a,\u6876\u6570\u76ee\u7684\u589e\u957f\u987a\u5e8f\u88ab\u5199\u6b7b\u5728\u4ee3\u7801\u91cc:</p> </li> </ul> <p><code>cpp   static const unsigned long __stl_prime_list[__stl_num_primes] = {           53, 97, 193, 389, 769, 1543, 3079, 6151, 12289, 24593,           49157, 98317, 196613, 393241, 786433, 1572869, 3145739,           6291469, 12582917, 25165843, 50331653, 100663319,           201326611, 402653189, 805306457, 1610612741,           3221225473ul, 4294967291ul};</code></p> <ul> <li>unordered_set, unordered_multiset, unordered_map, unordered_multimap\uff1a\u7528\u6cd5\u4e0e\u4e0d\u5e26unordered\u524d\u7f00\u7684\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5e95\u5c42\u5b9e\u73b0\u662f\u4e00\u4e2ahashtable</li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","title":"C++\u9762\u5411\u5bf9\u8c61\u9ad8\u7ea7\u7f16\u7a0b(\u4e0a)","text":""},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/#_1","title":"\u5982\u4f55\u4f18\u96c5\u5730\u5199\u4e00\u4e2a\u7c7b?","text":"<p>\u4faf\u6377\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e0a\u7bc7\u7b2c\u516d\u7ae0\u5185\u5bb9</p> <pre><code>//\u8be5\u5934\u6587\u4ef6\u5e76\u4e0d\u5b8c\u6574,\u6709\u4e9b\u51fd\u6570\u5c1a\u672a\u7ed9\u51fa,\u76f4\u63a5\u7f16\u8bd1\u4f1a\u51fa\u9519,\u53ea\u628a\u9700\u8981\u7406\u89e3\u7684\u5730\u65b9\u6807\u51fa,\u4f9b\u53c2\u8003\n\n#ifndef _COMPLEX_//\u9632\u536b\u5f0f\u58f0\u660e\n#define _COMPLEX_\n\nclass complex\n{\npublic:\n    complex (double r = 0, double i = 0)//\u9ed8\u8ba4\u53c2\u6570\n        :re(r), im(i)//initializing list \u521d\u59cb\u5316\u5217\u8868\n    { }\n    complex&amp; operator += (const complex&amp;);//\u6210\u5458\u51fd\u6570,\u64cd\u4f5c\u7b26\u91cd\u8f7d\n    double real() const { return re; }\n    double imag() const { return im; }\n    //\u53ea\u8981\u4e0d\u592a\u957f,\u7f16\u8bd1\u5668\u5c31\u4f1a\u8ba4\u4e3a\u662finline\u51fd\u6570,\u901f\u5ea6\u66f4\u5feb\n    //tips:\u5982\u679c\u5728class\u5916\u90e8\u4f7f\u7528inline\u5173\u952e\u5b57,\u7f16\u8bd1\u5668\u5c06\u4f1a\u5c3d\u91cf\u8ba9\u4ed6\u6210\u4e3a\u5185\u8054\u51fd\u6570\n    //\u53ea\u6709\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u9650\u5b9a\u7b26'const',\u53ea\u8981\u8be5\u6210\u5458\u51fd\u6570\u5185\u4e0d\u4f1a\u6539\u53d8re,im\u5219\u5efa\u8bae\u52a0\u4e0a'const'\nprivate:\n    double re, im;//\u79c1\u6709\u6210\u5458\u4e0d\u80fd\u88ab\u5916\u90e8\u8bbf\u95ee,\u4f53\u73b0\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\"\u5c01\u88c5\"\u7684\u601d\u60f3\n\n    friend complex&amp; _doapl (complex*, const complex&amp;);\n    //\u53cb\u5143\u51fd\u6570,\u53ef\u4ee5\u8bbf\u95eeprivate\u6210\u5458\n};\n\ninline complex&amp;\n_doapl(complex* ths, const complex&amp; r)//\u5c06\u4f1a\u4f7f\u7528ths\u6765\u4fdd\u5b58\u7ed3\u679c,ths\u7684\u503c\u4f1a\u6539\u53d8,\u6545\u4e0d\u7528const\n{\n    ths-&gt;re += r.re;\n    ths-&gt;im += r.im;\n    return *ths;\n    //question:\u4e3a\u4ec0\u4e48\u8fd4\u56de\u503c\u662f*ths,\u800c\u51fd\u6570\u58f0\u660e\u7684\u8fd4\u56de\u503c\u662f complex&amp;\n    //answer:*ths\u662f\u4e00\u4e2acomplex\u7c7b\u578b,*ths\u5e76\u4e0d\u662f\u4e00\u4e2alocal\u53d8\u91cf,\u53ef\u4ee5\u5f15\u7528\n}\n\ninline complex&amp;//\u8003\u8651\u5230\u8fd4\u56de\u503c\u5e76\u4e0d\u662flocal\u53d8\u91cf,\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\u4f20\u503c\n    //pass by reference \u6bd4 pass by value\u66f4\u5feb,\u80fd\u4f7f\u7528\u5f15\u7528\u4f20\u503c\u5c3d\u91cf\u4f7f\u7528\ncomplex::operator += (const complex&amp; r)//this\u6307\u9488\u662f\u6240\u6709\u6210\u5458\u51fd\u6570\u7684\u9690\u542b\u53c2\u6570,\u6307\u5411\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5bf9\u8c61\n{\n    return _doapl(this, r);\n}\n\ninline complex\noperator + (const complex&amp; x, const complex&amp; y){\n    return complex ( x.real () + y.real() ,\n                     x.imag () + y.imag() );//\u4e34\u65f6\u58f0\u660e\u4e00\u4e2acomplex\u5bf9\u8c61,\u5728\u8fd9\u4e00\u884c\u6267\u884c\u5b8c\u6bd5\u540e\u5c06\u4f1a\u7070\u98de\u70df\u706d\n}\n\n//\u91cd\u8f7d\ninline complex\noperator + (const complex&amp; x, double y){\n    return complex ( x.real () + y, x.imag () );\n}\n\n//\u4f20\u7edf\u7684cout\u5b9a\u4e49\u65f6\u4e0d\u4f1a\u8003\u8651\u5230\u7a0b\u5e8f\u5458\u81ea\u5df1\u5b9a\u4e49\u7684\u5404\u79cd\u7c7b\n//\u4e3a\u4e86\u4f7f\u7528 cout &lt;&lt; c1\u8fd9\u79cd\u7528\u6cd5(c1\u662f\u4e00\u4e2acomplex\u5bf9\u8c61),\u6211\u4eec\u8003\u8651\u5230\u64cd\u4f5c\u7b26\u91cd\u8f7d\u4e00\u5b9a\u662f\u4f5c\u7528\u4e8e\u64cd\u4f5c\u7b26\u53f3\u8fb9\n//\u5047\u5982\u5728\u6210\u5458\u51fd\u6570\u5185\u64cd\u4f5c\u7b26\u91cd\u8f7d '&lt;&lt;' \u90a3\u5c06\u4f1a\u5199\u6210 c1 &lt;&lt; cout, \u8fd9\u5e76\u4e0d\u7b26\u5408\u7a0b\u5e8f\u5458\u7684\u4e60\u60ef\n//\u4e8e\u662f\u6211\u4eec\u53ea\u80fd\u5c06\u8be5\u64cd\u4f5c\u7b26\u91cd\u8f7d\u5b9a\u4e49\u4e3a\u5168\u5c40\u51fd\u6570\n#include &lt;iostream&gt;\nostream&amp;//\u4e3a\u4e86\u53ef\u4ee5\u8fde\u7eed:cout &lt;&lt; c1 &lt;&lt; c2\noperator &lt;&lt; (ostream&amp; os, const complex&amp; x)\n{\n    os &lt;&lt; '(' &lt;&lt; real(x) &lt;&lt; ',' &lt;&lt; imag(x) &lt;&lt; ')';\n}\n\n#endif // _COMPLEX_\n</code></pre>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/#class-with-pointer-members","title":"Class with pointer members","text":"<ul> <li>\u62f7\u8d1d\u6784\u9020&amp;\u62f7\u8d1d\u8d4b\u503c:\u4e00\u4e2a\u4e00\u4e2abit\u62f7\u8d1d\u8fc7\u53bb,\u6240\u4ee5\u6307\u9488\u4e0d\u80fd\u76f4\u63a5\u7528\u7f16\u8bd1\u5668\u7684\u62f7\u8d1d(\u6d45\u62f7\u8d1d),\u53ea\u8981\u7c7b\u5305\u542b\u6307\u9488\u5c31\u8981\u5199\u51fa\u4ee5\u4e0b\u4e09\u4e2a\u51fd\u6570(Big three)</li> <li>\u6784\u9020\u51fd\u6570\u63a5\u53d7\u7684\u53c2\u6570\u662f\u81ea\u5df1\u7684\u4e1c\u897f<code>String (const String&amp; str);</code>\u5219\u4e3a\u62f7\u8d1d\u6784\u9020\u51fd\u6570</li> <li><code>String&amp; operator = (const String&amp; str);</code>\u64cd\u4f5c\u7b26\u91cd\u8f7d,\u62f7\u8d1d\u8d4b\u503c</li> <li>\u6790\u6784\u51fd\u6570<code>~String();</code>:\u9700\u8981delete,\u9632\u6b62\u5185\u5b58\u6cc4\u9732 </li> <li>\u62f7\u8d1d\u6784\u9020&amp;\u62f7\u8d1d\u8d4b\u503c\u7684\u533a\u522b:\u62f7\u8d1d\u6784\u9020\u76f4\u63a5\u5206\u914d\u7a7a\u95f4\u5e76\u8d4b\u503c,\u62f7\u8d1d\u8d4b\u503c\u8981\u5148\u6e05\u9664\u539f\u6765\u7684\u5185\u5b58\u7a7a\u95f4(\u8fd9\u91cc\u8981\u5148\u68c0\u6d4b\u81ea\u6211\u8d4b\u503c**)</li> </ul> <p>## \u5806\u3001\u6808\u4e0e\u5185\u5b58\u7ba1\u7406</p> <ul> <li> <p>stack:\u5927\u62ec\u53f7\u662f\u4e00\u4e2a\u4f5c\u7528\u57df\uff08scope\uff09\uff0c\u6240\u8c13stack\u5c31\u662f\u4f5c\u7528\u57df\u4e2d\u7684\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\uff0c\u5728\u51fd\u6570\u5185\u58f0\u660e\u7684\u4efb\u4f55\u53d8\u91cf\uff0c\u5176\u6240\u4f7f\u7528\u7684\u5185\u5b58\u90fd\u53d6\u81ea\u4e0a\u8ff0stack</p> </li> <li> <p>heap:\u6216\u6210system heap\uff08\u548c\u6570\u636e\u7ed3\u6784\u4e2d\u7684heap\u4e0d\u540c\uff09\uff0c\u662f\u6307\u7531\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u4e00\u5757global\u5185\u5b58\u7a7a\u95f4\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u52a8\u6001\u5206\u914d\uff08allocated\uff09\u4ece\u4e2d\u83b7\u5f97\u82e5\u5e72\u533a\u5757\uff08blocks\uff09\uff0c\u4efb\u4f55\u65f6\u5019new\u7684\u5bf9\u8c61\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u90fd\u53d6\u81eaheap,\u56e0\u6b64,<code>new</code>\u7684\u53d8\u91cf\u5fc5\u987b\u8981<code>delete</code>\u4e0d\u7136\u5c06\u4f1a\u5185\u5b58\u6cc4\u9732(\u6307\u9488\u6b7b\u4ea1,\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u7a7a\u95f4\u5374\u6ca1\u6709)</p> </li> <li> <p>\u9759\u6001\u53d8\u91cf:\u82e5\u5728\u4f5c\u7528\u57df\u4e2d\u7528<code>static</code>\u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf,\u4e0d\u4f1a\u518d\u4f5c\u7528\u57df\u7ed3\u675f\u540e\u6d88\u5931</p> </li> <li> <p>\u5168\u5c40\u53d8\u91cf:\u5728<code>main</code>\u51fd\u6570\u4e4b\u524d\u58f0\u660e,\u5176\u751f\u547d\u5728\u6574\u4e2a\u7a0b\u5e8f\u7ed3\u675f\u540e\u624d\u4f1a\u7ed3\u675f,\u53ef\u4ee5\u628a\u5b83\u89c6\u4e3a\u4e00\u79cd<code>static obj</code>,\u5176\u4f5c\u7528\u57df\u662f\u6574\u4e2a\u7a0b\u5e8f</p> </li> <li> <p>new:<code>new</code>\u5148\u5206\u914d\u5185\u5b58,\u518d\u8c03\u7528<code>ctor</code></p> </li> <li> <p>```cpp     Complex* pc = new Complex(1, 2);</p> <p>//\u7f16\u8bd1\u5668\u8f6c\u5316\u4e3a: /1/void mem = operator new( sizeof(Complex) ); //\u5206\u914d\u5185\u5b58,\u5176\u4e2d\u7684operator new\u662f\u4e00\u4e2a\u6bd4\u8f83\u7279\u6b8a\u7684\u51fd\u6570\u540d,\u5176\u5185\u90e8\u8c03\u7528malloc(mem) /2/pc = static_cast(mem); //\u8f6c\u578b /3*/pc-&gt;Complex::Complex(1, 2); //\u6784\u9020\u51fd\u6570 ``` <li> <p>delete:<code>delete</code>\u5148\u8c03\u7528<code>dtor</code>,\u518d\u91ca\u653e\u5185\u5b58</p> </li> <li> <p>```cpp     String* ps = new String(\"Hello\");     ...     delete ps;</p> <p>//\u7f16\u8bd1\u5668\u8f6c\u5316\u4e3a: /1/String::~String(ps); //\u6790\u6784\u51fd\u6570 /2/operator delete(ps); //\u91ca\u653e\u5185\u5b58,\u5176\u4e2d\u7684operator delete\u662f\u4e00\u4e2a\u6bd4\u8f83\u7279\u6b8a\u7684\u51fd\u6570\u540d,\u5176\u5185\u90e8\u8c03\u7528free(ps) ```</p> </li> <li> <p></p> </li> <li> <p>array:<code>array new</code>\u8981\u642d\u914d<code>array delete</code></p> </li> <li> <p><code>cpp     Complex* p = new Complex[3];     ...     delete[] p; //\u5524\u8d77\u4e09\u6b21dtor     delete p;   //\u5524\u8d77\u4e00\u6b21dtor</code></p> </li> <li> <p></p> </li> <li> <p>\u5982\u679c<code>class</code>\u4e0d\u5e26\u6307\u9488,\u4e24\u79cddelete\u7684\u7ed3\u679c\u4e00\u6837(\u56e0\u4e3a\u4e0d\u9700\u8981\u8c03\u7528\u6790\u6784\u51fd\u6570\u56de\u6536\u7a7a\u95f4),\u4f46\u4e3a\u517b\u6210\u597d\u4e60\u60ef,\u4efb\u4f55\u65f6\u5019<code>array new</code>\u90fd\u8981\u642d\u914d<code>array delete</code></p> </li>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/#string","title":"\u590d\u4e60String\u7c7b\u7684\u5b9e\u73b0\u8fc7\u7a0b","text":"<pre><code>#include &lt;string.h&gt;\nclass String\n{\npublic:\n    String(const char* cstr = 0);\n    String(const String&amp; str);\n    String&amp; operator=(const String&amp; str);\n    ~String();\n    char* get_c_str() const { return m_data; }\nprivate:\n    char* m_data;\n};\n\ninline String::String(const char* cstr = 0)\n{\n    if (cstr){\n        m_data = new char[strlen(cstr) + 1];\n        strcpy(m_data, cstr);\n    }else{\n        m_data = new char[1];\n        *m_data = '\\0';\n    }\n}\n\ninline String::~String()\n{\n    delete[] m_data;\n}\n\ninline String::String(const String&amp; str)\n{\n    m_data = new char[strlen(str.m_data) + 1];\n    strcpy(m_data, str.m_data);\n}\n\ninline String&amp; String::operator=(const String&amp; str)\n{\n    if(this == &amp;str)\n        return *this;\n\n    delete[] m_data;\n    m_data = new char[strlen(str.m_data) + 1];\n    strcpy(m_data, str.m_data);\n    return *this;\n}\n</code></pre>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/#_2","title":"\u7c7b\u6a21\u677f\uff0c\u51fd\u6570\u6a21\u677f\uff0c\u53ca\u5176\u4ed6","text":"<ul> <li><code>static</code>\u8fdb\u4e00\u6b65\u8865\u5145:</li> </ul> <p>\u8003\u8651\u8fd9\u6837\u4e00\u4e2aclass:</p> <p>```cpp   class Account {   public:       static double m_rate;       static void set_rate(const double&amp; x) { m_rate = x; }   };   double Account::m_rate = 8.0;</p> <p>int main()   {     Account::set_rate(5.0);</p> <pre><code>  Account a;\n  a.set_rate(7.0);\n</code></pre> <p>}   ```</p> <ul> <li> <p>\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5728\u6210\u5458\u51fd\u6570\u4e2d\u8865\u5145\u4e00\u4e2a\u53c2\u6570<code>this</code>\u6307\u5411\u8c03\u7528\u8005,\u4f46\u662f\u7a0b\u5e8f\u5458\u5728\u6210\u5458\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u4e0d\u53ef\u4ee5\u5199\u5b83,\u800c\u5728\u51fd\u6570\u91cc\u53ef\u5199\u53ef\u4e0d\u5199.</p> </li> <li> <p>\u9759\u6001\u51fd\u6570\u6ca1\u6709<code>this</code>,\u4e14\u9759\u6001\u51fd\u6570\u53ea\u80fd\u5b58\u53d6\u9759\u6001\u6570\u636e, <code>a.set_rate(7.0);</code>\u8fd9\u79cd\u5f62\u5f0f\u4ecd\u662f\u5408\u6cd5\u7684,\u4f46\u4e0d\u4f1a\u50cf\u666e\u901a\u7684\u6210\u5458\u51fd\u6570\u4e00\u6837\u5c06<code>a</code>\u4f5c\u4e3a<code>this</code>\u4f20\u7ed9\u6210\u5458\u51fd\u6570</p> </li> <li> <p>\u9759\u6001\u6570\u636e\u5fc5\u987b\u8981\u5728\u7c7b\u5916\u5b9a\u4e49<code>double Account::m_rate = 8.0;</code></p> </li> <li> <p>\u5f53\u6211\u4eec\u60f3\u5728\u67d0\u4e00\u5904\u8c03\u7528<code>\u9759\u6001\u51fd\u6570</code>\u65f6,\u6211\u4eec\u53ef\u80fd\u8fd8\u6ca1\u6709<code>\u5bf9\u8c61</code>,\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7<code>Account::set_rate(5.0);</code>\u76f4\u63a5\u8c03\u7528</p> </li> <li> <p>\u5b9e\u73b0<code>\u5355\u4f8b(Singleton)</code>:\u628a<code>ctors</code>\u653e\u5728<code>private</code>\u91cc</p> <p>```cpp class A { public:     static A&amp; getInstance();     setup(){ ... } private:     A();     A(const A&amp; rhs);     ... };</p> <p>A&amp; A::getInstance() {     static A a;     return a; } //\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5199\u6cd5,\u53ea\u6709\u5728\u7528\u5230getInstance\u65f6\u624d\u4f1a\u5efa\u7acbA,\u4e14\u53ea\u5efa\u7acb\u4e00\u4e2a ```</p> </li> <li> <p>\u8fdb\u4e00\u6b65\u8865\u5145<code>cout</code>:\u662f\u4e00\u4e2a<code>ostream</code>\u5bf9\u8c61,<code>ostream</code>\u7c7b\u4e2d\u6709\u76f8\u5f53\u591a\u7684<code>operator&lt;&lt;</code>\u91cd\u8f7d </p> </li> <li> <p>\u8fdb\u4e00\u6b65\u8865\u5145class template, \u7c7b\u6a21\u677f:<code>template&lt;typename T&gt;</code>\u5728\u540e\u9762\u4f7f\u7528\u65f6<code>Complex&lt;double&gt; c1();</code>\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u4ee3\u7801,\u53ea\u662f\u5c06<code>T</code>\u66ff\u6362\u6210\u4e86<code>double</code>,\u56e0\u6b64\u6709\u4eba\u8bf4\u8fd9\u6837\u5728\u6210\u4ee3\u7801\u91cf\u7684\u81a8\u80c0,\u4f46\u8fd9\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e0d\u597d\u7684,\u56e0\u4e3a\u786e\u786e\u5b9e\u5b9e\u9700\u8981\u90a3\u4e48\u591a\u4efd,\u81a8\u80c0\u7684\u53ea\u662f\u6700\u5f00\u59cb\u5e26\u6709<code>T</code>\u7684\u7248\u672c.</p> </li> <li> <p>\u8fdb\u4e00\u6b65\u8865\u5145function template:<code>template &lt;class T&gt;</code>\u5bf9\u4e8e\u67d0\u4e9b\u901a\u7528\u7684\u51fd\u6570(\u5982\u6bd4\u5927\u5c0f),\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u6a21\u677f,\u5e76\u4e14\u5728\u4f7f\u7528\u65f6\u4e0d\u5fc5\u50cf\u7c7b\u6a21\u677f\u4e00\u6837\u8981\u663e\u5f0f\u6307\u51fa<code>&lt;typename&gt;</code>,\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u5b9e\u53c2\u63a8\u5bfc,\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u5b9e\u53c2\u7c7b\u578b</p> </li> </ul> <p><code>cpp   template &lt;class T&gt;//\u5982\u679c\u4e0d\u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u5219\u4e3atypename   inline const T&amp; min(const T&amp; a, const T&amp; b)   {     return b &lt; a ? b : a;//\u8fd9\u91cc\u9700\u8981\u8865\u5145\u8bb8\u591a\u64cd\u4f5c\u7b26\u91cd\u8f7d   }</code></p> <ul> <li>\u8fdb\u4e00\u6b65\u8865\u5145<code>namespace</code>:</li> </ul> <p></p>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/#_3","title":"\u7ec4\u5408\u4e0e\u7ee7\u627f","text":"<ul> <li> <p>\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3:\u7c7b\u548c\u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb</p> </li> <li> <p>Composition(\u590d\u5408):\u7c7b\u91cc\u9762\u6709\u522b\u7684\u7c7b,</p> </li> <li> <p>Delegation(\u59d4\u6258):\u53c8\u79f0Composition by reference\u7c7b\u91cc\u9762\u6709\u6307\u9488\u6307\u5411\u522b\u7684\u7c7b,\u4e00\u4e2a\u6709\u540d\u7684\u624b\u6cd5</p> </li> </ul> <p></p> <ul> <li> <p>pImpl : pointer to implement(Handle/Body),\u5c06\u63a5\u53e3\u4e0e\u5185\u90e8\u5b9e\u73b0\u5206\u79bb,\u53ef\u4ee5\u505a\u5230\u5ba2\u6237\u7aef\u7684\u5171\u4eab</p> </li> <li> <p>Inheritance(\u7ee7\u627f):</p> </li> </ul> <p>```cpp   struct _List_node_base   {     _List_node_base _M_next;       _List_node_base _M_prev;   };</p> <p>template   struct _List_node       : public _List_node_base//public\u7ee7\u627f   {     _Tp _M_data;   }   ``` <ul> <li> <p>\u5bf9\u4e8e\u6784\u9020\u548c\u6790\u6784,\u540c\u6837\u9075\u5faa\u6784\u9020\u7531\u5185\u800c\u5916,\u6790\u6784\u7531\u5916\u800c\u5185 \u539f\u5219(derived\u5728\u5916, base\u5728\u5185)</p> <p>\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f,base class(\u7236\u7c7b)\u7684dtor\u5fc5\u987b\u662fvirtual\u5426\u5219\u4f1a\u51fa\u73b0undefined behavior.</p> </li> <li> <p>\u7ee7\u627f\u6700\u4e3b\u8981\u662f\u642d\u914d\u865a\u51fd\u6570</p> </li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/c%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/#_4","title":"\u865a\u51fd\u6570\u4e0e\u591a\u6001","text":"<ul> <li> <p>\u5728\u4efb\u4f55\u6210\u5458\u51fd\u6570\u4e4b\u524d\u52a0\u4e0a<code>virtual</code></p> </li> <li> <p>\u6570\u636e\u88ab\u7ee7\u627f\u4e0b\u6765,\u5360\u7528\u4e86\u5185\u5b58\u7684\u4e00\u90e8\u5206,\u4f46\u662f\u51fd\u6570\u7684\u7ee7\u627f,\u7ee7\u627f\u7684\u662f\u51fd\u6570\u7684\u8c03\u7528\u6743</p> </li> <li> <p>\u865a\u51fd\u6570:</p> </li> <li> <p>\u975e\u865a\u51fd\u6570(non-virtual):\u4f60\u4e0d\u5e0c\u671b\u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49(overwrite,\u8986\u5199)\u5b83</p> </li> <li>\u865a\u51fd\u6570(virtual):\u4f60\u5e0c\u671b\u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49(overwrite,\u8986\u5199)\u5b83,\u4e14\u5b83\u5df2\u7ecf\u6709\u4e86\u9ed8\u8ba4\u7684\u5b9a\u4e49</li> <li> <p>\u7eaf\u865a\u51fd\u6570(pure virtual):\u5b50\u7c7b\u4e00\u5b9a\u8981\u91cd\u65b0\u5b9a\u4e49(overwrite,\u8986\u5199)\u5b83,\u5b83\u6ca1\u6709\u9ed8\u8ba4\u7684\u5b9a\u4e49</p> </li> <li> <p></p> </li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/","title":"C++\u9762\u5411\u5bf9\u8c61\u9ad8\u7ea7\u7f16\u7a0b(\u4e0b)--\u517c\u8c08\u5bf9\u8c61\u6a21\u578b","text":"<p>\u672c\u8bfe\u7a0b\u662f\"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\"\u7684\u7eed\u96c6</p>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#_1","title":"\u8f6c\u6362\u51fd\u6570","text":"<pre><code>class Fraction\n{\npublic:\n    Fraction(int num, int den = 1)\n        : m_numerator(num), m-denominator(den) {}\n    operator double() const {\n        return (double)(m_numerator / m_denominator);\n    }\n    operator string() const {...}\nprivate:\n    int m_numerator;    //\u5206\u5b50\n    int m_denominator;  //\u5206\u6bcd\n}\n</code></pre> <ul> <li> <p>\u5176\u4e2d<code>operator double() const</code>\u662f\u8f6c\u6362\u51fd\u6570,\u8f6c\u6362\u51fd\u6570\u6ca1\u6709\u7c7b\u578b\u58f0\u660e,\u56e0\u4e3a\u51fd\u6570\u540d\u4e2d\u9690\u542b\u4e86\u7c7b\u578b</p> </li> <li> <p>\u8f6c\u6362\u51fd\u6570\u7684\u76ee\u7684\u662f\u5728\u5c06\u6765\u9700\u8981\u7684\u65f6\u5019,\u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362,\u5982:</p> </li> <li> <p><code>cpp     Fraction f(3, 5);     double d = 4 + f;     //\u81ea\u52a8\u8c03\u7528operator double() \u5c06f\u8f6c\u4e3a0.6     //\u7f16\u8bd1\u5668\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u627e'+'\u662f\u5426\u5b58\u5728\u64cd\u4f5c\u7b26\u91cd\u8f7d,\u7b2c\u4e8c\u4ef6\u4e8b\u5219\u662f\u5bfb\u627ef\u7684\u8f6c\u6362\u51fd\u6570\u4ee5\u5b8c\u6210\u7f16\u8bd1</code></p> </li> <li> <p>\u53ef\u540c\u65f6\u5b9a\u4e49\u591a\u4e2a\u8f6c\u6362\u51fd\u6570.</p> </li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#explict","title":"explict(\u5173\u952e\u5b57)","text":"<pre><code>class Fraction\n{\npublic:\n    Fraction(int num, int den = 1)\n        : m_numerator(num), m-denominator(den) {}\n\n    Fraction operator+(const Fraction&amp; f) {\n        return Fraction(...);\n    }\nprivate:\n    int m_numerator;    //\u5206\u5b50\n    int m_denominator;  //\u5206\u6bcd\n}\n\nFraction f(3, 5);\nFraction d = f + 4;\n//success! 4\u88ab\u8f6c\u6362\u6210\u4e864/1\n</code></pre> <pre><code>class Fraction\n{\npublic:\n    Fraction(int num, int den = 1)\n        : m_numerator(num), m-denominator(den) {}\n    operator double() const {\n        return (double)(m_numerator / m_denominator);\n    }\n    Fraction operator+(const Fraction&amp; f) {\n        return Fraction(...);\n    }\nprivate:\n    int m_numerator;    //\u5206\u5b50\n    int m_denominator;  //\u5206\u6bcd\n}\n\nFraction f(3, 5);\nFraction d = f + 4;\n//error! \u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u9009\u62e9\u4f55\u79cd\u65b9\u5f0f\n</code></pre> <pre><code>class Fraction\n{\npublic:\n    explicit Fraction(int num, int den = 1)\n        : m_numerator(num), m-denominator(den) {}\n    operator double() const {\n        return (double)(m_numerator / m_denominator);\n    }\n    Fraction operator+(const Fraction&amp; f) {\n        return Fraction(...);\n    }\nprivate:\n    int m_numerator;    //\u5206\u5b50\n    int m_denominator;  //\u5206\u6bcd\n}\n\nFraction f(3, 5);\nFraction d = f + 4;\n//error! conversion from 'double' to 'Fraction' requested.\n</code></pre> <ul> <li>\u53ef\u89c1,<code>explicit</code>\u4f1a\u8ba9\u7f16\u8bd1\u5668\u4e0d\u53bb\u81ea\u52a8\u8c03\u7528\u6784\u9020\u51fd\u6570,\u8be5\u5173\u952e\u5b57\u4f7f\u7528\u9891\u7387\u8f83\u4f4e,\u7edd\u5927\u591a\u6570\u662f\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e2d\u4f7f\u7528,\u5373\u7528\u5728\u6784\u9020\u51fd\u6570\u4e4b\u524d\u907f\u514d\u53d1\u751f\u9690\u5f0f\u8f6c\u6362</li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#pointer-like-classes","title":"pointer-like classes(\u667a\u80fd\u6307\u9488)","text":"<pre><code>template&lt;class T&gt;\nclass shared_ptr\n{\npublic:\n    T&amp; operator*() const {\n        return *px;\n    }\n    T* operator-&gt;() const {\n        return px;\n    }\n    shared_ptr(T* p) : px(p) { }\nprivate:\n    T* px;\n    long* pn;\n}\n\nstruct Foo\n{\n    ...\n    void method(void) {...}\n};\n\nshared_ptr&lt;Foo&gt; sp(new Foo);\nFoo f(*sp);\nsp-&gt;mathod();\n//\u7b49\u4ef7\u4e8epx-&gt;method();\u56e0\u4e3a'-&gt;'\u7b26\u53f7\u5f88\u7279\u522b,\u5f97\u5230\u7684\u4e1c\u897f\u8981\u7ee7\u7eed\u7528\u7bad\u5934\u4f5c\u7528\u4e0a\u53bb\n</code></pre> <ul> <li>\u8fed\u4ee3\u5668\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u79cd\u667a\u80fd\u6307\u9488, \u9664\u4e86\u4e0a\u8ff0<code>*</code>,<code>-&gt;</code>\u64cd\u4f5c\u4e4b\u5916,\u8fd8\u8981\u91cd\u8f7d<code>++</code>,<code>--</code>,\u5982\u679c\u4e0d\u91cd\u8f7d\u5b83\u4eec,\u6307\u9488\u7684++,--\u610f\u5473\u7740\u6307\u5411\u7684\u5730\u5740\u7684\u53d8\u5316,\u800c\u8fed\u4ee3\u5668\u4e3b\u8981\u7684\u7528\u9014\u662f\u904d\u5386\u5bb9\u5668</li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#function-like-classes","title":"function-like classes(\u4eff\u51fd\u6570)","text":"<ul> <li>\u56e0\u4e3a\u51fd\u6570\u8981\u8ddf\u4e00\u4e2a\u5c0f\u62ec\u53f7,\u6240\u4ee5\u6211\u4eec\u628a\u6709\u8fd9\u79cd\u7279\u5f81\u7684\u7c7b\u79f0\u4e3a\u4eff\u51fd\u6570</li> <li>\u91cd\u8f7d\u4e86<code>()</code>\u5219\u662f\u4e00\u4e2a\u4eff\u51fd\u6570</li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#namespace","title":"namespace","text":"<pre><code>using namespace std;\n//-----------------------------\n#include&lt;iostream&gt;\n#include&lt;memory&gt;//shared_ptr\n\nnamespace jj01\n{\nvoid test_member_template() {...}\n}//namespace\n</code></pre>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#_2","title":"\u6a21\u677f","text":"<ul> <li>\u6210\u5458\u6a21\u677f</li> </ul> <ul> <li>\u6cdb\u5316\u662f\u6a21\u677f,\u7279\u5316\u662f\u5bf9\u4e8e\u67d0\u4e9b\u60c5\u51b5\u7684\u72ec\u7279\u7684\u8bbe\u8ba1</li> </ul> <ul> <li> <p>\u5168\u7279\u5316\u4e0e\u504f\u7279\u5316:</p> </li> <li> <p>\u7c7b\u6a21\u677f</p> <p>```cpp template class Test { public:     Test(T1 i,T2 j):a(i),b(j){cout&lt;&lt;\"\u6a21\u677f\u7c7b\"&lt;&lt;endl;} private:     T1 a;     T2 b; }; <p>template&lt;&gt; class Test { public:     Test(int i, char j):a(i),b(j){cout&lt;&lt;\"\u5168\u7279\u5316\"&lt;&lt;endl;} private:     int a;     char b; }; <p>template  class Test { public:     Test(char i, T2 j):a(i),b(j){cout&lt;&lt;\"\u504f\u7279\u5316\"&lt;&lt;endl;} private:     char a;     T2 b; }; //\u4e0b\u97623\u53e5\u4f9d\u6b21\u8c03\u7528\u7c7b\u6a21\u677f\u3001\u5168\u7279\u5316\u4e0e\u504f\u7279\u5316 Test t1(0.1,0.2); Test t2(1,'A'); Test t3('A',true); ``` <li> <p>\u51fd\u6570\u6a21\u677f(\u4e0d\u5b58\u5728\u504f\u7279\u5316)</p> <p>```cpp //\u6a21\u677f\u51fd\u6570 template void fun(T1 a , T2 b) {     cout&lt;&lt;\"\u6a21\u677f\u51fd\u6570\"&lt;&lt;endl; } <p>//\u5168\u7279\u5316 template&lt;&gt; void fun(int a, char b) {     cout&lt;&lt;\"\u5168\u7279\u5316\"&lt;&lt;endl; } <p>//\u51fd\u6570\u4e0d\u5b58\u5728\u504f\u7279\u5316\uff1a\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u9519\u8bef\u7684 / template void fun(char a, T2 b) {     cout&lt;&lt;\"\u504f\u7279\u5316\"&lt;&lt;endl; } / ```"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#_3","title":"\u6a21\u677f\u6a21\u677f\u53c2\u6570","text":"<pre><code>template &lt;typename T,\n          template &lt;typename T&gt;\n            class Container\n          &gt;\nclass XCls\n{\nprivate:\n    Container&lt;T&gt; c;\npublic:\n    ...\n};\n</code></pre>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#_4","title":"\u4e09\u4e2a\u4e3b\u9898","text":""},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#variadic-templates","title":"variadic templates(\u6570\u91cf\u4e0d\u5b9a\u7684\u6a21\u677f\u53c2\u6570)","text":"<ul> <li>\u6ce8\u610fpack\u7684\u6982\u5ff5</li> </ul> <p>```cpp   void print()  { }//\u6700\u540e\u4e00\u5305\u4e4b\u540eprint\u7a7a\u5355\u72ec\u5199\u51fa\u6765</p> <p>template    void print(const T&amp; firstArg, const Types&amp;... args)   {     cout &lt;&lt; firstArg &lt;&lt; endl;       print(args...);   } <p>//\u7528\u6cd5   print(7.5, \"hello\", bitset&lt;16&gt;(377), 42);</p> <p>//output   75   hello   0000000101111001   42   ```</p>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#auto","title":"auto","text":"<ul> <li>auto\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6</li> </ul> <p><code>cpp   list&lt;string&gt; c;   ...   list&lt;string&gt;::iterator ite;   ite = find(c.begin(), c.end(), target);   //\u4ee5\u524d\u7684   auto ite = find(c.begin(), c.end(), target);   //\u73b0\u5728\u7684   auto ite;   ite = find(c.begin(), c.end(), target);   //\u9519\u8bef\u7684</code></p> <ul> <li>\u4e00\u4e2a\u6781\u7aef\u7684\u60f3\u6cd5:\u5168\u90e8\u90fd\u7528auto,\u53ea\u8981\u80fd\u8ba9\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u5bfc\u51fa\u7c7b\u578b, \u53ef\u4ee5,\u4f46\u975e\u5e38\u4e0d\u63a8\u8350, \u56e0\u4e3a\u4e60\u60ef\u4e0d\u597d</li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#ranged-base-forsince-c11","title":"ranged-base for(since C++11)","text":"<ul> <li> <p><code>for(decl : coll) {}</code>:\u4ece\u53f3\u624b\u8fb9\u7684\u5bb9\u5668\u627e\u51fa\u6bcf\u4e00\u4e2a\u5143\u7d20\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf</p> </li> <li> <p><code>cpp   for(int i : {2, 3, 5, 6}){     ...   }</code></p> </li> <li> <p><code>cpp   vector&lt;double&gt; vec;   ...   for(auto elem : vec){     cout &lt;&lt; elem &lt;&lt; endl;       //pass by value,\u5982\u679c\u6539\u53d8elem\u7684\u503c,\u4e0d\u4f1a\u5f71\u54cdvec\u4e2d\u7684\u503c   }   for(auto&amp; elem : vec){     elem *= 3;       //pass by reference   }</code></p> </li> <li> <p>\u7f16\u8bd1\u5668\u5b9e\u73b0\u5f15\u7528\u9760\u7684\u5c31\u662f\u6307\u9488</p> </li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#reference","title":"reference","text":"<pre><code>int x = 0;\nint* p = &amp;x;\nint&amp; r = x; //r\u4ee3\u8868x,\u73b0\u5728r,x\u90fd\u662f0\nint x2 = 5;\n\nr = x2;     //r\u4e0d\u80fd\u91cd\u65b0\u4ee3\u8868\u5176\u4ed6\u7269\u4f53,\u73b0\u5728r,x\u90fd\u662f5\nint &amp;r2 = r;//\u73b0\u5728r2\u662f5(r2\u4ee3\u8868r\u5373\u4ee3\u8868\u4e86x)\n</code></pre> <ul> <li>\u5f15\u7528\u5728\u58f0\u660e\u65f6\u5fc5\u987b\u6307\u660e\u5f15\u7528\u7684\u5bf9\u8c61,\u4e14\u4e0d\u80fd\u6539\u53d8</li> <li> <p>\u7f16\u8bd1\u5668\u4e3areference\u5236\u9020\u4e86\u4e24\u4e2a\u5047\u8c61:<code>sizeof(r) == sizeof(x);&amp;r = &amp;x</code></p> </li> <li> <p>reference\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u79cd\u5341\u5206\u6f02\u4eae\u7684\u6307\u9488,\u5b83\u7684\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u51fd\u6570\u4f20\u53c2</p> </li> <li> <p>\u4ee5\u4e0b\u88ab\u89c6\u4e3a<code>same signature</code>(\u4e24\u8005\u4e0d\u80fd\u540c\u65f6\u5b58\u5728)</p> </li> </ul> <p><code>cpp   double imag(const int x) { };   double imag(const int&amp; x) { };//Ambiguity,\u51fd\u6570\u7b7e\u540d\u76f8\u540c   //------------------------------------------   double imag(const int x) const { };   double imag(const int&amp; x) { };//valid,\u51fd\u6570\u7b7e\u540d\u4e0d\u540c</code></p>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#_5","title":"\u590d\u5408&amp;\u7ee7\u627f\u5173\u7cfb\u4e0b\u7684\u6784\u9020\u548c\u6790\u6784","text":"<ul> <li>\"\u5148\u6784\u9020\u7239,\u518d\u6784\u9020\u513f\"\u5c31\u50cf\u5165\u6808\u4e00\u6837,\u5148\u6784\u9020\u7684\u8981\u540e\u6790\u6784</li> <li>\u5728\u7ee7\u627f\u5173\u7cfb\u4e0b,<code>base</code>\u662f\u7239</li> <li>\u5728\u590d\u5408\u5173\u7cfb\u4e0b,<code>container</code>\u662f\u7239</li> </ul>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#vptrvtbl","title":"\u5173\u4e8evptr\u548cvtbl(\u865a\u6307\u9488\u548c\u865a\u8868)","text":"<p>\u53ea\u8981\u6709\u865a\u51fd\u6570\u5c31\u6709\u865a\u6307\u9488, \u5219sizeof(obj)\u6bd4\u4e0d\u542b\u865a\u6307\u9488\u7684\u5185\u5b58\u591a4</p> <p></p> <p>\u8003\u8651\u4e00\u79cd\u60c5\u51b5: <code>base</code>\u662fshape\u5f62\u72b6, <code>derive</code>\u662f\u5706\u5f62, \u77e9\u5f62\u7b49\u4e0d\u540c\u7684\u7c7b.</p> <p>\u8fd9\u662f\u60f3\u8981\u628a\u8fd9\u4e9b\u4e0d\u540c\u7684\u5f62\u72b6\u4eec\u653e\u5230\u4e00\u4e2a\u5bb9\u5668\u91cc\u9762\u53bb, \u7136\u800c\u4efb\u4f55\u5bb9\u5668\u90fd\u4e0d\u80fd\u591f\u5b58\u653e\u4e0d\u540c\u5927\u5c0f\u7684\u5143\u7d20, \u6b64\u65f6\u53ea\u80fd\u4f7f\u7528\u5bb9\u5668\u5b58\u653e\u6307\u9488, \u800c\u6307\u9488\u7684\u7c7b\u578b\u5e94\u8be5\u4e3a<code>base</code></p> <pre><code>/*\n    \u81ea\u5df1\u5199\u4e86\u4e00\u4e2a\u6837\u4f8b\u7a0b\u5e8f, \u4f7f\u7528\u4e86\u865a\u51fd\u6570,\u7ee7\u627f\u4ee5\u53ca\u4e0a\u8ff0\u5bb9\u5668\u7684\u4f7f\u7528\n*/\n\n\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Shape\n{\npublic:\n    virtual void Draw() const = 0;\n    Shape()\n        : length(0), e(0)\n        {}\n    void SetE(int n){\n        e = n;\n    }\n    void SetLen(double &amp;l){\n        length = l;\n    }\n    int GetE() const {\n        return e;\n    }\n    double GetLen() const {\n        return length;\n    }\nprivate:\n    double length;\n    int e;\n};\n\nclass Triangle\n: public Shape\n{\npublic:\n    Triangle(double l = 0){\n        SetLen(l);\n        SetE(3);\n    }\n    virtual void Draw() const;\n};\n\nclass Quadrangle\n: public Shape\n{\npublic:\n    Quadrangle(double l = 0){\n        SetLen(l);\n        SetE(3);\n    }\n    virtual void Draw() const;\n};\n\ninline void Quadrangle::Draw() const\n{\n    cout &lt;&lt; \"Quadrangle and its edge length is \" &lt;&lt; GetLen() &lt;&lt; endl;\n}\n\n\ninline void Triangle::Draw() const\n{\n    cout &lt;&lt; \"Triangle and its edge length is \" &lt;&lt; GetLen() &lt;&lt; endl;\n}\n\n\nvoid print(vector&lt;Shape*&gt;&amp; vec)\n{\n    for(auto&amp; i : vec){\n        i-&gt;Draw();\n    }\n}\n\nint main()\n{\n    Triangle* t = new Triangle(1);\n    Quadrangle* q = new Quadrangle(4.6);\n    vector&lt;Shape*&gt; vec;\n    vec.push_back(t);\n    vec.push_back(q);\n    print(vec);\n    return 0;\n}\n</code></pre>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#this","title":"\u5173\u4e8ethis","text":"<p>\u5148\u6d45\u8c08\u52a8\u6001\u7ed1\u5b9a, \u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\u7f16\u8bd1\u5668\u5c06\u4f1a\u52a8\u6001\u7ed1\u5b9a</p> <p></p> <ol> <li>\u5bf9\u8c61\u6307\u9488<code>this-&gt;Serialize();</code></li> <li>\u5411\u4e0a\u8f6c\u578b:<code>CMyDoc(derive)</code>\u2192<code>CDocument(base)</code></li> <li>\u8c03\u7528\u865a\u51fd\u6570:<code>virtual void Serialize()</code></li> </ol> <p>\u7531\u4e8e\u6bcf\u4e2a\u6210\u5458\u51fd\u6570\u5728\u8c03\u7528\u7684\u65f6\u5019\u90fd\u9690\u542b\u4e86\u53c2\u6570<code>this</code>, <code>this</code>\u6307\u9488\u6307\u5411\u51fd\u6570\u7684\u8c03\u7528\u8005</p> <p>\u5219\u5f53\u7a0b\u5e8f\u6267\u884c\u5230<code>Serialize();</code>\u8fd9\u4e00\u884c\u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8be5\u51fd\u6570\u7684\u8c03\u7528\u8005\u662fthis\u4e4b\u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61, \u5219\u8be5\u884c\u88ab\u8ba4\u4e3a\u662f<code>this-&gt;Serialize();</code>\u7b26\u5408\u4ee5\u4e0a\u52a8\u6001\u7ed1\u5b9a\u7684\u6761\u4ef6, \u5b9e\u9645\u4e0a\u7f16\u8bd1\u5668\u4f1a\u6267\u884c\u7684\u6307\u4ee4\u7528c\u8bed\u8a00\u7684\u5f62\u5f0f\u8868\u793a\u4e3a<code>(*(this-&gt;vptr)[n])(this);</code></p>"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/#const","title":"\u8c08\u8c08const","text":"const object non-const object const member functions yes yes non-const member functions no yes"},{"location":"%E8%B7%9F%E4%BE%AF%E6%8D%B7%E5%AD%A6cpp/%E8%99%9A/","title":"\u865a","text":"<p>2023/5/17</p> <p>\u7814\u7a76\u865a\u51fd\u6570\u65f6, \u53d1\u73b0\u5176\u4e2d\u7684\u5185\u5b58\u5927\u6709\u5b66\u95ee, \u8bd5\u603b\u7ed3\u5982\u4e0b</p> <ul> <li>\u9996\u5148\u9700\u8981\u660e\u786e, \u5728\u7f16\u8bd1\u5668\u4e2d\u53ef\u4ee5\u9009\u62e9\u5185\u5b58\u5bf9\u9f50\u7684\u6a21\u5f0f, \u672c\u6587\u4f7f\u7528\u7684\u662f8\u5b57\u8282\u5bf9\u9f50(windows64)</li> <li>\u7531\u4e8e\u662f8\u5b57\u8282\u5bf9\u9f50, \u6bcf\u4e00\u4e2aint\u662f4\u5b57\u8282, \u5c31\u4f1a\u51fa\u73b0\u6bcf\u4e24\u4e2aint\u4f1a\u8ba9size\u589e\u52a08\u7684\u73b0\u8c61</li> <li>\u7eaf\u865a\u51fd\u6570\u8981\u7528\"=0\"\u6765\u58f0\u660e, \u6b64\u65f6\u8be5\u7c7b\u4e3a\u62bd\u8c61\u7c7b, \u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316</li> <li>\u6bcf\u4e00\u4e2a\u542b\u6709\u865a\u51fd\u6570\u7684\u7c7b\u90fd\u4f1a\u6709\u4e00\u4e2a\u865a\u6307\u9488(vptr)\u548c\u865a\u8868(vtbl)</li> <li>\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u4e3a\u865a\u51fd\u6570, \u56e0\u4e3a\u865a\u6307\u9488\u548c\u865a\u8868\u7684\u5efa\u7acb\u5728\u6784\u9020\u51fd\u6570\u5b8c\u6210\u4e4b\u540e</li> <li>\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u662f\u865a\u51fd\u6570</li> <li>\u6784\u9020\u65f6\u662f\u5148\u6784\u9020\u7236\u7c7b(\u5c0f), \u518d\u6784\u9020\u5b50\u7c7b(\u5927), \u6790\u6784\u65f6\u5148\u6790\u6784\u5b50\u7c7b(\u5927), \u518d\u6790\u6784\u7236\u7c7b(\u5c0f)</li> <li> <p>\u5173\u4e8e\u5f3a\u8f6c: \u53ea\u80fd\u5c06\u5927\u7684\u5f3a\u8f6c\u4e3a\u5c0f\u7684, \u5373\u5b50\u7c7b\u8f6c\u4e3a\u7236\u7c7b, \u56e0\u4e3a\u6211\u4eec\u5141\u8bb8\u6570\u636e\u7684\u4e22\u5931\u800c\u4e0d\u5141\u8bb8\u6570\u636e\u7684\u7f3a\u5931</p> </li> <li> <p>\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u7684\u7c7bsize\u662f1, \u5e94\u8be5\u662f\u7f16\u8bd1\u5668\u4e3a\u5176\u5206\u914d\u4e86\u4e00\u4e2a\u5b57\u7b26, \u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u5bf9\u8c61(obj)</p> </li> <li> <p>\u6307\u9488\u7684\u5b57\u8282\u662f\u6309\u7167\u7cfb\u7edf\u6765\u7684, 64\u4f4d\u7cfb\u7edf\u7684\u6307\u9488\u662f8\u5b57\u8282, 32\u4f4d\u7cfb\u7edf\u7684\u6307\u9488\u662f4\u5b57\u8282</p> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Base\n{\nprivate:\n    int a;\n\npublic:\n    Base() {}\n    virtual ~Base() { cout &lt;&lt; \"~Base()\" &lt;&lt; endl; }\n};\n\nclass Dervied1 : virtual public Base\n{\nprivate:\n    int dervied1;\n\npublic:\n    Dervied1() {}\n    ~Dervied1() { cout &lt;&lt; \"~Derived1()\" &lt;&lt; endl; }\n};\nclass Dervied2 : virtual public Base\n{\nprivate:\n    int dervied2;\n\npublic:\n    Dervied2() {}\n    virtual ~Dervied2() {}\n};\nclass Final : public Dervied1, public Dervied2\n{\nprivate:\n    int final;\n\npublic:\n    Final() {}\n    virtual ~Final() {}\n};\n\nint main()\n{\n\n    cout &lt;&lt; sizeof(Base) &lt;&lt; endl;\n    cout &lt;&lt; sizeof(Dervied1) &lt;&lt; endl;\n    cout &lt;&lt; sizeof(Dervied2) &lt;&lt; endl;\n    cout &lt;&lt; sizeof(Final) &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u91cd\u5934\u620f--\u865a\u7ee7\u627f</p> <ul> <li>\u865a\u7ee7\u627f\u548c\u666e\u901a\u7ee7\u627f\u662f\u6709\u5f88\u5927\u533a\u522b\u7684</li> <li>\u666e\u901a\u7ee7\u627f\u65f6\u4f1a\u53d1\u751f\u5185\u5b58\u5408\u5e76, \u8003\u8651\u5230\u5185\u5b58\u5bf9\u9f50\u7684\u95ee\u9898, \u5982\u679c\u7236\u7c7b\u6709\u4e00\u4e2aint\u5b50\u7c7b\u6709\u4e00\u4e2aint, \u6b64\u65f6\u666e\u901a\u7ee7\u627f\u4f1a\u5c06\u4ed6\u4eec\u653e\u5728\u540c\u4e00\u5757\u5185\u5b58, size\u4ecd\u7136\u662f8, \u5982\u679c\u662f\u865a\u7ee7\u627f, \u5b50\u7c7b\u4f1a\u4e3a\u7236\u7c7b\u5728\u5185\u5b58\u4e2d\u5355\u72ec\u5b58\u653e(\u6240\u4ee5\u83f1\u5f62\u7ee7\u627f\u65f6\u53ea\u4f1a\u6709\u4e00\u4e2a\u7237\u7c7b, \u5982\u679c\u5185\u5b58\u5bf9\u9f50\u5c06\u4ed6\u4eec\u90fd\u5408\u5e76\u5c31\u65e0\u6cd5\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u7237\u7c7b\u4e86), \u4f55\u8c13\u5355\u72ec\u5b58\u653e\u5462? \u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc, \u5b50\u7c7b\u4e3a\u4e86\u5b58\u653e\u8fd9\u4e24\u4e2aint\u7684size\u4e3a16, \u518d\u52a0\u4e0a\u865a\u57fa\u7c7b\u8868\u6307\u94888(\u5c31\u662f\u57fa\u7c7b\u7684\u865a\u6307\u9488), \u4ed6\u81ea\u5df1\u7684\u865a\u6307\u94888(\u6ce8\u610f\u8fd9\u91cc\u65e0\u8bba\u5b50\u7c7b\u662f\u5426\u6709\u865a\u51fd\u6570\u90fd\u9700\u8981\u6709\u8fd9\u4e2a\u865a\u6307\u9488, \u56e0\u4e3a\u7236\u7c7b\u7684\u865a\u51fd\u6570\u9700\u8981\u901a\u8fc7\u5b50\u7c7b\u7684\u865a\u6307\u9488\u6765\u8c03\u7528, \u5b83\u548c\u865a\u57fa\u7c7b\u8868\u6307\u9488\u7684\u533a\u522b\u662f\u865a\u57fa\u7c7b\u8868\u6307\u9488\u662f\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u5b59\u7c7b\u7684\u7ee7\u627f\u7684)</li> <li>\u8865\u5145: \u666e\u901a\u7ee7\u627f\u662f\u6ca1\u6709\u865a\u57fa\u7c7b\u8868\u6307\u9488\u7684, \u57fa\u7c7b\u7684\u865a\u51fd\u6570\u5168\u90fd\u8f6c\u79fb\u5230\u4e86\u5b50\u7c7b\u7684\u865a\u8868\u5f53\u4e2d\u53bb\u4e86</li> <li>\u6b64\u65f6\u5b59\u7c7b\u7684\u7ee7\u627f\u7531\u4e8e\u4e0d\u662f\u865a\u7ee7\u627f, \u7236\u7c7b\u7531\u4e8e\u5185\u5b58\u5bf9\u9f50\u800c\u6d6a\u8d39\u7684\u5185\u5b58\u53ef\u4ee5\u5229\u7528\u8d77\u6765, \u800c\u6700\u5f00\u59cb\u7684base\u7684\u6570\u636e\u548c\u865a\u57fa\u7c7b\u8868\u6307\u9488\u90fd\u539f\u5c01\u4e0d\u52a8\u7684\u7ee7\u627f\u4e0b\u6765, \u65e0\u6cd5\u53d1\u751f\u5185\u5b58\u95f4\u7684\u5408\u5e76, \u5c31\u50cf\u4e00\u4e2a\u9ed1\u76d2!</li> </ul>"}]}